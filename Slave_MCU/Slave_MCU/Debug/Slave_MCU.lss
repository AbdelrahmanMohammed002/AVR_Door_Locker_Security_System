
Slave_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800060  00800060  00000c00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003c8  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002350  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbc  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002197  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a20  00000000  00000000  000062d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000632d  00000000  00000000  00006cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001433  00000000  00000000  0000d025  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000350  00000000  00000000  0000e458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001c94  00000000  00000000  0000e7a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 33 04 	jmp	0x866	; 0x866 <__vector_6>
  1c:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__vector_7>
  20:	0c 94 89 04 	jmp	0x912	; 0x912 <__vector_8>
  24:	0c 94 b4 04 	jmp	0x968	; 0x968 <__vector_9>
  28:	0c 94 cb 03 	jmp	0x796	; 0x796 <__vector_10>
  2c:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_13>
  38:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_14>
  3c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_17>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 37       	cpi	r26, 0x77	; 119
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 15 01 	call	0x22a	; 0x22a <main>
  74:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TIMER1_CTC_INT_ISR>:
    }
    A_u8PasswordBuffer[PASSWORD_SIZE - 1] = '\0';  // Ensure the string is null-terminated
}

void TIMER1_CTC_INT_ISR() {
	if (global_u8TicksCounter == 15) {
  7c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <global_u8TicksCounter>
  80:	8f 30       	cpi	r24, 0x0F	; 15
  82:	41 f4       	brne	.+16     	; 0x94 <TIMER1_CTC_INT_ISR+0x18>
		global_u8SecondsCounter++;
  84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <global_u8SecondsCounter>
  88:	8f 5f       	subi	r24, 0xFF	; 255
  8a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <global_u8SecondsCounter>
		global_u8TicksCounter = 0;
  8e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <global_u8TicksCounter>
  92:	08 95       	ret
		} else {
		global_u8TicksCounter++;
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <global_u8TicksCounter>
  9a:	08 95       	ret

0000009c <Function_vReceivePassword>:
/**
 * Function_vReceivePassword: Receives a password from the Master MCU.
 *
 * @param A_u8PasswordBuffer: A pointer to the buffer where the received password will be stored.
 */
void Function_vReceivePassword(u8 *A_u8PasswordBuffer) {
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	ec 01       	movw	r28, r24
    // Receive each character of the password
    MUSART_vRecieveString(A_u8PasswordBuffer, PASSWORD_SIZE);
  a2:	66 e0       	ldi	r22, 0x06	; 6
  a4:	0e 94 06 05 	call	0xa0c	; 0xa0c <MUSART_vRecieveString>
    *(A_u8PasswordBuffer + PASSWORD_SIZE - 1) = '\0';  // Ensure the string is null-terminated
  a8:	1d 82       	std	Y+5, r1	; 0x05
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <Function_u8ComparePasswords>:
 *
 * @param A_u8Password1: First password buffer.
 * @param A_u8Password2: Second password buffer.
 * @return u8: Returns 1 if passwords match, 0 otherwise.
 */
u8 Function_u8ComparePasswords(u8 *A_u8Password1, u8 *A_u8Password2) {
  b0:	dc 01       	movw	r26, r24
    for (u8 i = 0; i < PASSWORD_SIZE - 1; i++) {  // Adjusted loop to consider the null-terminator
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0d c0       	rjmp	.+26     	; 0xd0 <Function_u8ComparePasswords+0x20>
        if (*(A_u8Password1 + i) != *(A_u8Password2 + i)) {
  b6:	29 2f       	mov	r18, r25
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	fd 01       	movw	r30, r26
  bc:	e2 0f       	add	r30, r18
  be:	f3 1f       	adc	r31, r19
  c0:	40 81       	ld	r20, Z
  c2:	fb 01       	movw	r30, r22
  c4:	e2 0f       	add	r30, r18
  c6:	f3 1f       	adc	r31, r19
  c8:	20 81       	ld	r18, Z
  ca:	42 13       	cpse	r20, r18
  cc:	05 c0       	rjmp	.+10     	; 0xd8 <Function_u8ComparePasswords+0x28>
 * @param A_u8Password1: First password buffer.
 * @param A_u8Password2: Second password buffer.
 * @return u8: Returns 1 if passwords match, 0 otherwise.
 */
u8 Function_u8ComparePasswords(u8 *A_u8Password1, u8 *A_u8Password2) {
    for (u8 i = 0; i < PASSWORD_SIZE - 1; i++) {  // Adjusted loop to consider the null-terminator
  ce:	9f 5f       	subi	r25, 0xFF	; 255
  d0:	95 30       	cpi	r25, 0x05	; 5
  d2:	88 f3       	brcs	.-30     	; 0xb6 <Function_u8ComparePasswords+0x6>
        if (*(A_u8Password1 + i) != *(A_u8Password2 + i)) {
            return 0;  // Passwords do not match
        }
    }
    return 1;  // Passwords match
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
 * @return u8: Returns 1 if passwords match, 0 otherwise.
 */
u8 Function_u8ComparePasswords(u8 *A_u8Password1, u8 *A_u8Password2) {
    for (u8 i = 0; i < PASSWORD_SIZE - 1; i++) {  // Adjusted loop to consider the null-terminator
        if (*(A_u8Password1 + i) != *(A_u8Password2 + i)) {
            return 0;  // Passwords do not match
  d8:	80 e0       	ldi	r24, 0x00	; 0
        }
    }
    return 1;  // Passwords match
}
  da:	08 95       	ret

000000dc <Function_vStorePasswordInEEPROM>:
/**
 * Function_vStorePasswordInEEPROM: Stores the password in the EEPROM.
 *
 * @param A_u8Password: The password to be stored.
 */
void Function_vStorePasswordInEEPROM(u8 *A_u8Password) {
  dc:	0f 93       	push	r16
  de:	1f 93       	push	r17
  e0:	cf 93       	push	r28
  e2:	8c 01       	movw	r16, r24
    for (u8 i = 0; i < PASSWORD_SIZE; i++) {
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	0f c0       	rjmp	.+30     	; 0x106 <Function_vStorePasswordInEEPROM+0x2a>
        MEEPROM_vWriteByte(PASSWORD_ADDRESS + i, A_u8Password[i]);  // Write each character to EEPROM
  e8:	8c 2f       	mov	r24, r28
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	f8 01       	movw	r30, r16
  ee:	e8 0f       	add	r30, r24
  f0:	f9 1f       	adc	r31, r25
  f2:	60 81       	ld	r22, Z
  f4:	0e 94 3e 03 	call	0x67c	; 0x67c <MEEPROM_vWriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8f e1       	ldi	r24, 0x1F	; 31
  fa:	9e e4       	ldi	r25, 0x4E	; 78
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <Function_vStorePasswordInEEPROM+0x20>
 100:	00 c0       	rjmp	.+0      	; 0x102 <Function_vStorePasswordInEEPROM+0x26>
 102:	00 00       	nop
 * Function_vStorePasswordInEEPROM: Stores the password in the EEPROM.
 *
 * @param A_u8Password: The password to be stored.
 */
void Function_vStorePasswordInEEPROM(u8 *A_u8Password) {
    for (u8 i = 0; i < PASSWORD_SIZE; i++) {
 104:	cf 5f       	subi	r28, 0xFF	; 255
 106:	c6 30       	cpi	r28, 0x06	; 6
 108:	78 f3       	brcs	.-34     	; 0xe8 <Function_vStorePasswordInEEPROM+0xc>
        MEEPROM_vWriteByte(PASSWORD_ADDRESS + i, A_u8Password[i]);  // Write each character to EEPROM
        _delay_ms(10);  // Small delay to ensure EEPROM write completion
    }
    MEEPROM_vWriteByte(FIRST_USE_INDICATOR_ADDRESS, 0x00); // Clear the first-use indicator
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	80 e1       	ldi	r24, 0x10	; 16
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 3e 03 	call	0x67c	; 0x67c <MEEPROM_vWriteByte>
 114:	8f e1       	ldi	r24, 0x1F	; 31
 116:	9e e4       	ldi	r25, 0x4E	; 78
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <Function_vStorePasswordInEEPROM+0x3c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <Function_vStorePasswordInEEPROM+0x42>
 11e:	00 00       	nop
    _delay_ms(10);
}
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <Function_vReadPasswordFromEEPROM>:
/**
 * Function_vReadPasswordFromEEPROM: Reads the stored password from EEPROM.
 *
 * @param A_u8PasswordBuffer: A pointer to the buffer where the read password will be stored.
 */
void Function_vReadPasswordFromEEPROM(u8 *A_u8PasswordBuffer) {
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	7c 01       	movw	r14, r24
    for (u8 i = 0; i < PASSWORD_SIZE; i++) {
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	10 c0       	rjmp	.+32     	; 0x158 <Function_vReadPasswordFromEEPROM+0x30>
        A_u8PasswordBuffer[i] = MEEPROM_u8ReadByte(PASSWORD_ADDRESS + i);  // Read each character from EEPROM
 138:	8c 2f       	mov	r24, r28
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	87 01       	movw	r16, r14
 13e:	08 0f       	add	r16, r24
 140:	19 1f       	adc	r17, r25
 142:	0e 94 49 03 	call	0x692	; 0x692 <MEEPROM_u8ReadByte>
 146:	f8 01       	movw	r30, r16
 148:	80 83       	st	Z, r24
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <Function_vReadPasswordFromEEPROM+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <Function_vReadPasswordFromEEPROM+0x2c>
 154:	00 00       	nop
 * Function_vReadPasswordFromEEPROM: Reads the stored password from EEPROM.
 *
 * @param A_u8PasswordBuffer: A pointer to the buffer where the read password will be stored.
 */
void Function_vReadPasswordFromEEPROM(u8 *A_u8PasswordBuffer) {
    for (u8 i = 0; i < PASSWORD_SIZE; i++) {
 156:	cf 5f       	subi	r28, 0xFF	; 255
 158:	c6 30       	cpi	r28, 0x06	; 6
 15a:	70 f3       	brcs	.-36     	; 0x138 <Function_vReadPasswordFromEEPROM+0x10>
        A_u8PasswordBuffer[i] = MEEPROM_u8ReadByte(PASSWORD_ADDRESS + i);  // Read each character from EEPROM
        _delay_ms(10);  // Small delay to ensure EEPROM read completion
    }
    A_u8PasswordBuffer[PASSWORD_SIZE - 1] = '\0';  // Ensure the string is null-terminated
 15c:	f7 01       	movw	r30, r14
 15e:	15 82       	std	Z+5, r1	; 0x05
}
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	08 95       	ret

0000016c <Function_vSystemFreeze>:
	}
}

void Function_vSystemFreeze(){
	// Initialize Timer1 and set callback for channel A CTC interrupt
	MTIMER1_vInit();
 16c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <MTIMER1_vInit>
	MTIMER1_vChannelASetCTCCallBack(&TIMER1_CTC_INT_ISR);
 170:	8e e3       	ldi	r24, 0x3E	; 62
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 2c 04 	call	0x858	; 0x858 <MTIMER1_vChannelASetCTCCallBack>
	MTIMER1_vChannelASetCTCRegister(62500);
 178:	84 e2       	ldi	r24, 0x24	; 36
 17a:	94 ef       	ldi	r25, 0xF4	; 244
 17c:	0e 94 15 04 	call	0x82a	; 0x82a <MTIMER1_vChannelASetCTCRegister>
	MTIMER1_vChannelAEnableCTCINT();
 180:	0e 94 1c 04 	call	0x838	; 0x838 <MTIMER1_vChannelAEnableCTCINT>
	
	// Enable global interrupts
	MGIE_vEnableInterrupts();
 184:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MGIE_vEnableInterrupts>
	
	HBuzzer_vInit();
 188:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <HBuzzer_vInit>
	HBuzzer_vOn();
 18c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <HBuzzer_vOn>
	while(global_u8SecondsCounter<60);
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <global_u8SecondsCounter>
 194:	8c 33       	cpi	r24, 0x3C	; 60
 196:	e0 f3       	brcs	.-8      	; 0x190 <Function_vSystemFreeze+0x24>
	HBuzzer_vOFF();
 198:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <HBuzzer_vOFF>
	global_u8FailureCounter= 0;
 19c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	global_u8SecondsCounter =0;
 1a0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <global_u8SecondsCounter>
	MTIMER1_vDisInit();
 1a4:	0e 94 12 04 	call	0x824	; 0x824 <MTIMER1_vDisInit>
 1a8:	08 95       	ret

000001aa <Function_vOpenDoor>:
}

/**
 * Function_vOpenDoor: Handles the process of opening the door.
 */
void Function_vOpenDoor(DCMotor * Door_Motor) {
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	ec 01       	movw	r28, r24
	
	// Initialize Timer1 and set callback for channel A CTC interrupt
	MTIMER1_vInit();
 1b0:	0e 94 f6 03 	call	0x7ec	; 0x7ec <MTIMER1_vInit>
	MTIMER1_vChannelASetCTCCallBack(&TIMER1_CTC_INT_ISR);
 1b4:	8e e3       	ldi	r24, 0x3E	; 62
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 2c 04 	call	0x858	; 0x858 <MTIMER1_vChannelASetCTCCallBack>
	MTIMER1_vChannelASetCTCRegister(62500);
 1bc:	84 e2       	ldi	r24, 0x24	; 36
 1be:	94 ef       	ldi	r25, 0xF4	; 244
 1c0:	0e 94 15 04 	call	0x82a	; 0x82a <MTIMER1_vChannelASetCTCRegister>
	MTIMER1_vChannelAEnableCTCINT();
 1c4:	0e 94 1c 04 	call	0x838	; 0x838 <MTIMER1_vChannelAEnableCTCINT>
	
	// Enable global interrupts
	MGIE_vEnableInterrupts();
 1c8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MGIE_vEnableInterrupts>
	
    // Door open delay simulation
    Door_Motor->State = CLOCKWISE;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	8b 83       	std	Y+3, r24	; 0x03
    HDCMotor_RotateDirection_Speed(Door_Motor);
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 20 02 	call	0x440	; 0x440 <HDCMotor_RotateDirection_Speed>
	while(global_u8SecondsCounter<15);
 1d6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <global_u8SecondsCounter>
 1da:	8f 30       	cpi	r24, 0x0F	; 15
 1dc:	e0 f3       	brcs	.-8      	; 0x1d6 <Function_vOpenDoor+0x2c>
	
    // Door is open 
    Door_Motor->State = STOP;
 1de:	1b 82       	std	Y+3, r1	; 0x03
    HDCMotor_RotateDirection_Speed(Door_Motor);
 1e0:	ce 01       	movw	r24, r28
 1e2:	0e 94 20 02 	call	0x440	; 0x440 <HDCMotor_RotateDirection_Speed>
	while(global_u8SecondsCounter<19);
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <global_u8SecondsCounter>
 1ea:	83 31       	cpi	r24, 0x13	; 19
 1ec:	e0 f3       	brcs	.-8      	; 0x1e6 <Function_vOpenDoor+0x3c>
    
    // Door close delay simulation
    Door_Motor->State = ANTI_CLOCKWISE;
 1ee:	82 e0       	ldi	r24, 0x02	; 2
 1f0:	8b 83       	std	Y+3, r24	; 0x03
    HDCMotor_RotateDirection_Speed(Door_Motor);
 1f2:	ce 01       	movw	r24, r28
 1f4:	0e 94 20 02 	call	0x440	; 0x440 <HDCMotor_RotateDirection_Speed>
	while(global_u8SecondsCounter<34);
 1f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <global_u8SecondsCounter>
 1fc:	82 32       	cpi	r24, 0x22	; 34
 1fe:	e0 f3       	brcs	.-8      	; 0x1f8 <Function_vOpenDoor+0x4e>
    Door_Motor->State = STOP;
 200:	1b 82       	std	Y+3, r1	; 0x03
    HDCMotor_RotateDirection_Speed(Door_Motor);
 202:	ce 01       	movw	r24, r28
 204:	0e 94 20 02 	call	0x440	; 0x440 <HDCMotor_RotateDirection_Speed>
	global_u8SecondsCounter =0 ;
 208:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <global_u8SecondsCounter>
	MTIMER1_vDisInit();
 20c:	0e 94 12 04 	call	0x824	; 0x824 <MTIMER1_vDisInit>
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <Function_vCheckFirstUse>:
 * Function_vCheckFirstUse: Checks if the system is being used for the first time.
 *
 * @return u8: Returns 1 if it is the first use, 0 otherwise.
 */
u8 Function_vCheckFirstUse(void) {
    return (MEEPROM_u8ReadByte(FIRST_USE_INDICATOR_ADDRESS) == 0xFF);
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 49 03 	call	0x692	; 0x692 <MEEPROM_u8ReadByte>
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	8f 3f       	cpi	r24, 0xFF	; 255
 222:	09 f0       	breq	.+2      	; 0x226 <Function_vCheckFirstUse+0x10>
 224:	90 e0       	ldi	r25, 0x00	; 0
}
 226:	89 2f       	mov	r24, r25
 228:	08 95       	ret

0000022a <main>:


int main(void) {
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	68 97       	sbiw	r28, 0x18	; 24
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
    // Initialize MCU peripherals
    MDIO_vSetPinDirection(PORT_D, 0, INPUT);  // RX
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(PORT_D, 1, OUTPUT); // TX
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>

    MUSART_vInit(51);  // Initialize USART communication
 252:	83 e3       	ldi	r24, 0x33	; 51
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 df 04 	call	0x9be	; 0x9be <MUSART_vInit>

    // Initial handshake with Master MCU
    while (MUSART_u8Receive() != MASTER_READY);
 25a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MUSART_u8Receive>
 25e:	18 2f       	mov	r17, r24
 260:	81 11       	cpse	r24, r1
 262:	fb cf       	rjmp	.-10     	; 0x25a <main+0x30>
    MUSART_vTransmit(SLAVE_READY);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>

    u8 local_u8SystemStatus;
    u8 local_u8StoredPassword[PASSWORD_SIZE], local_u8EnteredPassword[PASSWORD_SIZE], local_u8ReEnteredPassword[PASSWORD_SIZE];

    // Initialize the door motor
    DCMotor Door_Motor = {
 26a:	ce 01       	movw	r24, r28
 26c:	43 96       	adiw	r24, 0x13	; 19
 26e:	26 e0       	ldi	r18, 0x06	; 6
 270:	fc 01       	movw	r30, r24
 272:	11 92       	st	Z+, r1
 274:	2a 95       	dec	r18
 276:	e9 f7       	brne	.-6      	; 0x272 <main+0x48>
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	2d 8b       	std	Y+21, r18	; 0x15
	    .input_pin2 = PIN1,
	    .port_name = PORT_A,
	    .State = STOP
    };
	
	HDCMotor_vInit(&Door_Motor);
 27c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <HDCMotor_vInit>
    
    // Check if the system is being used for the first time
    u8 local_u8IsFirstUse = Function_vCheckFirstUse();
 280:	0e 94 0b 01 	call	0x216	; 0x216 <Function_vCheckFirstUse>

    // Send the status to the Master MCU
    MUSART_vTransmit(local_u8IsFirstUse ? 0xFF : 0x00);
 284:	88 23       	and	r24, r24
 286:	11 f0       	breq	.+4      	; 0x28c <main+0x62>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	01 c0       	rjmp	.+2      	; 0x28e <main+0x64>
 28c:	81 2f       	mov	r24, r17
 28e:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>

    while (1) {

        // Wait for Master MCU command
        while (!MUSART_u8UnreadDate());
 292:	0e 94 01 05 	call	0xa02	; 0xa02 <MUSART_u8UnreadDate>
 296:	88 23       	and	r24, r24
 298:	e1 f3       	breq	.-8      	; 0x292 <main+0x68>
        local_u8SystemStatus = MUSART_u8Receive();
 29a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MUSART_u8Receive>
        
        switch (local_u8SystemStatus) {
 29e:	85 30       	cpi	r24, 0x05	; 5
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <main+0x7a>
 2a2:	44 c0       	rjmp	.+136    	; 0x32c <main+0x102>
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	01 f1       	breq	.+64     	; 0x2e8 <main+0xbe>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	09 f0       	breq	.+2      	; 0x2ae <main+0x84>
 2ac:	79 c0       	rjmp	.+242    	; 0x3a0 <main+0x176>
            case CREATE_PASSWORD:
                Function_vReceivePassword(local_u8EnteredPassword);
 2ae:	ce 01       	movw	r24, r28
 2b0:	07 96       	adiw	r24, 0x07	; 7
 2b2:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>
                Function_vReceivePassword(local_u8ReEnteredPassword);
 2b6:	ce 01       	movw	r24, r28
 2b8:	0d 96       	adiw	r24, 0x0d	; 13
 2ba:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>

                // Compare the entered passwords
                if (Function_u8ComparePasswords(local_u8EnteredPassword, local_u8ReEnteredPassword)) {
 2be:	be 01       	movw	r22, r28
 2c0:	63 5f       	subi	r22, 0xF3	; 243
 2c2:	7f 4f       	sbci	r23, 0xFF	; 255
 2c4:	ce 01       	movw	r24, r28
 2c6:	07 96       	adiw	r24, 0x07	; 7
 2c8:	0e 94 58 00 	call	0xb0	; 0xb0 <Function_u8ComparePasswords>
 2cc:	88 23       	and	r24, r24
 2ce:	41 f0       	breq	.+16     	; 0x2e0 <main+0xb6>
                    // Store the password in EEPROM
                    Function_vStorePasswordInEEPROM(local_u8EnteredPassword);
 2d0:	ce 01       	movw	r24, r28
 2d2:	07 96       	adiw	r24, 0x07	; 7
 2d4:	0e 94 6e 00 	call	0xdc	; 0xdc <Function_vStorePasswordInEEPROM>
                    MUSART_vTransmit(SUCCEEDED);  // Notify success
 2d8:	86 e0       	ldi	r24, 0x06	; 6
 2da:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
 2de:	63 c0       	rjmp	.+198    	; 0x3a6 <main+0x17c>
                } else {
                    MUSART_vTransmit(ERROR);  // Notify error in password creation
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
 2e6:	5f c0       	rjmp	.+190    	; 0x3a6 <main+0x17c>
                }
                break;

            case OPEN_DOOR:
                Function_vReceivePassword(local_u8EnteredPassword);
 2e8:	ce 01       	movw	r24, r28
 2ea:	07 96       	adiw	r24, 0x07	; 7
 2ec:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>

                // Verify the entered password
                Function_vReadPasswordFromEEPROM(local_u8StoredPassword);
 2f0:	ce 01       	movw	r24, r28
 2f2:	01 96       	adiw	r24, 0x01	; 1
 2f4:	0e 94 94 00 	call	0x128	; 0x128 <Function_vReadPasswordFromEEPROM>
                if (Function_u8ComparePasswords(local_u8StoredPassword, local_u8EnteredPassword)) {
 2f8:	be 01       	movw	r22, r28
 2fa:	69 5f       	subi	r22, 0xF9	; 249
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255
 2fe:	ce 01       	movw	r24, r28
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	0e 94 58 00 	call	0xb0	; 0xb0 <Function_u8ComparePasswords>
 306:	88 23       	and	r24, r24
 308:	41 f0       	breq	.+16     	; 0x31a <main+0xf0>
                    MUSART_vTransmit(SUCCEEDED);  // Notify success
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
                    Function_vOpenDoor(&Door_Motor);  // Open the door
 310:	ce 01       	movw	r24, r28
 312:	43 96       	adiw	r24, 0x13	; 19
 314:	0e 94 d5 00 	call	0x1aa	; 0x1aa <Function_vOpenDoor>
 318:	46 c0       	rjmp	.+140    	; 0x3a6 <main+0x17c>
                } else {
                    MUSART_vTransmit(ERROR);  // Notify error
 31a:	87 e0       	ldi	r24, 0x07	; 7
 31c:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
					global_u8FailureCounter ++;
 320:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 32a:	3d c0       	rjmp	.+122    	; 0x3a6 <main+0x17c>
                }
                break;

            case CHANGE_PASSWORD:
                Function_vReceivePassword(local_u8EnteredPassword);
 32c:	ce 01       	movw	r24, r28
 32e:	07 96       	adiw	r24, 0x07	; 7
 330:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>

                // Verify the current password
                Function_vReadPasswordFromEEPROM(local_u8StoredPassword);
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	0e 94 94 00 	call	0x128	; 0x128 <Function_vReadPasswordFromEEPROM>
                if (Function_u8ComparePasswords(local_u8StoredPassword, local_u8EnteredPassword)) {
 33c:	be 01       	movw	r22, r28
 33e:	69 5f       	subi	r22, 0xF9	; 249
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	ce 01       	movw	r24, r28
 344:	01 96       	adiw	r24, 0x01	; 1
 346:	0e 94 58 00 	call	0xb0	; 0xb0 <Function_u8ComparePasswords>
 34a:	88 23       	and	r24, r24
 34c:	01 f1       	breq	.+64     	; 0x38e <main+0x164>
                    MUSART_vTransmit(SUCCEEDED);  // Notify success
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
                    Function_vReceivePassword(local_u8EnteredPassword);
 354:	ce 01       	movw	r24, r28
 356:	07 96       	adiw	r24, 0x07	; 7
 358:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>
                    Function_vReceivePassword(local_u8ReEnteredPassword);
 35c:	ce 01       	movw	r24, r28
 35e:	0d 96       	adiw	r24, 0x0d	; 13
 360:	0e 94 4e 00 	call	0x9c	; 0x9c <Function_vReceivePassword>

                    // Compare the new passwords
                    if (Function_u8ComparePasswords(local_u8EnteredPassword, local_u8ReEnteredPassword)) {
 364:	be 01       	movw	r22, r28
 366:	63 5f       	subi	r22, 0xF3	; 243
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	ce 01       	movw	r24, r28
 36c:	07 96       	adiw	r24, 0x07	; 7
 36e:	0e 94 58 00 	call	0xb0	; 0xb0 <Function_u8ComparePasswords>
 372:	88 23       	and	r24, r24
 374:	41 f0       	breq	.+16     	; 0x386 <main+0x15c>
                        // Store the new password in EEPROM
                        Function_vStorePasswordInEEPROM(local_u8EnteredPassword);
 376:	ce 01       	movw	r24, r28
 378:	07 96       	adiw	r24, 0x07	; 7
 37a:	0e 94 6e 00 	call	0xdc	; 0xdc <Function_vStorePasswordInEEPROM>
                        MUSART_vTransmit(SUCCEEDED);  // Notify success
 37e:	86 e0       	ldi	r24, 0x06	; 6
 380:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
 384:	10 c0       	rjmp	.+32     	; 0x3a6 <main+0x17c>
                    } else {
                        MUSART_vTransmit(ERROR);  // Notify error in password change
 386:	87 e0       	ldi	r24, 0x07	; 7
 388:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
 38c:	0c c0       	rjmp	.+24     	; 0x3a6 <main+0x17c>
                    }
                } else {
                    MUSART_vTransmit(ERROR);  // Notify error
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
					global_u8FailureCounter ++;
 394:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 398:	8f 5f       	subi	r24, 0xFF	; 255
 39a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 39e:	03 c0       	rjmp	.+6      	; 0x3a6 <main+0x17c>
                }
                break;

            default:
                // Handle unexpected commands
                MUSART_vTransmit(ERROR);
 3a0:	87 e0       	ldi	r24, 0x07	; 7
 3a2:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
                break;
        }
		
		if (global_u8FailureCounter==3)
 3a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <main+0x188>
		{
			Function_vSystemFreeze();
 3ae:	0e 94 b6 00 	call	0x16c	; 0x16c <Function_vSystemFreeze>
		}
		
        // After each operation, update the status to indicate whether the system is first-use or not
        local_u8IsFirstUse = Function_vCheckFirstUse();
 3b2:	0e 94 0b 01 	call	0x216	; 0x216 <Function_vCheckFirstUse>
        MUSART_vTransmit(local_u8IsFirstUse ? 0xFF : 0x00);
 3b6:	88 23       	and	r24, r24
 3b8:	11 f0       	breq	.+4      	; 0x3be <main+0x194>
 3ba:	8f ef       	ldi	r24, 0xFF	; 255
 3bc:	01 c0       	rjmp	.+2      	; 0x3c0 <main+0x196>
 3be:	81 2f       	mov	r24, r17
 3c0:	0e 94 ed 04 	call	0x9da	; 0x9da <MUSART_vTransmit>
    }
 3c4:	66 cf       	rjmp	.-308    	; 0x292 <main+0x68>

000003c6 <HBuzzer_vInit>:

#include "Buzzer_Interface.h"

void HBuzzer_vInit(void){

	MDIO_vSetPinDirection(BUZZER_PORT, BUZZER_PIN, OUTPUT);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	64 e0       	ldi	r22, 0x04	; 4
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>
	MDIO_vSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
 3da:	08 95       	ret

000003dc <HBuzzer_vOn>:

}

void HBuzzer_vOn(void){

	MDIO_vSetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	64 e0       	ldi	r22, 0x04	; 4
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
 3e6:	08 95       	ret

000003e8 <HBuzzer_vOFF>:

}

void HBuzzer_vOFF(void) {

	MDIO_vSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	64 e0       	ldi	r22, 0x04	; 4
 3ec:	80 e0       	ldi	r24, 0x00	; 0
 3ee:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
 3f2:	08 95       	ret

000003f4 <HDCMotor_vInit>:
/**
 * @brief Initialize the DC motor.
 *
 * @param Motor: Structure containing DC motor configuration.
 */
void HDCMotor_vInit(DCMotor *Motor) {
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
    // Set direction of motor control pins
    MDIO_vSetPinDirection(Motor->port_name, Motor->input_pin1, OUTPUT);
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	69 81       	ldd	r22, Y+1	; 0x01
 3fe:	88 81       	ld	r24, Y
 400:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(Motor->port_name, Motor->input_pin2, OUTPUT);
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	6a 81       	ldd	r22, Y+2	; 0x02
 408:	88 81       	ld	r24, Y
 40a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>

    // Set initial values to motor control pins
    MDIO_vSetPinValue(Motor->port_name, Motor->input_pin1, LOW);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	69 81       	ldd	r22, Y+1	; 0x01
 412:	88 81       	ld	r24, Y
 414:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
    MDIO_vSetPinValue(Motor->port_name, Motor->input_pin2, LOW);
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	6a 81       	ldd	r22, Y+2	; 0x02
 41c:	88 81       	ld	r24, Y
 41e:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>

    // Optionally initialize PWM pin for motor speed control
#if TIMER_PWM == ENABLED
    MDIO_vSetPinDirection(PORT_B, Motor->pwm_timer0, OUTPUT);
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	6d 81       	ldd	r22, Y+5	; 0x05
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 5e 02 	call	0x4bc	; 0x4bc <MDIO_vSetPinDirection>
    MDIO_vSetPinValue(PORT_B, Motor->pwm_timer0, LOW);
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	6d 81       	ldd	r22, Y+5	; 0x05
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
#endif

    // Initialize motor speed and state
    Motor->Speed = 0;
 436:	1c 82       	std	Y+4, r1	; 0x04
    Motor->State = STOP;
 438:	1b 82       	std	Y+3, r1	; 0x03
}
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <HDCMotor_RotateDirection_Speed>:
/**
 * @brief Set the direction and speed of the DC motor.
 *
 * @param Motor: Structure containing DC motor configuration.
 */
void HDCMotor_RotateDirection_Speed(DCMotor *Motor) {
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
    // Control motor direction based on the motor state
    switch (Motor->State) {
 446:	8b 81       	ldd	r24, Y+3	; 0x03
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	79 f0       	breq	.+30     	; 0x46a <HDCMotor_RotateDirection_Speed+0x2a>
 44c:	18 f0       	brcs	.+6      	; 0x454 <HDCMotor_RotateDirection_Speed+0x14>
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	b9 f0       	breq	.+46     	; 0x480 <HDCMotor_RotateDirection_Speed+0x40>
 452:	20 c0       	rjmp	.+64     	; 0x494 <HDCMotor_RotateDirection_Speed+0x54>
        case STOP:
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin1, LOW);
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	69 81       	ldd	r22, Y+1	; 0x01
 458:	88 81       	ld	r24, Y
 45a:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin2, LOW);
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	6a 81       	ldd	r22, Y+2	; 0x02
 462:	88 81       	ld	r24, Y
 464:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
            break;
 468:	15 c0       	rjmp	.+42     	; 0x494 <HDCMotor_RotateDirection_Speed+0x54>
        case CLOCKWISE:
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin1, HIGH);
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	69 81       	ldd	r22, Y+1	; 0x01
 46e:	88 81       	ld	r24, Y
 470:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin2, LOW);
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	6a 81       	ldd	r22, Y+2	; 0x02
 478:	88 81       	ld	r24, Y
 47a:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
            break;
 47e:	0a c0       	rjmp	.+20     	; 0x494 <HDCMotor_RotateDirection_Speed+0x54>
        case ANTI_CLOCKWISE:
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin1, LOW);
 480:	40 e0       	ldi	r20, 0x00	; 0
 482:	69 81       	ldd	r22, Y+1	; 0x01
 484:	88 81       	ld	r24, Y
 486:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
            MDIO_vSetPinValue(Motor->port_name, Motor->input_pin2, HIGH);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	6a 81       	ldd	r22, Y+2	; 0x02
 48e:	88 81       	ld	r24, Y
 490:	0e 94 ce 02 	call	0x59c	; 0x59c <MDIO_vSetPinValue>
    }

    // Optionally control motor speed using PWM
#if TIMER_PWM == ENABLED
    // Calculate PWM value based on motor speed percentage
    u8 local_u8SpeedValue = (Motor->Speed * 255) / 100;
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	2f ef       	ldi	r18, 0xFF	; 255
 498:	82 9f       	mul	r24, r18
 49a:	c0 01       	movw	r24, r0
 49c:	11 24       	eor	r1, r1
 49e:	64 e6       	ldi	r22, 0x64	; 100
 4a0:	70 e0       	ldi	r23, 0x00	; 0
 4a2:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divmodhi4>
 4a6:	c6 2f       	mov	r28, r22

    // Initialize and set PWM value using Timer0
    MTIMER0_vInit();
 4a8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <MTIMER0_vInit>
    MTIMER0_vClearCTCRegister();
 4ac:	0e 94 96 03 	call	0x72c	; 0x72c <MTIMER0_vClearCTCRegister>
    MTIMER0_vSetCTCRegister(local_u8SpeedValue);
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 94 03 	call	0x728	; 0x728 <MTIMER0_vSetCTCRegister>
#endif
}
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <MDIO_vSetPinDirection>:
void MDIO_vSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir){
	switch (A_u8PortNumber){
	case PORT_A: DDRA = A_u8Dir; break;
	case PORT_B: DDRB = A_u8Dir; break;
	case PORT_C: DDRC = A_u8Dir; break;
	case PORT_D: DDRD = A_u8Dir; break;
 4bc:	41 11       	cpse	r20, r1
 4be:	38 c0       	rjmp	.+112    	; 0x530 <MDIO_vSetPinDirection+0x74>
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	91 f0       	breq	.+36     	; 0x4e8 <MDIO_vSetPinDirection+0x2c>
 4c4:	28 f0       	brcs	.+10     	; 0x4d0 <MDIO_vSetPinDirection+0x14>
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	d9 f0       	breq	.+54     	; 0x500 <MDIO_vSetPinDirection+0x44>
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	29 f1       	breq	.+74     	; 0x518 <MDIO_vSetPinDirection+0x5c>
 4ce:	08 95       	ret
 4d0:	2a b3       	in	r18, 0x1a	; 26
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <MDIO_vSetPinDirection+0x20>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <MDIO_vSetPinDirection+0x1c>
 4e0:	80 95       	com	r24
 4e2:	82 23       	and	r24, r18
 4e4:	8a bb       	out	0x1a, r24	; 26
 4e6:	08 95       	ret
 4e8:	27 b3       	in	r18, 0x17	; 23
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <MDIO_vSetPinDirection+0x38>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	6a 95       	dec	r22
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <MDIO_vSetPinDirection+0x34>
 4f8:	80 95       	com	r24
 4fa:	82 23       	and	r24, r18
 4fc:	87 bb       	out	0x17, r24	; 23
 4fe:	08 95       	ret
 500:	24 b3       	in	r18, 0x14	; 20
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <MDIO_vSetPinDirection+0x50>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <MDIO_vSetPinDirection+0x4c>
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	84 bb       	out	0x14, r24	; 20
 516:	08 95       	ret
 518:	21 b3       	in	r18, 0x11	; 17
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <MDIO_vSetPinDirection+0x68>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <MDIO_vSetPinDirection+0x64>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	81 bb       	out	0x11, r24	; 17
 52e:	08 95       	ret
 530:	41 30       	cpi	r20, 0x01	; 1
 532:	99 f5       	brne	.+102    	; 0x59a <MDIO_vSetPinDirection+0xde>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	89 f0       	breq	.+34     	; 0x55a <MDIO_vSetPinDirection+0x9e>
 538:	28 f0       	brcs	.+10     	; 0x544 <MDIO_vSetPinDirection+0x88>
 53a:	82 30       	cpi	r24, 0x02	; 2
 53c:	c9 f0       	breq	.+50     	; 0x570 <MDIO_vSetPinDirection+0xb4>
 53e:	83 30       	cpi	r24, 0x03	; 3
 540:	11 f1       	breq	.+68     	; 0x586 <MDIO_vSetPinDirection+0xca>
 542:	08 95       	ret
 544:	2a b3       	in	r18, 0x1a	; 26
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <MDIO_vSetPinDirection+0x94>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <MDIO_vSetPinDirection+0x90>
 554:	82 2b       	or	r24, r18
 556:	8a bb       	out	0x1a, r24	; 26
 558:	08 95       	ret
 55a:	27 b3       	in	r18, 0x17	; 23
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <MDIO_vSetPinDirection+0xaa>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <MDIO_vSetPinDirection+0xa6>
 56a:	82 2b       	or	r24, r18
 56c:	87 bb       	out	0x17, r24	; 23
 56e:	08 95       	ret
 570:	24 b3       	in	r18, 0x14	; 20
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <MDIO_vSetPinDirection+0xc0>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <MDIO_vSetPinDirection+0xbc>
 580:	82 2b       	or	r24, r18
 582:	84 bb       	out	0x14, r24	; 20
 584:	08 95       	ret
 586:	21 b3       	in	r18, 0x11	; 17
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 c0       	rjmp	.+4      	; 0x592 <MDIO_vSetPinDirection+0xd6>
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	6a 95       	dec	r22
 594:	e2 f7       	brpl	.-8      	; 0x58e <MDIO_vSetPinDirection+0xd2>
 596:	82 2b       	or	r24, r18
 598:	81 bb       	out	0x11, r24	; 17
 59a:	08 95       	ret

0000059c <MDIO_vSetPinValue>:
	}
}

void MDIO_vSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Value)
{
	if(A_u8Value == HIGH)
 59c:	41 30       	cpi	r20, 0x01	; 1
 59e:	a1 f5       	brne	.+104    	; 0x608 <MDIO_vSetPinValue+0x6c>
	{
		switch (A_u8PortNumber)
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	89 f0       	breq	.+34     	; 0x5c6 <MDIO_vSetPinValue+0x2a>
 5a4:	28 f0       	brcs	.+10     	; 0x5b0 <MDIO_vSetPinValue+0x14>
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	c9 f0       	breq	.+50     	; 0x5dc <MDIO_vSetPinValue+0x40>
 5aa:	83 30       	cpi	r24, 0x03	; 3
 5ac:	11 f1       	breq	.+68     	; 0x5f2 <MDIO_vSetPinValue+0x56>
 5ae:	08 95       	ret
		{
		case PORT_A: SET_BIT(PORTA, A_u8PinNumber); break;
 5b0:	2b b3       	in	r18, 0x1b	; 27
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <MDIO_vSetPinValue+0x20>
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <MDIO_vSetPinValue+0x1c>
 5c0:	82 2b       	or	r24, r18
 5c2:	8b bb       	out	0x1b, r24	; 27
 5c4:	08 95       	ret
		case PORT_B: SET_BIT(PORTB, A_u8PinNumber); break;
 5c6:	28 b3       	in	r18, 0x18	; 24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <MDIO_vSetPinValue+0x36>
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	6a 95       	dec	r22
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <MDIO_vSetPinValue+0x32>
 5d6:	82 2b       	or	r24, r18
 5d8:	88 bb       	out	0x18, r24	; 24
 5da:	08 95       	ret
		case PORT_C: SET_BIT(PORTC, A_u8PinNumber); break;
 5dc:	25 b3       	in	r18, 0x15	; 21
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <MDIO_vSetPinValue+0x4c>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <MDIO_vSetPinValue+0x48>
 5ec:	82 2b       	or	r24, r18
 5ee:	85 bb       	out	0x15, r24	; 21
 5f0:	08 95       	ret
		case PORT_D: SET_BIT(PORTD, A_u8PinNumber); break;
 5f2:	22 b3       	in	r18, 0x12	; 18
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <MDIO_vSetPinValue+0x62>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <MDIO_vSetPinValue+0x5e>
 602:	82 2b       	or	r24, r18
 604:	82 bb       	out	0x12, r24	; 18
 606:	08 95       	ret
		}
	}else if (A_u8Value == LOW)
 608:	41 11       	cpse	r20, r1
 60a:	37 c0       	rjmp	.+110    	; 0x67a <MDIO_vSetPinValue+0xde>
	{
		switch (A_u8PortNumber)
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	91 f0       	breq	.+36     	; 0x634 <MDIO_vSetPinValue+0x98>
 610:	28 f0       	brcs	.+10     	; 0x61c <MDIO_vSetPinValue+0x80>
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	d9 f0       	breq	.+54     	; 0x64c <MDIO_vSetPinValue+0xb0>
 616:	83 30       	cpi	r24, 0x03	; 3
 618:	29 f1       	breq	.+74     	; 0x664 <MDIO_vSetPinValue+0xc8>
 61a:	08 95       	ret
		{
		case PORT_A: CLR_BIT(PORTA, A_u8PinNumber); break;
 61c:	2b b3       	in	r18, 0x1b	; 27
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <MDIO_vSetPinValue+0x8c>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <MDIO_vSetPinValue+0x88>
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	8b bb       	out	0x1b, r24	; 27
 632:	08 95       	ret
		case PORT_B: CLR_BIT(PORTB, A_u8PinNumber); break;
 634:	28 b3       	in	r18, 0x18	; 24
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <MDIO_vSetPinValue+0xa4>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <MDIO_vSetPinValue+0xa0>
 644:	80 95       	com	r24
 646:	82 23       	and	r24, r18
 648:	88 bb       	out	0x18, r24	; 24
 64a:	08 95       	ret
		case PORT_C: CLR_BIT(PORTC, A_u8PinNumber); break;
 64c:	25 b3       	in	r18, 0x15	; 21
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <MDIO_vSetPinValue+0xbc>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <MDIO_vSetPinValue+0xb8>
 65c:	80 95       	com	r24
 65e:	82 23       	and	r24, r18
 660:	85 bb       	out	0x15, r24	; 21
 662:	08 95       	ret
		case PORT_D: CLR_BIT(PORTD, A_u8PinNumber); break;
 664:	22 b3       	in	r18, 0x12	; 18
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <MDIO_vSetPinValue+0xd4>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <MDIO_vSetPinValue+0xd0>
 674:	80 95       	com	r24
 676:	82 23       	and	r24, r18
 678:	82 bb       	out	0x12, r24	; 18
 67a:	08 95       	ret

0000067c <MEEPROM_vWriteByte>:
 * @param ptr_to_fun: Pointer to the callback function.
 */

void MEEPROM_vSetCallBack(void (*ptr_to_fun)(void)) {
	if (ptr_to_fun != NULL) {
		EEPROM_Call_Back = ptr_to_fun;
 67c:	e1 99       	sbic	0x1c, 1	; 28
 67e:	fe cf       	rjmp	.-4      	; 0x67c <MEEPROM_vWriteByte>
 680:	8e bb       	out	0x1e, r24	; 30
 682:	6d bb       	out	0x1d, r22	; 29
 684:	8c b3       	in	r24, 0x1c	; 28
 686:	84 60       	ori	r24, 0x04	; 4
 688:	8c bb       	out	0x1c, r24	; 28
 68a:	8c b3       	in	r24, 0x1c	; 28
 68c:	82 60       	ori	r24, 0x02	; 2
 68e:	8c bb       	out	0x1c, r24	; 28
 690:	08 95       	ret

00000692 <MEEPROM_u8ReadByte>:
 692:	e1 99       	sbic	0x1c, 1	; 28
 694:	fe cf       	rjmp	.-4      	; 0x692 <MEEPROM_u8ReadByte>
 696:	8e bb       	out	0x1e, r24	; 30
 698:	8c b3       	in	r24, 0x1c	; 28
 69a:	81 60       	ori	r24, 0x01	; 1
 69c:	8c bb       	out	0x1c, r24	; 28
 69e:	8d b3       	in	r24, 0x1d	; 29
 6a0:	08 95       	ret

000006a2 <__vector_17>:
	}
}

void __vector_17(void) {
 6a2:	1f 92       	push	r1
 6a4:	0f 92       	push	r0
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	0f 92       	push	r0
 6aa:	11 24       	eor	r1, r1
 6ac:	2f 93       	push	r18
 6ae:	3f 93       	push	r19
 6b0:	4f 93       	push	r20
 6b2:	5f 93       	push	r21
 6b4:	6f 93       	push	r22
 6b6:	7f 93       	push	r23
 6b8:	8f 93       	push	r24
 6ba:	9f 93       	push	r25
 6bc:	af 93       	push	r26
 6be:	bf 93       	push	r27
 6c0:	ef 93       	push	r30
 6c2:	ff 93       	push	r31
	if (EEPROM_Call_Back != NULL)
 6c4:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <EEPROM_Call_Back>
 6c8:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <EEPROM_Call_Back+0x1>
 6cc:	30 97       	sbiw	r30, 0x00	; 0
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <__vector_17+0x30>
		EEPROM_Call_Back();
 6d0:	09 95       	icall
}
 6d2:	ff 91       	pop	r31
 6d4:	ef 91       	pop	r30
 6d6:	bf 91       	pop	r27
 6d8:	af 91       	pop	r26
 6da:	9f 91       	pop	r25
 6dc:	8f 91       	pop	r24
 6de:	7f 91       	pop	r23
 6e0:	6f 91       	pop	r22
 6e2:	5f 91       	pop	r21
 6e4:	4f 91       	pop	r20
 6e6:	3f 91       	pop	r19
 6e8:	2f 91       	pop	r18
 6ea:	0f 90       	pop	r0
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	0f 90       	pop	r0
 6f0:	1f 90       	pop	r1
 6f2:	18 95       	reti

000006f4 <MGIE_vEnableInterrupts>:
// 0 disable


void MGIE_vEnableInterrupts(void)
{
	SET_BIT(SREG, I);
 6f4:	8f b7       	in	r24, 0x3f	; 63
 6f6:	80 68       	ori	r24, 0x80	; 128
 6f8:	8f bf       	out	0x3f, r24	; 63
 6fa:	08 95       	ret

000006fc <MTIMER0_vInit>:
	}
}

void MTIMER0_vSetOVFCallBack(void (*CallBack) (void)){
	if(CallBack != NULL){
		TIMER0_OVF_Call_Back = CallBack;
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	80 64       	ori	r24, 0x40	; 64
 700:	83 bf       	out	0x33, r24	; 51
 702:	83 b7       	in	r24, 0x33	; 51
 704:	88 60       	ori	r24, 0x08	; 8
 706:	83 bf       	out	0x33, r24	; 51
 708:	83 b7       	in	r24, 0x33	; 51
 70a:	8f 7e       	andi	r24, 0xEF	; 239
 70c:	83 bf       	out	0x33, r24	; 51
 70e:	83 b7       	in	r24, 0x33	; 51
 710:	80 62       	ori	r24, 0x20	; 32
 712:	83 bf       	out	0x33, r24	; 51
 714:	83 b7       	in	r24, 0x33	; 51
 716:	8e 7f       	andi	r24, 0xFE	; 254
 718:	83 bf       	out	0x33, r24	; 51
 71a:	83 b7       	in	r24, 0x33	; 51
 71c:	82 60       	ori	r24, 0x02	; 2
 71e:	83 bf       	out	0x33, r24	; 51
 720:	83 b7       	in	r24, 0x33	; 51
 722:	8b 7f       	andi	r24, 0xFB	; 251
 724:	83 bf       	out	0x33, r24	; 51
 726:	08 95       	ret

00000728 <MTIMER0_vSetCTCRegister>:
 728:	8c bf       	out	0x3c, r24	; 60
 72a:	08 95       	ret

0000072c <MTIMER0_vClearCTCRegister>:
 72c:	1c be       	out	0x3c, r1	; 60
 72e:	08 95       	ret

00000730 <MTIMER0_vClearOVFFlag>:
 730:	88 b7       	in	r24, 0x38	; 56
 732:	81 60       	ori	r24, 0x01	; 1
 734:	88 bf       	out	0x38, r24	; 56
 736:	08 95       	ret

00000738 <MTIMER0_vClearCTCFlag>:
 738:	88 b7       	in	r24, 0x38	; 56
 73a:	82 60       	ori	r24, 0x02	; 2
 73c:	88 bf       	out	0x38, r24	; 56
 73e:	08 95       	ret

00000740 <__vector_11>:
	}
}


void __vector_11(void){
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	3f 93       	push	r19
 74e:	4f 93       	push	r20
 750:	5f 93       	push	r21
 752:	6f 93       	push	r22
 754:	7f 93       	push	r23
 756:	8f 93       	push	r24
 758:	9f 93       	push	r25
 75a:	af 93       	push	r26
 75c:	bf 93       	push	r27
 75e:	ef 93       	push	r30
 760:	ff 93       	push	r31
	if(TIMER0_OVF_Call_Back != NULL)
 762:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <TIMER0_OVF_Call_Back>
 766:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <TIMER0_OVF_Call_Back+0x1>
 76a:	30 97       	sbiw	r30, 0x00	; 0
 76c:	09 f0       	breq	.+2      	; 0x770 <__vector_11+0x30>
		TIMER0_OVF_Call_Back();
 76e:	09 95       	icall
	MTIMER0_vClearOVFFlag();
 770:	0e 94 98 03 	call	0x730	; 0x730 <MTIMER0_vClearOVFFlag>
}
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	bf 91       	pop	r27
 77a:	af 91       	pop	r26
 77c:	9f 91       	pop	r25
 77e:	8f 91       	pop	r24
 780:	7f 91       	pop	r23
 782:	6f 91       	pop	r22
 784:	5f 91       	pop	r21
 786:	4f 91       	pop	r20
 788:	3f 91       	pop	r19
 78a:	2f 91       	pop	r18
 78c:	0f 90       	pop	r0
 78e:	0f be       	out	0x3f, r0	; 63
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <__vector_10>:


void __vector_10(void){
 796:	1f 92       	push	r1
 798:	0f 92       	push	r0
 79a:	0f b6       	in	r0, 0x3f	; 63
 79c:	0f 92       	push	r0
 79e:	11 24       	eor	r1, r1
 7a0:	2f 93       	push	r18
 7a2:	3f 93       	push	r19
 7a4:	4f 93       	push	r20
 7a6:	5f 93       	push	r21
 7a8:	6f 93       	push	r22
 7aa:	7f 93       	push	r23
 7ac:	8f 93       	push	r24
 7ae:	9f 93       	push	r25
 7b0:	af 93       	push	r26
 7b2:	bf 93       	push	r27
 7b4:	ef 93       	push	r30
 7b6:	ff 93       	push	r31
	if(TIMER0_CTC_Call_Back !=NULL)
 7b8:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <TIMER0_CTC_Call_Back>
 7bc:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <TIMER0_CTC_Call_Back+0x1>
 7c0:	30 97       	sbiw	r30, 0x00	; 0
 7c2:	09 f0       	breq	.+2      	; 0x7c6 <__vector_10+0x30>
			TIMER0_CTC_Call_Back();
 7c4:	09 95       	icall
	MTIMER0_vClearCTCFlag();
 7c6:	0e 94 9c 03 	call	0x738	; 0x738 <MTIMER0_vClearCTCFlag>
}
 7ca:	ff 91       	pop	r31
 7cc:	ef 91       	pop	r30
 7ce:	bf 91       	pop	r27
 7d0:	af 91       	pop	r26
 7d2:	9f 91       	pop	r25
 7d4:	8f 91       	pop	r24
 7d6:	7f 91       	pop	r23
 7d8:	6f 91       	pop	r22
 7da:	5f 91       	pop	r21
 7dc:	4f 91       	pop	r20
 7de:	3f 91       	pop	r19
 7e0:	2f 91       	pop	r18
 7e2:	0f 90       	pop	r0
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	0f 90       	pop	r0
 7e8:	1f 90       	pop	r1
 7ea:	18 95       	reti

000007ec <MTIMER1_vInit>:
		TIMER1B_CTC_Call_Back = CallBack;
	}
}
void MTIMER1_vSetInputCaptureCallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		TIMER1_ICU_Call_Back = CallBack;
 7ec:	8f b5       	in	r24, 0x2f	; 47
 7ee:	8e 7f       	andi	r24, 0xFE	; 254
 7f0:	8f bd       	out	0x2f, r24	; 47
 7f2:	8f b5       	in	r24, 0x2f	; 47
 7f4:	8d 7f       	andi	r24, 0xFD	; 253
 7f6:	8f bd       	out	0x2f, r24	; 47
 7f8:	8e b5       	in	r24, 0x2e	; 46
 7fa:	88 60       	ori	r24, 0x08	; 8
 7fc:	8e bd       	out	0x2e, r24	; 46
 7fe:	8e b5       	in	r24, 0x2e	; 46
 800:	8f 7e       	andi	r24, 0xEF	; 239
 802:	8e bd       	out	0x2e, r24	; 46
 804:	8f b5       	in	r24, 0x2f	; 47
 806:	8f 7b       	andi	r24, 0xBF	; 191
 808:	8f bd       	out	0x2f, r24	; 47
 80a:	8f b5       	in	r24, 0x2f	; 47
 80c:	8f 77       	andi	r24, 0x7F	; 127
 80e:	8f bd       	out	0x2f, r24	; 47
 810:	8e b5       	in	r24, 0x2e	; 46
 812:	8e 7f       	andi	r24, 0xFE	; 254
 814:	8e bd       	out	0x2e, r24	; 46
 816:	8e b5       	in	r24, 0x2e	; 46
 818:	82 60       	ori	r24, 0x02	; 2
 81a:	8e bd       	out	0x2e, r24	; 46
 81c:	8e b5       	in	r24, 0x2e	; 46
 81e:	8b 7f       	andi	r24, 0xFB	; 251
 820:	8e bd       	out	0x2e, r24	; 46
 822:	08 95       	ret

00000824 <MTIMER1_vDisInit>:
 824:	1f bc       	out	0x2f, r1	; 47
 826:	1e bc       	out	0x2e, r1	; 46
 828:	08 95       	ret

0000082a <MTIMER1_vChannelASetCTCRegister>:
 82a:	9b bd       	out	0x2b, r25	; 43
 82c:	8a bd       	out	0x2a, r24	; 42
 82e:	08 95       	ret

00000830 <MTIMER1_vClearOVFFlag>:
 830:	88 b7       	in	r24, 0x38	; 56
 832:	84 60       	ori	r24, 0x04	; 4
 834:	88 bf       	out	0x38, r24	; 56
 836:	08 95       	ret

00000838 <MTIMER1_vChannelAEnableCTCINT>:
 838:	89 b7       	in	r24, 0x39	; 57
 83a:	80 61       	ori	r24, 0x10	; 16
 83c:	89 bf       	out	0x39, r24	; 57
 83e:	08 95       	ret

00000840 <MTIMER1_vChannelAClearCTCFlag>:
 840:	88 b7       	in	r24, 0x38	; 56
 842:	80 61       	ori	r24, 0x10	; 16
 844:	88 bf       	out	0x38, r24	; 56
 846:	08 95       	ret

00000848 <MTIMER1_vChannelBClearCTCFlag>:
 848:	88 b7       	in	r24, 0x38	; 56
 84a:	88 60       	ori	r24, 0x08	; 8
 84c:	88 bf       	out	0x38, r24	; 56
 84e:	08 95       	ret

00000850 <MTIMER1_vClearInputCaptureFlag>:
 850:	88 b7       	in	r24, 0x38	; 56
 852:	80 62       	ori	r24, 0x20	; 32
 854:	88 bf       	out	0x38, r24	; 56
 856:	08 95       	ret

00000858 <MTIMER1_vChannelASetCTCCallBack>:
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	21 f0       	breq	.+8      	; 0x864 <__stack+0x5>
 85c:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <TIMER1A_CTC_Call_Back+0x1>
 860:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <TIMER1A_CTC_Call_Back>
 864:	08 95       	ret

00000866 <__vector_6>:
	}
}

void __vector_6(void) {
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
	if (TIMER1_ICU_Call_Back != NULL)
 888:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <TIMER1_ICU_Call_Back>
 88c:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <TIMER1_ICU_Call_Back+0x1>
 890:	30 97       	sbiw	r30, 0x00	; 0
 892:	09 f0       	breq	.+2      	; 0x896 <__vector_6+0x30>
		TIMER1_ICU_Call_Back();
 894:	09 95       	icall
	MTIMER1_vClearInputCaptureFlag();
 896:	0e 94 28 04 	call	0x850	; 0x850 <MTIMER1_vClearInputCaptureFlag>
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0f be       	out	0x3f, r0	; 63
 8b6:	0f 90       	pop	r0
 8b8:	1f 90       	pop	r1
 8ba:	18 95       	reti

000008bc <__vector_7>:

void __vector_7(void) {
 8bc:	1f 92       	push	r1
 8be:	0f 92       	push	r0
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	0f 92       	push	r0
 8c4:	11 24       	eor	r1, r1
 8c6:	2f 93       	push	r18
 8c8:	3f 93       	push	r19
 8ca:	4f 93       	push	r20
 8cc:	5f 93       	push	r21
 8ce:	6f 93       	push	r22
 8d0:	7f 93       	push	r23
 8d2:	8f 93       	push	r24
 8d4:	9f 93       	push	r25
 8d6:	af 93       	push	r26
 8d8:	bf 93       	push	r27
 8da:	ef 93       	push	r30
 8dc:	ff 93       	push	r31
	if (TIMER1A_CTC_Call_Back != NULL)
 8de:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <TIMER1A_CTC_Call_Back>
 8e2:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <TIMER1A_CTC_Call_Back+0x1>
 8e6:	30 97       	sbiw	r30, 0x00	; 0
 8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_7+0x30>
		TIMER1A_CTC_Call_Back();
 8ea:	09 95       	icall
	MTIMER1_vChannelAClearCTCFlag();
 8ec:	0e 94 20 04 	call	0x840	; 0x840 <MTIMER1_vChannelAClearCTCFlag>
}
 8f0:	ff 91       	pop	r31
 8f2:	ef 91       	pop	r30
 8f4:	bf 91       	pop	r27
 8f6:	af 91       	pop	r26
 8f8:	9f 91       	pop	r25
 8fa:	8f 91       	pop	r24
 8fc:	7f 91       	pop	r23
 8fe:	6f 91       	pop	r22
 900:	5f 91       	pop	r21
 902:	4f 91       	pop	r20
 904:	3f 91       	pop	r19
 906:	2f 91       	pop	r18
 908:	0f 90       	pop	r0
 90a:	0f be       	out	0x3f, r0	; 63
 90c:	0f 90       	pop	r0
 90e:	1f 90       	pop	r1
 910:	18 95       	reti

00000912 <__vector_8>:

void __vector_8(void) {
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	2f 93       	push	r18
 91e:	3f 93       	push	r19
 920:	4f 93       	push	r20
 922:	5f 93       	push	r21
 924:	6f 93       	push	r22
 926:	7f 93       	push	r23
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
 92c:	af 93       	push	r26
 92e:	bf 93       	push	r27
 930:	ef 93       	push	r30
 932:	ff 93       	push	r31
	if (TIMER1B_CTC_Call_Back != NULL)
 934:	e0 91 6b 00 	lds	r30, 0x006B	; 0x80006b <TIMER1B_CTC_Call_Back>
 938:	f0 91 6c 00 	lds	r31, 0x006C	; 0x80006c <TIMER1B_CTC_Call_Back+0x1>
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	09 f0       	breq	.+2      	; 0x942 <__vector_8+0x30>
		TIMER1B_CTC_Call_Back();
 940:	09 95       	icall
	MTIMER1_vChannelBClearCTCFlag();
 942:	0e 94 24 04 	call	0x848	; 0x848 <MTIMER1_vChannelBClearCTCFlag>
}
 946:	ff 91       	pop	r31
 948:	ef 91       	pop	r30
 94a:	bf 91       	pop	r27
 94c:	af 91       	pop	r26
 94e:	9f 91       	pop	r25
 950:	8f 91       	pop	r24
 952:	7f 91       	pop	r23
 954:	6f 91       	pop	r22
 956:	5f 91       	pop	r21
 958:	4f 91       	pop	r20
 95a:	3f 91       	pop	r19
 95c:	2f 91       	pop	r18
 95e:	0f 90       	pop	r0
 960:	0f be       	out	0x3f, r0	; 63
 962:	0f 90       	pop	r0
 964:	1f 90       	pop	r1
 966:	18 95       	reti

00000968 <__vector_9>:

void __vector_9(void) {
 968:	1f 92       	push	r1
 96a:	0f 92       	push	r0
 96c:	0f b6       	in	r0, 0x3f	; 63
 96e:	0f 92       	push	r0
 970:	11 24       	eor	r1, r1
 972:	2f 93       	push	r18
 974:	3f 93       	push	r19
 976:	4f 93       	push	r20
 978:	5f 93       	push	r21
 97a:	6f 93       	push	r22
 97c:	7f 93       	push	r23
 97e:	8f 93       	push	r24
 980:	9f 93       	push	r25
 982:	af 93       	push	r26
 984:	bf 93       	push	r27
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
	if (TIMER1_OVF_Call_Back != NULL)
 98a:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <TIMER1_OVF_Call_Back>
 98e:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <TIMER1_OVF_Call_Back+0x1>
 992:	30 97       	sbiw	r30, 0x00	; 0
 994:	09 f0       	breq	.+2      	; 0x998 <__vector_9+0x30>
		TIMER1_OVF_Call_Back();
 996:	09 95       	icall
	MTIMER1_vClearOVFFlag();
 998:	0e 94 18 04 	call	0x830	; 0x830 <MTIMER1_vClearOVFFlag>
}
 99c:	ff 91       	pop	r31
 99e:	ef 91       	pop	r30
 9a0:	bf 91       	pop	r27
 9a2:	af 91       	pop	r26
 9a4:	9f 91       	pop	r25
 9a6:	8f 91       	pop	r24
 9a8:	7f 91       	pop	r23
 9aa:	6f 91       	pop	r22
 9ac:	5f 91       	pop	r21
 9ae:	4f 91       	pop	r20
 9b0:	3f 91       	pop	r19
 9b2:	2f 91       	pop	r18
 9b4:	0f 90       	pop	r0
 9b6:	0f be       	out	0x3f, r0	; 63
 9b8:	0f 90       	pop	r0
 9ba:	1f 90       	pop	r1
 9bc:	18 95       	reti

000009be <MUSART_vInit>:
		USART_TXC_Call_Back = CallBack;
	}
}
void MUSART_vSetUDRECallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		USART_UDRE_Call_Back = CallBack;
 9be:	89 b9       	out	0x09, r24	; 9
 9c0:	90 bd       	out	0x20, r25	; 32
 9c2:	8a b1       	in	r24, 0x0a	; 10
 9c4:	8b 7f       	andi	r24, 0xFB	; 251
 9c6:	8a b9       	out	0x0a, r24	; 10
 9c8:	86 e8       	ldi	r24, 0x86	; 134
 9ca:	80 bd       	out	0x20, r24	; 32
 9cc:	8a b1       	in	r24, 0x0a	; 10
 9ce:	80 61       	ori	r24, 0x10	; 16
 9d0:	8a b9       	out	0x0a, r24	; 10
 9d2:	8a b1       	in	r24, 0x0a	; 10
 9d4:	88 60       	ori	r24, 0x08	; 8
 9d6:	8a b9       	out	0x0a, r24	; 10
 9d8:	08 95       	ret

000009da <MUSART_vTransmit>:
 9da:	5d 9b       	sbis	0x0b, 5	; 11
 9dc:	fe cf       	rjmp	.-4      	; 0x9da <MUSART_vTransmit>
 9de:	8c b9       	out	0x0c, r24	; 12
 9e0:	08 95       	ret

000009e2 <MUSART_u8Receive>:
 9e2:	5f 9b       	sbis	0x0b, 7	; 11
 9e4:	fe cf       	rjmp	.-4      	; 0x9e2 <MUSART_u8Receive>
 9e6:	5c 99       	sbic	0x0b, 4	; 11
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <MUSART_u8Receive+0x14>
 9ea:	5b 99       	sbic	0x0b, 3	; 11
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <MUSART_u8Receive+0x18>
 9ee:	5a 99       	sbic	0x0b, 2	; 11
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <MUSART_u8Receive+0x1c>
 9f2:	8c b1       	in	r24, 0x0c	; 12
 9f4:	08 95       	ret
 9f6:	8f ef       	ldi	r24, 0xFF	; 255
 9f8:	08 95       	ret
 9fa:	8f ef       	ldi	r24, 0xFF	; 255
 9fc:	08 95       	ret
 9fe:	8f ef       	ldi	r24, 0xFF	; 255
 a00:	08 95       	ret

00000a02 <MUSART_u8UnreadDate>:
 a02:	8b b1       	in	r24, 0x0b	; 11
 a04:	88 1f       	adc	r24, r24
 a06:	88 27       	eor	r24, r24
 a08:	88 1f       	adc	r24, r24
 a0a:	08 95       	ret

00000a0c <MUSART_vRecieveString>:
 a0c:	ef 92       	push	r14
 a0e:	ff 92       	push	r15
 a10:	0f 93       	push	r16
 a12:	1f 93       	push	r17
 a14:	cf 93       	push	r28
 a16:	df 93       	push	r29
 a18:	7c 01       	movw	r14, r24
 a1a:	d6 2f       	mov	r29, r22
 a1c:	c0 e0       	ldi	r28, 0x00	; 0
 a1e:	08 c0       	rjmp	.+16     	; 0xa30 <MUSART_vRecieveString+0x24>
 a20:	87 01       	movw	r16, r14
 a22:	0c 0f       	add	r16, r28
 a24:	11 1d       	adc	r17, r1
 a26:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MUSART_u8Receive>
 a2a:	f8 01       	movw	r30, r16
 a2c:	80 83       	st	Z, r24
 a2e:	cf 5f       	subi	r28, 0xFF	; 255
 a30:	cd 17       	cp	r28, r29
 a32:	b0 f3       	brcs	.-20     	; 0xa20 <MUSART_vRecieveString+0x14>
 a34:	df 91       	pop	r29
 a36:	cf 91       	pop	r28
 a38:	1f 91       	pop	r17
 a3a:	0f 91       	pop	r16
 a3c:	ff 90       	pop	r15
 a3e:	ef 90       	pop	r14
 a40:	08 95       	ret

00000a42 <__vector_13>:
	}
}

void __vector_13(void) {
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
	if (USART_RXC_Call_Back != NULL)
 a64:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <USART_RXC_Call_Back>
 a68:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <USART_RXC_Call_Back+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_13+0x30>
		USART_RXC_Call_Back();
 a70:	09 95       	icall
}
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <__vector_14>:

void __vector_14(void) {
 a94:	1f 92       	push	r1
 a96:	0f 92       	push	r0
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	0f 92       	push	r0
 a9c:	11 24       	eor	r1, r1
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	4f 93       	push	r20
 aa4:	5f 93       	push	r21
 aa6:	6f 93       	push	r22
 aa8:	7f 93       	push	r23
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
	if (USART_UDRE_Call_Back != NULL)
 ab6:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <USART_UDRE_Call_Back>
 aba:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <USART_UDRE_Call_Back+0x1>
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__vector_14+0x30>
		USART_UDRE_Call_Back();
 ac2:	09 95       	icall
}
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <__vector_15>:

void __vector_15(void) {
 ae6:	1f 92       	push	r1
 ae8:	0f 92       	push	r0
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	0f 92       	push	r0
 aee:	11 24       	eor	r1, r1
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	ef 93       	push	r30
 b06:	ff 93       	push	r31
	if (USART_TXC_Call_Back != NULL)
 b08:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <USART_TXC_Call_Back>
 b0c:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <USART_TXC_Call_Back+0x1>
 b10:	30 97       	sbiw	r30, 0x00	; 0
 b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_15+0x30>
		USART_TXC_Call_Back();
 b14:	09 95       	icall
}
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <__divmodhi4>:
 b38:	97 fb       	bst	r25, 7
 b3a:	07 2e       	mov	r0, r23
 b3c:	16 f4       	brtc	.+4      	; 0xb42 <__divmodhi4+0xa>
 b3e:	00 94       	com	r0
 b40:	07 d0       	rcall	.+14     	; 0xb50 <__divmodhi4_neg1>
 b42:	77 fd       	sbrc	r23, 7
 b44:	09 d0       	rcall	.+18     	; 0xb58 <__divmodhi4_neg2>
 b46:	0e 94 b0 05 	call	0xb60	; 0xb60 <__udivmodhi4>
 b4a:	07 fc       	sbrc	r0, 7
 b4c:	05 d0       	rcall	.+10     	; 0xb58 <__divmodhi4_neg2>
 b4e:	3e f4       	brtc	.+14     	; 0xb5e <__divmodhi4_exit>

00000b50 <__divmodhi4_neg1>:
 b50:	90 95       	com	r25
 b52:	81 95       	neg	r24
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	08 95       	ret

00000b58 <__divmodhi4_neg2>:
 b58:	70 95       	com	r23
 b5a:	61 95       	neg	r22
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255

00000b5e <__divmodhi4_exit>:
 b5e:	08 95       	ret

00000b60 <__udivmodhi4>:
 b60:	aa 1b       	sub	r26, r26
 b62:	bb 1b       	sub	r27, r27
 b64:	51 e1       	ldi	r21, 0x11	; 17
 b66:	07 c0       	rjmp	.+14     	; 0xb76 <__udivmodhi4_ep>

00000b68 <__udivmodhi4_loop>:
 b68:	aa 1f       	adc	r26, r26
 b6a:	bb 1f       	adc	r27, r27
 b6c:	a6 17       	cp	r26, r22
 b6e:	b7 07       	cpc	r27, r23
 b70:	10 f0       	brcs	.+4      	; 0xb76 <__udivmodhi4_ep>
 b72:	a6 1b       	sub	r26, r22
 b74:	b7 0b       	sbc	r27, r23

00000b76 <__udivmodhi4_ep>:
 b76:	88 1f       	adc	r24, r24
 b78:	99 1f       	adc	r25, r25
 b7a:	5a 95       	dec	r21
 b7c:	a9 f7       	brne	.-22     	; 0xb68 <__udivmodhi4_loop>
 b7e:	80 95       	com	r24
 b80:	90 95       	com	r25
 b82:	bc 01       	movw	r22, r24
 b84:	cd 01       	movw	r24, r26
 b86:	08 95       	ret

00000b88 <_exit>:
 b88:	f8 94       	cli

00000b8a <__stop_program>:
 b8a:	ff cf       	rjmp	.-2      	; 0xb8a <__stop_program>
