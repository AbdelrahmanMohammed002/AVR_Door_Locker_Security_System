
Slave_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800060  00800060  00000a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002413  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e83  00000000  00000000  000032df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a65  00000000  00000000  00004162  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a80  00000000  00000000  00005bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010ca  00000000  00000000  00006648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019c5  00000000  00000000  00007712  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  000090d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_6>
  1c:	0c 94 a9 03 	jmp	0x752	; 0x752 <__vector_7>
  20:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_8>
  24:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_9>
  28:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_10>
  2c:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_13>
  38:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_14>
  3c:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 be 02 	jmp	0x57c	; 0x57c <__vector_17>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 56 00 	call	0xac	; 0xac <main>
  74:	0c 94 fc 04 	jmp	0x9f8	; 0x9f8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Recieve_String>:
		if(local_u8Request==0xAA){
			MUSART_vTransmit(0xBB);
			global_u8Availability =1;
		}
	}
}
  7c:	ef 92       	push	r14
  7e:	ff 92       	push	r15
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	7c 01       	movw	r14, r24
  88:	c0 e0       	ldi	r28, 0x00	; 0
  8a:	08 c0       	rjmp	.+16     	; 0x9c <UART_Recieve_String+0x20>
  8c:	87 01       	movw	r16, r14
  8e:	0c 0f       	add	r16, r28
  90:	11 1d       	adc	r17, r1
  92:	0e 94 3c 04 	call	0x878	; 0x878 <MUSART_u8Receive>
  96:	f8 01       	movw	r30, r16
  98:	80 83       	st	Z, r24
  9a:	cf 5f       	subi	r28, 0xFF	; 255
  9c:	c5 30       	cpi	r28, 0x05	; 5
  9e:	b0 f3       	brcs	.-20     	; 0x8c <UART_Recieve_String+0x10>
  a0:	cf 91       	pop	r28
  a2:	1f 91       	pop	r17
  a4:	0f 91       	pop	r16
  a6:	ff 90       	pop	r15
  a8:	ef 90       	pop	r14
  aa:	08 95       	ret

000000ac <main>:
	SUCCEEDED,
	ERROR, 
	OPEN_DOOR,
} SystemStatus;

int main(int argc, char **argv) {
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	6a 97       	sbiw	r28, 0x1a	; 26
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
	
	MDIO_vSetPinDirection(PORT_D, 0, INPUT);//RX
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 ab 01 	call	0x356	; 0x356 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORT_D, 1, OUTPUT);//\TX
  ca:	41 e0       	ldi	r20, 0x01	; 1
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 ab 01 	call	0x356	; 0x356 <MDIO_vSetPinDirection>

	MUSART_vInit(51);
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 2a 04 	call	0x854	; 0x854 <MUSART_vInit>
	HLCD_vInit();
  dc:	0e 94 19 01 	call	0x232	; 0x232 <HLCD_vInit>
	
	while (MUSART_u8Receive()!=MASTER_READY);
  e0:	0e 94 3c 04 	call	0x878	; 0x878 <MUSART_u8Receive>
  e4:	81 11       	cpse	r24, r1
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <main+0x34>
	MUSART_vTransmit(SLAVE_READY);
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
	
	u8 local_u8SlaveStatus , local_u8MasterStatus;
	
	local_u8SlaveStatus = MEEPROM_u8ReadByte(0x0010);
  ee:	80 e1       	ldi	r24, 0x10	; 16
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 b6 02 	call	0x56c	; 0x56c <MEEPROM_u8ReadByte>
	MUSART_vTransmit(local_u8SlaveStatus);
  f6:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
	
	local_u8SlaveStatus = IDLE;
  fa:	12 e0       	ldi	r17, 0x02	; 2
	local_u8MasterStatus = IDLE;
	u8 Dummy_String[16];
	
	while (1) {
		
		local_u8MasterStatus = MUSART_u8Receive();
  fc:	0e 94 3c 04 	call	0x878	; 0x878 <MUSART_u8Receive>
		
		if (local_u8MasterStatus == CREATE_PASSWORD)
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x50>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 104:	4a e0       	ldi	r20, 0x0A	; 10
 106:	9e 01       	movw	r18, r28
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	79 01       	movw	r14, r18
 10e:	b9 01       	movw	r22, r18
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 c7 04 	call	0x98e	; 0x98e <__itoa_ncheck>
		{
			{
				itoa(local_u8MasterStatus, Dummy_String, 10);
				HLCD_vSendData(Dummy_String);
 116:	8e 2d       	mov	r24, r14
 118:	0e 94 57 01 	call	0x2ae	; 0x2ae <HLCD_vSendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	3f e3       	ldi	r19, 0x3F	; 63
 11e:	8d e0       	ldi	r24, 0x0D	; 13
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	31 50       	subi	r19, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x76>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x80>
 12c:	00 00       	nop
				_delay_ms(1000);
				HLCD_vDisplayClear();
 12e:	0e 94 a1 01 	call	0x342	; 0x342 <HLCD_vDisplayClear>
			}

			
			u8 local_u8EnteredPassword[5]; u8 local_u8ReEnteredPassword[5];
			MUSART_vTransmit(local_u8SlaveStatus);
 132:	81 2f       	mov	r24, r17
 134:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
			
			UART_Recieve_String(local_u8EnteredPassword);
 138:	ce 01       	movw	r24, r28
 13a:	46 96       	adiw	r24, 0x16	; 22
 13c:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Recieve_String>
			UART_Recieve_String(local_u8ReEnteredPassword);
 140:	ce 01       	movw	r24, r28
 142:	41 96       	adiw	r24, 0x11	; 17
 144:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_Recieve_String>
			
			{
				HLCD_vSendString(local_u8EnteredPassword);
 148:	ce 01       	movw	r24, r28
 14a:	46 96       	adiw	r24, 0x16	; 22
 14c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <HLCD_vSendString>
				HLCD_vMoveTo(1, 0);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 92 01 	call	0x324	; 0x324 <HLCD_vMoveTo>
				HLCD_vSendString(local_u8ReEnteredPassword);
 158:	ce 01       	movw	r24, r28
 15a:	41 96       	adiw	r24, 0x11	; 17
 15c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <HLCD_vSendString>
			}
			
			u8 local_u8Flag =0;
			
			for (u8 local_u8Counter =0; local_u8Counter <PASSWORD_SIZE; local_u8Counter++)
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	13 c0       	rjmp	.+38     	; 0x18a <main+0xde>
			{
				if (local_u8EnteredPassword[local_u8Counter]!=local_u8ReEnteredPassword[local_u8Counter])
 164:	82 2f       	mov	r24, r18
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	e6 e1       	ldi	r30, 0x16	; 22
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	ec 0f       	add	r30, r28
 16e:	fd 1f       	adc	r31, r29
 170:	e8 0f       	add	r30, r24
 172:	f9 1f       	adc	r31, r25
 174:	30 81       	ld	r19, Z
 176:	e1 e1       	ldi	r30, 0x11	; 17
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ec 0f       	add	r30, r28
 17c:	fd 1f       	adc	r31, r29
 17e:	e8 0f       	add	r30, r24
 180:	f9 1f       	adc	r31, r25
 182:	80 81       	ld	r24, Z
 184:	38 13       	cpse	r19, r24
 186:	05 c0       	rjmp	.+10     	; 0x192 <main+0xe6>
				HLCD_vSendString(local_u8ReEnteredPassword);
			}
			
			u8 local_u8Flag =0;
			
			for (u8 local_u8Counter =0; local_u8Counter <PASSWORD_SIZE; local_u8Counter++)
 188:	2f 5f       	subi	r18, 0xFF	; 255
 18a:	25 30       	cpi	r18, 0x05	; 5
 18c:	58 f3       	brcs	.-42     	; 0x164 <main+0xb8>
				HLCD_vSendString(local_u8EnteredPassword);
				HLCD_vMoveTo(1, 0);
				HLCD_vSendString(local_u8ReEnteredPassword);
			}
			
			u8 local_u8Flag =0;
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0xe8>
			
			for (u8 local_u8Counter =0; local_u8Counter <PASSWORD_SIZE; local_u8Counter++)
			{
				if (local_u8EnteredPassword[local_u8Counter]!=local_u8ReEnteredPassword[local_u8Counter])
				{
					local_u8Flag = 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
					break;
				}
			}
			
			if (local_u8Flag == 0)
 194:	88 23       	and	r24, r24
 196:	71 f0       	breq	.+28     	; 0x1b4 <main+0x108>
 198:	19 c0       	rjmp	.+50     	; 0x1cc <main+0x120>
			{
				for (u8 local_u8Counter =0 ; local_u8Counter < PASSWORD_SIZE ; local_u8Counter++)
				{
					MEEPROM_vWriteByte(0x0000+local_u8Counter, local_u8EnteredPassword[local_u8Counter]);
 19a:	81 2f       	mov	r24, r17
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	e6 e1       	ldi	r30, 0x16	; 22
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	ec 0f       	add	r30, r28
 1a4:	fd 1f       	adc	r31, r29
 1a6:	e8 0f       	add	r30, r24
 1a8:	f9 1f       	adc	r31, r25
 1aa:	60 81       	ld	r22, Z
 1ac:	0e 94 ab 02 	call	0x556	; 0x556 <MEEPROM_vWriteByte>
				}
			}
			
			if (local_u8Flag == 0)
			{
				for (u8 local_u8Counter =0 ; local_u8Counter < PASSWORD_SIZE ; local_u8Counter++)
 1b0:	1f 5f       	subi	r17, 0xFF	; 255
 1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <main+0x10a>
 1b4:	10 e0       	ldi	r17, 0x00	; 0
 1b6:	15 30       	cpi	r17, 0x05	; 5
 1b8:	80 f3       	brcs	.-32     	; 0x19a <main+0xee>
				{
					MEEPROM_vWriteByte(0x0000+local_u8Counter, local_u8EnteredPassword[local_u8Counter]);
				}
				MUSART_vTransmit(SUCCEEDED);
 1ba:	85 e0       	ldi	r24, 0x05	; 5
 1bc:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
				MEEPROM_vWriteByte(0x0010, 0);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 ab 02 	call	0x556	; 0x556 <MEEPROM_vWriteByte>
 1ca:	03 c0       	rjmp	.+6      	; 0x1d2 <main+0x126>
			} 
			else
			{
				MUSART_vTransmit(ERROR);
 1cc:	86 e0       	ldi	r24, 0x06	; 6
 1ce:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
			}
			
			local_u8SlaveStatus = MEEPROM_u8ReadByte(0x0010);
 1d2:	80 e1       	ldi	r24, 0x10	; 16
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 b6 02 	call	0x56c	; 0x56c <MEEPROM_u8ReadByte>
 1da:	18 2f       	mov	r17, r24
			MUSART_vTransmit(local_u8SlaveStatus);
 1dc:	0e 94 38 04 	call	0x870	; 0x870 <MUSART_vTransmit>
 1e0:	8d cf       	rjmp	.-230    	; 0xfc <main+0x50>

000001e2 <HLCD_vSendCommand>:
 * @brief Send a command to the LCD.
 *
 * @param A_u8Command: Command to be sent.
 */
void HLCD_vSendCommand(u8 A_u8Command)
{
 1e2:	cf 93       	push	r28
 1e4:	c8 2f       	mov	r28, r24
    // Set RS to 0 (Command Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, LOW);
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>

    // Send command on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Command);
 1fa:	6c 2f       	mov	r22, r28
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 9b 02 	call	0x536	; 0x536 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>
 20c:	89 ef       	ldi	r24, 0xF9	; 249
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <HLCD_vSendCommand+0x2e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <HLCD_vSendCommand+0x34>
 216:	00 00       	nop
    _delay_ms(1);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 218:	40 e0       	ldi	r20, 0x00	; 0
 21a:	62 e0       	ldi	r22, 0x02	; 2
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>
 222:	89 ef       	ldi	r24, 0xF9	; 249
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <HLCD_vSendCommand+0x44>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <HLCD_vSendCommand+0x4a>
 22c:	00 00       	nop
    _delay_ms(1);
}
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <HLCD_vInit>:
 * @brief Initialize the LCD module.
 */
void HLCD_vInit(void)
{
    // Set control pins direction as OUTPUT
    MDIO_vSetPinDirection(CONTROL_PORT, RS, OUTPUT);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 ab 01 	call	0x356	; 0x356 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, RW, OUTPUT);
 23c:	41 e0       	ldi	r20, 0x01	; 1
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 ab 01 	call	0x356	; 0x356 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, EN, OUTPUT);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 ab 01 	call	0x356	; 0x356 <MDIO_vSetPinDirection>

    // Set data port direction as OUTPUT (all pins)
    MDIO_vSetPortDirection(DATA_PORT, 0xFF);
 250:	6f ef       	ldi	r22, 0xFF	; 255
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 1b 02 	call	0x436	; 0x436 <MDIO_vSetPortDirection>
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	97 e2       	ldi	r25, 0x27	; 39
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <HLCD_vInit+0x2a>
 260:	00 c0       	rjmp	.+0      	; 0x262 <HLCD_vInit+0x30>
 262:	00 00       	nop

    // Wait for LCD to power up
    _delay_ms(40);

    // Send LCD initialization commands
    HLCD_vSendCommand(FUNCTION_SET);
 264:	88 e3       	ldi	r24, 0x38	; 56
 266:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 26a:	89 ef       	ldi	r24, 0xF9	; 249
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <HLCD_vInit+0x3c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <HLCD_vInit+0x42>
 274:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_ON_OFF);
 276:	8f e0       	ldi	r24, 0x0F	; 15
 278:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 27c:	89 ef       	ldi	r24, 0xF9	; 249
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <HLCD_vInit+0x4e>
 284:	00 c0       	rjmp	.+0      	; 0x286 <HLCD_vInit+0x54>
 286:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_CLEAR);
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 28e:	8d ee       	ldi	r24, 0xED	; 237
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <HLCD_vInit+0x60>
 296:	00 c0       	rjmp	.+0      	; 0x298 <HLCD_vInit+0x66>
 298:	00 00       	nop
    _delay_ms(3);
    HLCD_vSendCommand(ENTRY_MODE_SET);
 29a:	86 e0       	ldi	r24, 0x06	; 6
 29c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 2a0:	8d ee       	ldi	r24, 0xED	; 237
 2a2:	92 e0       	ldi	r25, 0x02	; 2
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <HLCD_vInit+0x72>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <HLCD_vInit+0x78>
 2aa:	00 00       	nop
 2ac:	08 95       	ret

000002ae <HLCD_vSendData>:
 * @brief Send data (character) to the LCD.
 *
 * @param A_u8Data: Data (character) to be sent.
 */
void HLCD_vSendData(u8 A_u8Data)
{
 2ae:	cf 93       	push	r28
 2b0:	c8 2f       	mov	r28, r24
    // Set RS to 1 (Data Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, HIGH);
 2b2:	41 e0       	ldi	r20, 0x01	; 1
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>

    // Send data on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Data);
 2c6:	6c 2f       	mov	r22, r28
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 9b 02 	call	0x536	; 0x536 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	62 e0       	ldi	r22, 0x02	; 2
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>
 2d8:	89 ef       	ldi	r24, 0xF9	; 249
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <HLCD_vSendData+0x2e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <HLCD_vSendData+0x34>
 2e2:	00 00       	nop
    _delay_ms(1);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 2b 02 	call	0x456	; 0x456 <MDIO_vSetPinValue>
 2ee:	89 ef       	ldi	r24, 0xF9	; 249
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <HLCD_vSendData+0x44>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <HLCD_vSendData+0x4a>
 2f8:	00 00       	nop
    _delay_ms(1);
}
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <HLCD_vSendString>:
 * @brief Send a string to display on the LCD.
 *
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	8c 01       	movw	r16, r24
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 306:	c0 e0       	ldi	r28, 0x00	; 0
 308:	03 c0       	rjmp	.+6      	; 0x310 <HLCD_vSendString+0x12>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
 30a:	0e 94 57 01 	call	0x2ae	; 0x2ae <HLCD_vSendData>
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	f8 01       	movw	r30, r16
 312:	ec 0f       	add	r30, r28
 314:	f1 1d       	adc	r31, r1
 316:	80 81       	ld	r24, Z
 318:	81 11       	cpse	r24, r1
 31a:	f7 cf       	rjmp	.-18     	; 0x30a <HLCD_vSendString+0xc>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
    }
}
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	08 95       	ret

00000324 <HLCD_vMoveTo>:
 * @param A_u8Col: Column number (0 to 15).
 */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col)
{
    // Calculate cursor position based on row and column
    switch (A_u8Row)
 324:	88 23       	and	r24, r24
 326:	19 f0       	breq	.+6      	; 0x32e <HLCD_vMoveTo+0xa>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	31 f0       	breq	.+12     	; 0x338 <HLCD_vMoveTo+0x14>
 32c:	08 95       	ret
    {
        case 0:
            HLCD_vSendCommand(A_u8Col + 128); // Move to 1st row
 32e:	80 e8       	ldi	r24, 0x80	; 128
 330:	86 0f       	add	r24, r22
 332:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
            break;
 336:	08 95       	ret
        case 1:
            HLCD_vSendCommand(A_u8Col + 192); // Move to 2nd row
 338:	80 ec       	ldi	r24, 0xC0	; 192
 33a:	86 0f       	add	r24, r22
 33c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 340:	08 95       	ret

00000342 <HLCD_vDisplayClear>:
 * @brief Clear the display of the LCD.
 */
void HLCD_vDisplayClear(void)
{
    // Send clear display command
    HLCD_vSendCommand(DISPLAY_CLEAR);
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <HLCD_vSendCommand>
 348:	89 ef       	ldi	r24, 0xF9	; 249
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <HLCD_vDisplayClear+0xa>
 350:	00 c0       	rjmp	.+0      	; 0x352 <HLCD_vDisplayClear+0x10>
 352:	00 00       	nop
 354:	08 95       	ret

00000356 <MDIO_vSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Config.h"

void MDIO_vSetPinDirection(u8 A_u8PortNumber,u8 A_u8PinNumber, u8 A_u8Dir )
{
	if(A_u8Dir == INPUT)
 356:	41 11       	cpse	r20, r1
 358:	38 c0       	rjmp	.+112    	; 0x3ca <MDIO_vSetPinDirection+0x74>
	{
		switch (A_u8PortNumber)
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	91 f0       	breq	.+36     	; 0x382 <MDIO_vSetPinDirection+0x2c>
 35e:	28 f0       	brcs	.+10     	; 0x36a <MDIO_vSetPinDirection+0x14>
 360:	82 30       	cpi	r24, 0x02	; 2
 362:	d9 f0       	breq	.+54     	; 0x39a <MDIO_vSetPinDirection+0x44>
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	29 f1       	breq	.+74     	; 0x3b2 <MDIO_vSetPinDirection+0x5c>
 368:	08 95       	ret
		{
		case PORT_A: CLR_BIT(DDRA, A_u8PinNumber); break;
 36a:	2a b3       	in	r18, 0x1a	; 26
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <MDIO_vSetPinDirection+0x20>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <MDIO_vSetPinDirection+0x1c>
 37a:	80 95       	com	r24
 37c:	82 23       	and	r24, r18
 37e:	8a bb       	out	0x1a, r24	; 26
 380:	08 95       	ret
		case PORT_B: CLR_BIT(DDRB, A_u8PinNumber); break;
 382:	27 b3       	in	r18, 0x17	; 23
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	02 c0       	rjmp	.+4      	; 0x38e <MDIO_vSetPinDirection+0x38>
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <MDIO_vSetPinDirection+0x34>
 392:	80 95       	com	r24
 394:	82 23       	and	r24, r18
 396:	87 bb       	out	0x17, r24	; 23
 398:	08 95       	ret
		case PORT_C: CLR_BIT(DDRC, A_u8PinNumber); break;
 39a:	24 b3       	in	r18, 0x14	; 20
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <MDIO_vSetPinDirection+0x50>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	6a 95       	dec	r22
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <MDIO_vSetPinDirection+0x4c>
 3aa:	80 95       	com	r24
 3ac:	82 23       	and	r24, r18
 3ae:	84 bb       	out	0x14, r24	; 20
 3b0:	08 95       	ret
		case PORT_D: CLR_BIT(DDRD, A_u8PinNumber); break;
 3b2:	21 b3       	in	r18, 0x11	; 17
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <MDIO_vSetPinDirection+0x68>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <MDIO_vSetPinDirection+0x64>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	81 bb       	out	0x11, r24	; 17
 3c8:	08 95       	ret
		}
	}else if (A_u8Dir == OUTPUT)
 3ca:	41 30       	cpi	r20, 0x01	; 1
 3cc:	99 f5       	brne	.+102    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		switch (A_u8PortNumber)
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	89 f0       	breq	.+34     	; 0x3f4 <MDIO_vSetPinDirection+0x9e>
 3d2:	28 f0       	brcs	.+10     	; 0x3de <MDIO_vSetPinDirection+0x88>
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	c9 f0       	breq	.+50     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3d8:	83 30       	cpi	r24, 0x03	; 3
 3da:	11 f1       	breq	.+68     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3dc:	08 95       	ret
		{
		case PORT_A: SET_BIT(DDRA, A_u8PinNumber); break;
 3de:	2a b3       	in	r18, 0x1a	; 26
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <MDIO_vSetPinDirection+0x94>
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	6a 95       	dec	r22
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <MDIO_vSetPinDirection+0x90>
 3ee:	82 2b       	or	r24, r18
 3f0:	8a bb       	out	0x1a, r24	; 26
 3f2:	08 95       	ret
		case PORT_B: SET_BIT(DDRB, A_u8PinNumber); break;
 3f4:	27 b3       	in	r18, 0x17	; 23
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	88 0f       	add	r24, r24
 3fe:	99 1f       	adc	r25, r25
 400:	6a 95       	dec	r22
 402:	e2 f7       	brpl	.-8      	; 0x3fc <MDIO_vSetPinDirection+0xa6>
 404:	82 2b       	or	r24, r18
 406:	87 bb       	out	0x17, r24	; 23
 408:	08 95       	ret
		case PORT_C: SET_BIT(DDRC, A_u8PinNumber); break;
 40a:	24 b3       	in	r18, 0x14	; 20
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	82 2b       	or	r24, r18
 41c:	84 bb       	out	0x14, r24	; 20
 41e:	08 95       	ret
		case PORT_D: SET_BIT(DDRD, A_u8PinNumber); break;
 420:	21 b3       	in	r18, 0x11	; 17
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	6a 95       	dec	r22
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	82 2b       	or	r24, r18
 432:	81 bb       	out	0x11, r24	; 17
 434:	08 95       	ret

00000436 <MDIO_vSetPortDirection>:
		//Do Nothing.
	}
}

void MDIO_vSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir){
	switch (A_u8PortNumber){
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	41 f0       	breq	.+16     	; 0x44a <MDIO_vSetPortDirection+0x14>
 43a:	28 f0       	brcs	.+10     	; 0x446 <MDIO_vSetPortDirection+0x10>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	39 f0       	breq	.+14     	; 0x44e <MDIO_vSetPortDirection+0x18>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	39 f0       	breq	.+14     	; 0x452 <MDIO_vSetPortDirection+0x1c>
 444:	08 95       	ret
	case PORT_A: DDRA = A_u8Dir; break;
 446:	6a bb       	out	0x1a, r22	; 26
 448:	08 95       	ret
	case PORT_B: DDRB = A_u8Dir; break;
 44a:	67 bb       	out	0x17, r22	; 23
 44c:	08 95       	ret
	case PORT_C: DDRC = A_u8Dir; break;
 44e:	64 bb       	out	0x14, r22	; 20
 450:	08 95       	ret
	case PORT_D: DDRD = A_u8Dir; break;
 452:	61 bb       	out	0x11, r22	; 17
 454:	08 95       	ret

00000456 <MDIO_vSetPinValue>:
	}
}

void MDIO_vSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Value)
{
	if(A_u8Value == HIGH)
 456:	41 30       	cpi	r20, 0x01	; 1
 458:	a1 f5       	brne	.+104    	; 0x4c2 <MDIO_vSetPinValue+0x6c>
	{
		switch (A_u8PortNumber)
 45a:	81 30       	cpi	r24, 0x01	; 1
 45c:	89 f0       	breq	.+34     	; 0x480 <MDIO_vSetPinValue+0x2a>
 45e:	28 f0       	brcs	.+10     	; 0x46a <MDIO_vSetPinValue+0x14>
 460:	82 30       	cpi	r24, 0x02	; 2
 462:	c9 f0       	breq	.+50     	; 0x496 <MDIO_vSetPinValue+0x40>
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	11 f1       	breq	.+68     	; 0x4ac <MDIO_vSetPinValue+0x56>
 468:	08 95       	ret
		{
		case PORT_A: SET_BIT(PORTA, A_u8PinNumber); break;
 46a:	2b b3       	in	r18, 0x1b	; 27
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 c0       	rjmp	.+4      	; 0x476 <MDIO_vSetPinValue+0x20>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <MDIO_vSetPinValue+0x1c>
 47a:	82 2b       	or	r24, r18
 47c:	8b bb       	out	0x1b, r24	; 27
 47e:	08 95       	ret
		case PORT_B: SET_BIT(PORTB, A_u8PinNumber); break;
 480:	28 b3       	in	r18, 0x18	; 24
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 c0       	rjmp	.+4      	; 0x48c <MDIO_vSetPinValue+0x36>
 488:	88 0f       	add	r24, r24
 48a:	99 1f       	adc	r25, r25
 48c:	6a 95       	dec	r22
 48e:	e2 f7       	brpl	.-8      	; 0x488 <MDIO_vSetPinValue+0x32>
 490:	82 2b       	or	r24, r18
 492:	88 bb       	out	0x18, r24	; 24
 494:	08 95       	ret
		case PORT_C: SET_BIT(PORTC, A_u8PinNumber); break;
 496:	25 b3       	in	r18, 0x15	; 21
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <MDIO_vSetPinValue+0x4c>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <MDIO_vSetPinValue+0x48>
 4a6:	82 2b       	or	r24, r18
 4a8:	85 bb       	out	0x15, r24	; 21
 4aa:	08 95       	ret
		case PORT_D: SET_BIT(PORTD, A_u8PinNumber); break;
 4ac:	22 b3       	in	r18, 0x12	; 18
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <MDIO_vSetPinValue+0x62>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <MDIO_vSetPinValue+0x5e>
 4bc:	82 2b       	or	r24, r18
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret
		}
	}else if (A_u8Value == LOW)
 4c2:	41 11       	cpse	r20, r1
 4c4:	37 c0       	rjmp	.+110    	; 0x534 <MDIO_vSetPinValue+0xde>
	{
		switch (A_u8PortNumber)
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	91 f0       	breq	.+36     	; 0x4ee <MDIO_vSetPinValue+0x98>
 4ca:	28 f0       	brcs	.+10     	; 0x4d6 <MDIO_vSetPinValue+0x80>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	d9 f0       	breq	.+54     	; 0x506 <MDIO_vSetPinValue+0xb0>
 4d0:	83 30       	cpi	r24, 0x03	; 3
 4d2:	29 f1       	breq	.+74     	; 0x51e <MDIO_vSetPinValue+0xc8>
 4d4:	08 95       	ret
		{
		case PORT_A: CLR_BIT(PORTA, A_u8PinNumber); break;
 4d6:	2b b3       	in	r18, 0x1b	; 27
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <MDIO_vSetPinValue+0x8c>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	6a 95       	dec	r22
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <MDIO_vSetPinValue+0x88>
 4e6:	80 95       	com	r24
 4e8:	82 23       	and	r24, r18
 4ea:	8b bb       	out	0x1b, r24	; 27
 4ec:	08 95       	ret
		case PORT_B: CLR_BIT(PORTB, A_u8PinNumber); break;
 4ee:	28 b3       	in	r18, 0x18	; 24
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <MDIO_vSetPinValue+0xa4>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <MDIO_vSetPinValue+0xa0>
 4fe:	80 95       	com	r24
 500:	82 23       	and	r24, r18
 502:	88 bb       	out	0x18, r24	; 24
 504:	08 95       	ret
		case PORT_C: CLR_BIT(PORTC, A_u8PinNumber); break;
 506:	25 b3       	in	r18, 0x15	; 21
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <MDIO_vSetPinValue+0xbc>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <MDIO_vSetPinValue+0xb8>
 516:	80 95       	com	r24
 518:	82 23       	and	r24, r18
 51a:	85 bb       	out	0x15, r24	; 21
 51c:	08 95       	ret
		case PORT_D: CLR_BIT(PORTD, A_u8PinNumber); break;
 51e:	22 b3       	in	r18, 0x12	; 18
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	02 c0       	rjmp	.+4      	; 0x52a <MDIO_vSetPinValue+0xd4>
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	6a 95       	dec	r22
 52c:	e2 f7       	brpl	.-8      	; 0x526 <MDIO_vSetPinValue+0xd0>
 52e:	80 95       	com	r24
 530:	82 23       	and	r24, r18
 532:	82 bb       	out	0x12, r24	; 18
 534:	08 95       	ret

00000536 <MDIO_vSetPortValue>:
		//DO Nothing
	}
}

void MDIO_vSetPortValue(u8 A_u8PortNumber, u8 A_u8Value){
	switch (A_u8PortNumber){
 536:	81 30       	cpi	r24, 0x01	; 1
 538:	41 f0       	breq	.+16     	; 0x54a <MDIO_vSetPortValue+0x14>
 53a:	28 f0       	brcs	.+10     	; 0x546 <MDIO_vSetPortValue+0x10>
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	39 f0       	breq	.+14     	; 0x54e <MDIO_vSetPortValue+0x18>
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	39 f0       	breq	.+14     	; 0x552 <MDIO_vSetPortValue+0x1c>
 544:	08 95       	ret
	case PORT_A: PORTA = A_u8Value; break;
 546:	6b bb       	out	0x1b, r22	; 27
 548:	08 95       	ret
	case PORT_B: PORTB = A_u8Value; break;
 54a:	68 bb       	out	0x18, r22	; 24
 54c:	08 95       	ret
	case PORT_C: PORTC = A_u8Value; break;
 54e:	65 bb       	out	0x15, r22	; 21
 550:	08 95       	ret
	case PORT_D: PORTD = A_u8Value; break;
 552:	62 bb       	out	0x12, r22	; 18
 554:	08 95       	ret

00000556 <MEEPROM_vWriteByte>:
 * @param ptr_to_fun: Pointer to the callback function.
 */

void MEEPROM_vSetCallBack(void (*ptr_to_fun)(void)) {
	if (ptr_to_fun != NULL) {
		EEPROM_Call_Back = ptr_to_fun;
 556:	e1 99       	sbic	0x1c, 1	; 28
 558:	fe cf       	rjmp	.-4      	; 0x556 <MEEPROM_vWriteByte>
 55a:	8e bb       	out	0x1e, r24	; 30
 55c:	6d bb       	out	0x1d, r22	; 29
 55e:	8c b3       	in	r24, 0x1c	; 28
 560:	84 60       	ori	r24, 0x04	; 4
 562:	8c bb       	out	0x1c, r24	; 28
 564:	8c b3       	in	r24, 0x1c	; 28
 566:	82 60       	ori	r24, 0x02	; 2
 568:	8c bb       	out	0x1c, r24	; 28
 56a:	08 95       	ret

0000056c <MEEPROM_u8ReadByte>:
 56c:	e1 99       	sbic	0x1c, 1	; 28
 56e:	fe cf       	rjmp	.-4      	; 0x56c <MEEPROM_u8ReadByte>
 570:	8e bb       	out	0x1e, r24	; 30
 572:	8c b3       	in	r24, 0x1c	; 28
 574:	81 60       	ori	r24, 0x01	; 1
 576:	8c bb       	out	0x1c, r24	; 28
 578:	8d b3       	in	r24, 0x1d	; 29
 57a:	08 95       	ret

0000057c <__vector_17>:
	}
}

void __vector_17(void) {
 57c:	1f 92       	push	r1
 57e:	0f 92       	push	r0
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	0f 92       	push	r0
 584:	11 24       	eor	r1, r1
 586:	2f 93       	push	r18
 588:	3f 93       	push	r19
 58a:	4f 93       	push	r20
 58c:	5f 93       	push	r21
 58e:	6f 93       	push	r22
 590:	7f 93       	push	r23
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
 596:	af 93       	push	r26
 598:	bf 93       	push	r27
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
	if (EEPROM_Call_Back != NULL)
 59e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5a2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 5a6:	30 97       	sbiw	r30, 0x00	; 0
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__vector_17+0x30>
		EEPROM_Call_Back();
 5aa:	09 95       	icall
}
 5ac:	ff 91       	pop	r31
 5ae:	ef 91       	pop	r30
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <__vector_19>:
void MI2C_vSetCallBack(void (*ptr_to_fun)(void)) {
	ptr_to_I2CINT = ptr_to_fun;
}

// ISR for I2C interrupt
void __vector_19(void) {
 5ce:	1f 92       	push	r1
 5d0:	0f 92       	push	r0
 5d2:	0f b6       	in	r0, 0x3f	; 63
 5d4:	0f 92       	push	r0
 5d6:	11 24       	eor	r1, r1
 5d8:	2f 93       	push	r18
 5da:	3f 93       	push	r19
 5dc:	4f 93       	push	r20
 5de:	5f 93       	push	r21
 5e0:	6f 93       	push	r22
 5e2:	7f 93       	push	r23
 5e4:	8f 93       	push	r24
 5e6:	9f 93       	push	r25
 5e8:	af 93       	push	r26
 5ea:	bf 93       	push	r27
 5ec:	ef 93       	push	r30
 5ee:	ff 93       	push	r31
	if (ptr_to_I2CINT != NULL)
 5f0:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <ptr_to_I2CINT>
 5f4:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <ptr_to_I2CINT+0x1>
 5f8:	30 97       	sbiw	r30, 0x00	; 0
 5fa:	09 f0       	breq	.+2      	; 0x5fe <__vector_19+0x30>
		ptr_to_I2CINT();
 5fc:	09 95       	icall
}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <MTIMER0_vClearOVFFlag>:
	}
}

void MTIMER0_vSetOVFCallBack(void (*CallBack) (void)){
	if(CallBack != NULL){
		TIMER0_OVF_Call_Back = CallBack;
 620:	88 b7       	in	r24, 0x38	; 56
 622:	81 60       	ori	r24, 0x01	; 1
 624:	88 bf       	out	0x38, r24	; 56
 626:	08 95       	ret

00000628 <MTIMER0_vClearCTCFlag>:
 628:	88 b7       	in	r24, 0x38	; 56
 62a:	82 60       	ori	r24, 0x02	; 2
 62c:	88 bf       	out	0x38, r24	; 56
 62e:	08 95       	ret

00000630 <__vector_11>:
	}
}


void __vector_11(void){
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	if(TIMER0_OVF_Call_Back != NULL)
 652:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TIMER0_OVF_Call_Back>
 656:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TIMER0_OVF_Call_Back+0x1>
 65a:	30 97       	sbiw	r30, 0x00	; 0
 65c:	09 f0       	breq	.+2      	; 0x660 <__vector_11+0x30>
		TIMER0_OVF_Call_Back();
 65e:	09 95       	icall
	MTIMER0_vClearOVFFlag();
 660:	0e 94 10 03 	call	0x620	; 0x620 <MTIMER0_vClearOVFFlag>
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0f be       	out	0x3f, r0	; 63
 680:	0f 90       	pop	r0
 682:	1f 90       	pop	r1
 684:	18 95       	reti

00000686 <__vector_10>:


void __vector_10(void){
 686:	1f 92       	push	r1
 688:	0f 92       	push	r0
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	0f 92       	push	r0
 68e:	11 24       	eor	r1, r1
 690:	2f 93       	push	r18
 692:	3f 93       	push	r19
 694:	4f 93       	push	r20
 696:	5f 93       	push	r21
 698:	6f 93       	push	r22
 69a:	7f 93       	push	r23
 69c:	8f 93       	push	r24
 69e:	9f 93       	push	r25
 6a0:	af 93       	push	r26
 6a2:	bf 93       	push	r27
 6a4:	ef 93       	push	r30
 6a6:	ff 93       	push	r31
	if(TIMER0_CTC_Call_Back !=NULL)
 6a8:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TIMER0_CTC_Call_Back>
 6ac:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TIMER0_CTC_Call_Back+0x1>
 6b0:	30 97       	sbiw	r30, 0x00	; 0
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <__vector_10+0x30>
			TIMER0_CTC_Call_Back();
 6b4:	09 95       	icall
	MTIMER0_vClearCTCFlag();
 6b6:	0e 94 14 03 	call	0x628	; 0x628 <MTIMER0_vClearCTCFlag>
}
 6ba:	ff 91       	pop	r31
 6bc:	ef 91       	pop	r30
 6be:	bf 91       	pop	r27
 6c0:	af 91       	pop	r26
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	7f 91       	pop	r23
 6c8:	6f 91       	pop	r22
 6ca:	5f 91       	pop	r21
 6cc:	4f 91       	pop	r20
 6ce:	3f 91       	pop	r19
 6d0:	2f 91       	pop	r18
 6d2:	0f 90       	pop	r0
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	0f 90       	pop	r0
 6d8:	1f 90       	pop	r1
 6da:	18 95       	reti

000006dc <MTIMER1_vClearOVFFlag>:
		TIMER1B_CTC_Call_Back = CallBack;
	}
}
void MTIMER1_vSetInputCaptureCallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		TIMER1_ICU_Call_Back = CallBack;
 6dc:	88 b7       	in	r24, 0x38	; 56
 6de:	84 60       	ori	r24, 0x04	; 4
 6e0:	88 bf       	out	0x38, r24	; 56
 6e2:	08 95       	ret

000006e4 <MTIMER1_vChannelAClearCTCFlag>:
 6e4:	88 b7       	in	r24, 0x38	; 56
 6e6:	80 61       	ori	r24, 0x10	; 16
 6e8:	88 bf       	out	0x38, r24	; 56
 6ea:	08 95       	ret

000006ec <MTIMER1_vChannelBClearCTCFlag>:
 6ec:	88 b7       	in	r24, 0x38	; 56
 6ee:	88 60       	ori	r24, 0x08	; 8
 6f0:	88 bf       	out	0x38, r24	; 56
 6f2:	08 95       	ret

000006f4 <MTIMER1_vClearInputCaptureFlag>:
 6f4:	88 b7       	in	r24, 0x38	; 56
 6f6:	80 62       	ori	r24, 0x20	; 32
 6f8:	88 bf       	out	0x38, r24	; 56
 6fa:	08 95       	ret

000006fc <__vector_6>:
	}
}

void __vector_6(void) {
 6fc:	1f 92       	push	r1
 6fe:	0f 92       	push	r0
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	0f 92       	push	r0
 704:	11 24       	eor	r1, r1
 706:	2f 93       	push	r18
 708:	3f 93       	push	r19
 70a:	4f 93       	push	r20
 70c:	5f 93       	push	r21
 70e:	6f 93       	push	r22
 710:	7f 93       	push	r23
 712:	8f 93       	push	r24
 714:	9f 93       	push	r25
 716:	af 93       	push	r26
 718:	bf 93       	push	r27
 71a:	ef 93       	push	r30
 71c:	ff 93       	push	r31
	if (TIMER1_ICU_Call_Back != NULL)
 71e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <TIMER1_ICU_Call_Back>
 722:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <TIMER1_ICU_Call_Back+0x1>
 726:	30 97       	sbiw	r30, 0x00	; 0
 728:	09 f0       	breq	.+2      	; 0x72c <__vector_6+0x30>
		TIMER1_ICU_Call_Back();
 72a:	09 95       	icall
	MTIMER1_vClearInputCaptureFlag();
 72c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <MTIMER1_vClearInputCaptureFlag>
}
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	bf 91       	pop	r27
 736:	af 91       	pop	r26
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	7f 91       	pop	r23
 73e:	6f 91       	pop	r22
 740:	5f 91       	pop	r21
 742:	4f 91       	pop	r20
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <__vector_7>:

void __vector_7(void) {
 752:	1f 92       	push	r1
 754:	0f 92       	push	r0
 756:	0f b6       	in	r0, 0x3f	; 63
 758:	0f 92       	push	r0
 75a:	11 24       	eor	r1, r1
 75c:	2f 93       	push	r18
 75e:	3f 93       	push	r19
 760:	4f 93       	push	r20
 762:	5f 93       	push	r21
 764:	6f 93       	push	r22
 766:	7f 93       	push	r23
 768:	8f 93       	push	r24
 76a:	9f 93       	push	r25
 76c:	af 93       	push	r26
 76e:	bf 93       	push	r27
 770:	ef 93       	push	r30
 772:	ff 93       	push	r31
	if (TIMER1A_CTC_Call_Back != NULL)
 774:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <TIMER1A_CTC_Call_Back>
 778:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <TIMER1A_CTC_Call_Back+0x1>
 77c:	30 97       	sbiw	r30, 0x00	; 0
 77e:	09 f0       	breq	.+2      	; 0x782 <__vector_7+0x30>
		TIMER1A_CTC_Call_Back();
 780:	09 95       	icall
	MTIMER1_vChannelAClearCTCFlag();
 782:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MTIMER1_vChannelAClearCTCFlag>
}
 786:	ff 91       	pop	r31
 788:	ef 91       	pop	r30
 78a:	bf 91       	pop	r27
 78c:	af 91       	pop	r26
 78e:	9f 91       	pop	r25
 790:	8f 91       	pop	r24
 792:	7f 91       	pop	r23
 794:	6f 91       	pop	r22
 796:	5f 91       	pop	r21
 798:	4f 91       	pop	r20
 79a:	3f 91       	pop	r19
 79c:	2f 91       	pop	r18
 79e:	0f 90       	pop	r0
 7a0:	0f be       	out	0x3f, r0	; 63
 7a2:	0f 90       	pop	r0
 7a4:	1f 90       	pop	r1
 7a6:	18 95       	reti

000007a8 <__vector_8>:

void __vector_8(void) {
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31
	if (TIMER1B_CTC_Call_Back != NULL)
 7ca:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <TIMER1B_CTC_Call_Back>
 7ce:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <TIMER1B_CTC_Call_Back+0x1>
 7d2:	30 97       	sbiw	r30, 0x00	; 0
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <__vector_8+0x30>
		TIMER1B_CTC_Call_Back();
 7d6:	09 95       	icall
	MTIMER1_vChannelBClearCTCFlag();
 7d8:	0e 94 76 03 	call	0x6ec	; 0x6ec <MTIMER1_vChannelBClearCTCFlag>
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_9>:

void __vector_9(void) {
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	4f 93       	push	r20
 80e:	5f 93       	push	r21
 810:	6f 93       	push	r22
 812:	7f 93       	push	r23
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31
	if (TIMER1_OVF_Call_Back != NULL)
 820:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <TIMER1_OVF_Call_Back>
 824:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <TIMER1_OVF_Call_Back+0x1>
 828:	30 97       	sbiw	r30, 0x00	; 0
 82a:	09 f0       	breq	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
		TIMER1_OVF_Call_Back();
 82c:	09 95       	icall
	MTIMER1_vClearOVFFlag();
 82e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <MTIMER1_vClearOVFFlag>
}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <MUSART_vInit>:
		USART_TXC_Call_Back = CallBack;
	}
}
void MUSART_vSetUDRECallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		USART_UDRE_Call_Back = CallBack;
 854:	89 b9       	out	0x09, r24	; 9
 856:	90 bd       	out	0x20, r25	; 32
 858:	8a b1       	in	r24, 0x0a	; 10
 85a:	8b 7f       	andi	r24, 0xFB	; 251
 85c:	8a b9       	out	0x0a, r24	; 10
 85e:	86 e8       	ldi	r24, 0x86	; 134
 860:	80 bd       	out	0x20, r24	; 32
 862:	8a b1       	in	r24, 0x0a	; 10
 864:	80 61       	ori	r24, 0x10	; 16
 866:	8a b9       	out	0x0a, r24	; 10
 868:	8a b1       	in	r24, 0x0a	; 10
 86a:	88 60       	ori	r24, 0x08	; 8
 86c:	8a b9       	out	0x0a, r24	; 10
 86e:	08 95       	ret

00000870 <MUSART_vTransmit>:
 870:	5d 9b       	sbis	0x0b, 5	; 11
 872:	fe cf       	rjmp	.-4      	; 0x870 <MUSART_vTransmit>
 874:	8c b9       	out	0x0c, r24	; 12
 876:	08 95       	ret

00000878 <MUSART_u8Receive>:
 878:	5f 9b       	sbis	0x0b, 7	; 11
 87a:	fe cf       	rjmp	.-4      	; 0x878 <MUSART_u8Receive>
 87c:	5c 99       	sbic	0x0b, 4	; 11
 87e:	06 c0       	rjmp	.+12     	; 0x88c <MUSART_u8Receive+0x14>
 880:	5b 99       	sbic	0x0b, 3	; 11
 882:	06 c0       	rjmp	.+12     	; 0x890 <MUSART_u8Receive+0x18>
 884:	5a 99       	sbic	0x0b, 2	; 11
 886:	06 c0       	rjmp	.+12     	; 0x894 <MUSART_u8Receive+0x1c>
 888:	8c b1       	in	r24, 0x0c	; 12
 88a:	08 95       	ret
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	08 95       	ret
 890:	8f ef       	ldi	r24, 0xFF	; 255
 892:	08 95       	ret
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	08 95       	ret

00000898 <__vector_13>:
	}
}

void __vector_13(void) {
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	6f 93       	push	r22
 8ac:	7f 93       	push	r23
 8ae:	8f 93       	push	r24
 8b0:	9f 93       	push	r25
 8b2:	af 93       	push	r26
 8b4:	bf 93       	push	r27
 8b6:	ef 93       	push	r30
 8b8:	ff 93       	push	r31
	if (USART_RXC_Call_Back != NULL)
 8ba:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <USART_RXC_Call_Back>
 8be:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <USART_RXC_Call_Back+0x1>
 8c2:	30 97       	sbiw	r30, 0x00	; 0
 8c4:	09 f0       	breq	.+2      	; 0x8c8 <__vector_13+0x30>
		USART_RXC_Call_Back();
 8c6:	09 95       	icall
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

000008ea <__vector_14>:

void __vector_14(void) {
 8ea:	1f 92       	push	r1
 8ec:	0f 92       	push	r0
 8ee:	0f b6       	in	r0, 0x3f	; 63
 8f0:	0f 92       	push	r0
 8f2:	11 24       	eor	r1, r1
 8f4:	2f 93       	push	r18
 8f6:	3f 93       	push	r19
 8f8:	4f 93       	push	r20
 8fa:	5f 93       	push	r21
 8fc:	6f 93       	push	r22
 8fe:	7f 93       	push	r23
 900:	8f 93       	push	r24
 902:	9f 93       	push	r25
 904:	af 93       	push	r26
 906:	bf 93       	push	r27
 908:	ef 93       	push	r30
 90a:	ff 93       	push	r31
	if (USART_UDRE_Call_Back != NULL)
 90c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <USART_UDRE_Call_Back>
 910:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <USART_UDRE_Call_Back+0x1>
 914:	30 97       	sbiw	r30, 0x00	; 0
 916:	09 f0       	breq	.+2      	; 0x91a <__vector_14+0x30>
		USART_UDRE_Call_Back();
 918:	09 95       	icall
}
 91a:	ff 91       	pop	r31
 91c:	ef 91       	pop	r30
 91e:	bf 91       	pop	r27
 920:	af 91       	pop	r26
 922:	9f 91       	pop	r25
 924:	8f 91       	pop	r24
 926:	7f 91       	pop	r23
 928:	6f 91       	pop	r22
 92a:	5f 91       	pop	r21
 92c:	4f 91       	pop	r20
 92e:	3f 91       	pop	r19
 930:	2f 91       	pop	r18
 932:	0f 90       	pop	r0
 934:	0f be       	out	0x3f, r0	; 63
 936:	0f 90       	pop	r0
 938:	1f 90       	pop	r1
 93a:	18 95       	reti

0000093c <__vector_15>:

void __vector_15(void) {
 93c:	1f 92       	push	r1
 93e:	0f 92       	push	r0
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	0f 92       	push	r0
 944:	11 24       	eor	r1, r1
 946:	2f 93       	push	r18
 948:	3f 93       	push	r19
 94a:	4f 93       	push	r20
 94c:	5f 93       	push	r21
 94e:	6f 93       	push	r22
 950:	7f 93       	push	r23
 952:	8f 93       	push	r24
 954:	9f 93       	push	r25
 956:	af 93       	push	r26
 958:	bf 93       	push	r27
 95a:	ef 93       	push	r30
 95c:	ff 93       	push	r31
	if (USART_TXC_Call_Back != NULL)
 95e:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <USART_TXC_Call_Back>
 962:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <USART_TXC_Call_Back+0x1>
 966:	30 97       	sbiw	r30, 0x00	; 0
 968:	09 f0       	breq	.+2      	; 0x96c <__vector_15+0x30>
		USART_TXC_Call_Back();
 96a:	09 95       	icall
}
 96c:	ff 91       	pop	r31
 96e:	ef 91       	pop	r30
 970:	bf 91       	pop	r27
 972:	af 91       	pop	r26
 974:	9f 91       	pop	r25
 976:	8f 91       	pop	r24
 978:	7f 91       	pop	r23
 97a:	6f 91       	pop	r22
 97c:	5f 91       	pop	r21
 97e:	4f 91       	pop	r20
 980:	3f 91       	pop	r19
 982:	2f 91       	pop	r18
 984:	0f 90       	pop	r0
 986:	0f be       	out	0x3f, r0	; 63
 988:	0f 90       	pop	r0
 98a:	1f 90       	pop	r1
 98c:	18 95       	reti

0000098e <__itoa_ncheck>:
 98e:	bb 27       	eor	r27, r27
 990:	4a 30       	cpi	r20, 0x0A	; 10
 992:	31 f4       	brne	.+12     	; 0x9a0 <__itoa_ncheck+0x12>
 994:	99 23       	and	r25, r25
 996:	22 f4       	brpl	.+8      	; 0x9a0 <__itoa_ncheck+0x12>
 998:	bd e2       	ldi	r27, 0x2D	; 45
 99a:	90 95       	com	r25
 99c:	81 95       	neg	r24
 99e:	9f 4f       	sbci	r25, 0xFF	; 255
 9a0:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <__utoa_common>

000009a4 <__utoa_ncheck>:
 9a4:	bb 27       	eor	r27, r27

000009a6 <__utoa_common>:
 9a6:	fb 01       	movw	r30, r22
 9a8:	55 27       	eor	r21, r21
 9aa:	aa 27       	eor	r26, r26
 9ac:	88 0f       	add	r24, r24
 9ae:	99 1f       	adc	r25, r25
 9b0:	aa 1f       	adc	r26, r26
 9b2:	a4 17       	cp	r26, r20
 9b4:	10 f0       	brcs	.+4      	; 0x9ba <__utoa_common+0x14>
 9b6:	a4 1b       	sub	r26, r20
 9b8:	83 95       	inc	r24
 9ba:	50 51       	subi	r21, 0x10	; 16
 9bc:	b9 f7       	brne	.-18     	; 0x9ac <__utoa_common+0x6>
 9be:	a0 5d       	subi	r26, 0xD0	; 208
 9c0:	aa 33       	cpi	r26, 0x3A	; 58
 9c2:	08 f0       	brcs	.+2      	; 0x9c6 <__utoa_common+0x20>
 9c4:	a9 5d       	subi	r26, 0xD9	; 217
 9c6:	a1 93       	st	Z+, r26
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	79 f7       	brne	.-34     	; 0x9aa <__utoa_common+0x4>
 9cc:	b1 11       	cpse	r27, r1
 9ce:	b1 93       	st	Z+, r27
 9d0:	11 92       	st	Z+, r1
 9d2:	cb 01       	movw	r24, r22
 9d4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <strrev>

000009d8 <strrev>:
 9d8:	dc 01       	movw	r26, r24
 9da:	fc 01       	movw	r30, r24
 9dc:	67 2f       	mov	r22, r23
 9de:	71 91       	ld	r23, Z+
 9e0:	77 23       	and	r23, r23
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <strrev+0x4>
 9e4:	32 97       	sbiw	r30, 0x02	; 2
 9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <strrev+0x18>
 9e8:	7c 91       	ld	r23, X
 9ea:	6d 93       	st	X+, r22
 9ec:	70 83       	st	Z, r23
 9ee:	62 91       	ld	r22, -Z
 9f0:	ae 17       	cp	r26, r30
 9f2:	bf 07       	cpc	r27, r31
 9f4:	c8 f3       	brcs	.-14     	; 0x9e8 <strrev+0x10>
 9f6:	08 95       	ret

000009f8 <_exit>:
 9f8:	f8 94       	cli

000009fa <__stop_program>:
 9fa:	ff cf       	rjmp	.-2      	; 0x9fa <__stop_program>
