
Master_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  000009fa  00000a8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000ee  008000ee  00000b1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fd0  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf7  00000000  00000000  00002d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000017c7  00000000  00000000  00003937  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  00005100  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000053cf  00000000  00000000  000055dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012cb  00000000  00000000  0000a9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  0000bc76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001900  00000000  00000000  0000bdfe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_13>
  38:	0c 94 a9 04 	jmp	0x952	; 0x952 <__vector_14>
  3c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3e       	cpi	r26, 0xEE	; 238
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae ee       	ldi	r26, 0xEE	; 238
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3f       	cpi	r26, 0xF7	; 247
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 01 	call	0x204	; 0x204 <main>
  8a:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Function_vGetPassword>:
		global_u8Availability=1;
		return 1;
		}else{
		return 0;
	}
}
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	7b 01       	movw	r14, r22
  9e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
  a2:	c0 e0       	ldi	r28, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	2e c0       	rjmp	.+92     	; 0x106 <Function_vGetPassword+0x74>
  aa:	0e 94 02 02 	call	0x404	; 0x404 <HKPD_u8GetPressedKey>
  ae:	8c 01       	movw	r16, r24
  b0:	6c 2f       	mov	r22, r28
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
  b8:	f8 01       	movw	r30, r16
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	f9 f0       	breq	.+62     	; 0xfe <Function_vGetPassword+0x6c>
  c0:	8d 33       	cpi	r24, 0x3D	; 61
  c2:	e9 f0       	breq	.+58     	; 0xfe <Function_vGetPassword+0x6c>
  c4:	f7 01       	movw	r30, r14
  c6:	ec 0f       	add	r30, r28
  c8:	f1 1d       	adc	r31, r1
  ca:	80 83       	st	Z, r24
  cc:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
  d0:	ff e3       	ldi	r31, 0x3F	; 63
  d2:	2d e0       	ldi	r18, 0x0D	; 13
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	f1 50       	subi	r31, 0x01	; 1
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <Function_vGetPassword+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Function_vGetPassword+0x4e>
  e0:	00 00       	nop
  e2:	6c 2f       	mov	r22, r28
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
  ea:	8a e2       	ldi	r24, 0x2A	; 42
  ec:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
  f0:	cf 5f       	subi	r28, 0xFF	; 255
  f2:	6c 2f       	mov	r22, r28
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
  fa:	f8 01       	movw	r30, r16
  fc:	10 82       	st	Z, r1
  fe:	c5 30       	cpi	r28, 0x05	; 5
 100:	a0 f2       	brcs	.-88     	; 0xaa <Function_vGetPassword+0x18>
 102:	0e 94 02 02 	call	0x404	; 0x404 <HKPD_u8GetPressedKey>
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	8d 33       	cpi	r24, 0x3D	; 61
 10c:	c1 f7       	brne	.-16     	; 0xfe <Function_vGetPassword+0x6c>
 10e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <HLCD_vDisplayClear>
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	ef 90       	pop	r14
 11c:	08 95       	ret

0000011e <Function_vWaitingScreen>:
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2d 97       	sbiw	r28, 0x0d	; 13
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	e0 ed       	ldi	r30, 0xD0	; 208
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <Function_vWaitingScreen+0x1e>
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 152:	6d e0       	ldi	r22, 0x0D	; 13
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
 15a:	2f e9       	ldi	r18, 0x9F	; 159
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <Function_vWaitingScreen+0x42>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Function_vWaitingScreen+0x4c>
 16a:	00 00       	nop
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 172:	6e e0       	ldi	r22, 0x0E	; 14
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
 17a:	2f e9       	ldi	r18, 0x9F	; 159
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <Function_vWaitingScreen+0x62>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Function_vWaitingScreen+0x6c>
 18a:	00 00       	nop
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 192:	6f e0       	ldi	r22, 0x0F	; 15
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
 19a:	2f e9       	ldi	r18, 0x9F	; 159
 19c:	86 e8       	ldi	r24, 0x86	; 134
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <Function_vWaitingScreen+0x82>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <Function_vWaitingScreen+0x8c>
 1aa:	00 00       	nop
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 1b2:	60 e1       	ldi	r22, 0x10	; 16
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
 1ba:	2f e9       	ldi	r18, 0x9F	; 159
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <Function_vWaitingScreen+0xa2>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <Function_vWaitingScreen+0xac>
 1ca:	00 00       	nop
 1cc:	2d 96       	adiw	r28, 0x0d	; 13
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <UART_Transmit_String>:
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	8c 01       	movw	r16, r24
 1e6:	c0 e0       	ldi	r28, 0x00	; 0
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <UART_Transmit_String+0x1a>
 1ea:	f8 01       	movw	r30, r16
 1ec:	ec 0f       	add	r30, r28
 1ee:	f1 1d       	adc	r31, r1
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 67 04 	call	0x8ce	; 0x8ce <MUSART_vTransmit>
 1f6:	cf 5f       	subi	r28, 0xFF	; 255
 1f8:	c5 30       	cpi	r28, 0x05	; 5
 1fa:	b8 f3       	brcs	.-18     	; 0x1ea <UART_Transmit_String+0xc>
 1fc:	cf 91       	pop	r28
 1fe:	1f 91       	pop	r17
 200:	0f 91       	pop	r16
 202:	08 95       	ret

00000204 <main>:
	ERROR,
	OPEN_DOOR,
} SystemStatus;


int main(void) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	ca 57       	subi	r28, 0x7A	; 122
 20e:	d1 09       	sbc	r29, r1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	
	MDIO_vSetPinDirection(PORT_D, 0, INPUT);//RX
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORT_D, 1, OUTPUT);//\TX
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>

	HLCD_vInit();
 22e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <HLCD_vInit>
	HKPD_vInit();
 232:	0e 94 b1 01 	call	0x362	; 0x362 <HKPD_vInit>
	MUSART_vInit(51);
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <MUSART_vInit>
	
	MUSART_vTransmit(MASTER_READY);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 67 04 	call	0x8ce	; 0x8ce <MUSART_vTransmit>
	while (MUSART_u8Receive()!=SLAVE_READY);
 244:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <MUSART_u8Receive>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x40>
	
	u8 local_u8MasterStatus,  local_u8SlaveStatus;
	
	
	u8 local_u8LCDScreens[7][16] ={
 24c:	80 e7       	ldi	r24, 0x70	; 112
 24e:	e0 e6       	ldi	r30, 0x60	; 96
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	de 01       	movw	r26, r28
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	01 90       	ld	r0, Z+
 258:	0d 92       	st	X+, r0
 25a:	8a 95       	dec	r24
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x52>
	};
	

	while (1) {
		
		while(MUSART_u8UnreadDate());
 25e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <MUSART_u8UnreadDate>
 262:	81 11       	cpse	r24, r1
 264:	fc cf       	rjmp	.-8      	; 0x25e <main+0x5a>
		local_u8SlaveStatus = MUSART_u8Receive();
 266:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <MUSART_u8Receive>
		
		if (local_u8SlaveStatus == 0xFF)//create new password
 26a:	8f 3f       	cpi	r24, 0xFF	; 255
 26c:	09 f0       	breq	.+2      	; 0x270 <main+0x6c>
 26e:	57 c0       	rjmp	.+174    	; 0x31e <main+0x11a>
		{
			u8 local_u8EnteredPassword[5], local_u8ReEnteredPassword[5];
			Function_vGetPassword(local_u8LCDScreens[0], local_u8EnteredPassword);
 270:	be 01       	movw	r22, r28
 272:	6a 58       	subi	r22, 0x8A	; 138
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 49 00 	call	0x92	; 0x92 <Function_vGetPassword>
			Function_vGetPassword(local_u8LCDScreens[1], local_u8ReEnteredPassword);
 27e:	be 01       	movw	r22, r28
 280:	6f 58       	subi	r22, 0x8F	; 143
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	ce 01       	movw	r24, r28
 286:	41 96       	adiw	r24, 0x11	; 17
 288:	0e 94 49 00 	call	0x92	; 0x92 <Function_vGetPassword>
			MUSART_vTransmit(CREATE_PASSWORD);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 67 04 	call	0x8ce	; 0x8ce <MUSART_vTransmit>
			while (MUSART_u8Receive()!=IDLE);
 292:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <MUSART_u8Receive>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x8e>
			UART_Transmit_String(local_u8EnteredPassword);
 29a:	ce 01       	movw	r24, r28
 29c:	8a 58       	subi	r24, 0x8A	; 138
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Transmit_String>
			UART_Transmit_String(local_u8ReEnteredPassword);
 2a4:	ce 01       	movw	r24, r28
 2a6:	8f 58       	subi	r24, 0x8F	; 143
 2a8:	9f 4f       	sbci	r25, 0xFF	; 255
 2aa:	0e 94 ef 00 	call	0x1de	; 0x1de <UART_Transmit_String>
			while(!MUSART_u8UnreadDate());
 2ae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <MUSART_u8UnreadDate>
 2b2:	88 23       	and	r24, r24
 2b4:	e1 f3       	breq	.-8      	; 0x2ae <main+0xaa>
			local_u8SlaveStatus = MUSART_u8Receive();
 2b6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <MUSART_u8Receive>
			if (local_u8SlaveStatus == SUCCEEDED)
 2ba:	85 30       	cpi	r24, 0x05	; 5
 2bc:	b1 f4       	brne	.+44     	; 0x2ea <main+0xe6>
			{
				Function_vWaitingScreen();
 2be:	0e 94 8f 00 	call	0x11e	; 0x11e <Function_vWaitingScreen>
				HLCD_vMoveTo(1, 0);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
				HLCD_vSendString(local_u8LCDScreens[3]);
 2ca:	ce 01       	movw	r24, r28
 2cc:	c1 96       	adiw	r24, 0x31	; 49
 2ce:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	2f e7       	ldi	r18, 0x7F	; 127
 2d4:	8a e1       	ldi	r24, 0x1A	; 26
 2d6:	96 e0       	ldi	r25, 0x06	; 6
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xd4>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0xde>
 2e2:	00 00       	nop
				_delay_ms(2000);
				HLCD_vDisplayClear();
 2e4:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <HLCD_vDisplayClear>
 2e8:	ba cf       	rjmp	.-140    	; 0x25e <main+0x5a>
			}
			else if(local_u8SlaveStatus == ERROR)
 2ea:	86 30       	cpi	r24, 0x06	; 6
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <main+0xec>
 2ee:	b7 cf       	rjmp	.-146    	; 0x25e <main+0x5a>
			{
				Function_vWaitingScreen();
 2f0:	0e 94 8f 00 	call	0x11e	; 0x11e <Function_vWaitingScreen>
				HLCD_vMoveTo(1, 0);
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
				HLCD_vSendString(local_u8LCDScreens[4]);
 2fc:	ce 01       	movw	r24, r28
 2fe:	8f 5b       	subi	r24, 0xBF	; 191
 300:	9f 4f       	sbci	r25, 0xFF	; 255
 302:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
 306:	2f e7       	ldi	r18, 0x7F	; 127
 308:	8a e1       	ldi	r24, 0x1A	; 26
 30a:	96 e0       	ldi	r25, 0x06	; 6
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <main+0x108>
 314:	00 c0       	rjmp	.+0      	; 0x316 <main+0x112>
 316:	00 00       	nop
				_delay_ms(2000);
				HLCD_vDisplayClear();
 318:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <HLCD_vDisplayClear>
 31c:	a0 cf       	rjmp	.-192    	; 0x25e <main+0x5a>
			}
			
			
			
		}
		else if (local_u8SlaveStatus == 0x00)// system is already used
 31e:	81 11       	cpse	r24, r1
 320:	9e cf       	rjmp	.-196    	; 0x25e <main+0x5a>
		{
			HLCD_vSendString(local_u8LCDScreens[5]);
 322:	ce 01       	movw	r24, r28
 324:	8f 5a       	subi	r24, 0xAF	; 175
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
			HLCD_vMoveTo(1, 0);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <HLCD_vMoveTo>
			HLCD_vSendString(local_u8LCDScreens[6]);
 334:	ce 01       	movw	r24, r28
 336:	8f 59       	subi	r24, 0x9F	; 159
 338:	9f 4f       	sbci	r25, 0xFF	; 255
 33a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <HLCD_vSendString>
			
			u8 *local_u8Pressedkey = NOT_PRESSED;
			
			while(*local_u8Pressedkey != '1' || *local_u8Pressedkey!= '2'){
				local_u8Pressedkey= HKPD_u8GetPressedKey();
 33e:	0e 94 02 02 	call	0x404	; 0x404 <HKPD_u8GetPressedKey>
 342:	18 2f       	mov	r17, r24
				HLCD_vDisplayClear();
 344:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <HLCD_vDisplayClear>
				HLCD_vSendData(local_u8Pressedkey);
 348:	81 2f       	mov	r24, r17
 34a:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	84 e3       	ldi	r24, 0x34	; 52
 352:	9c e0       	ldi	r25, 0x0C	; 12
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x150>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x15a>
 35e:	00 00       	nop
 360:	ee cf       	rjmp	.-36     	; 0x33e <main+0x13a>

00000362 <HKPD_vInit>:
#include "KPD_Interface.h"

void HKPD_vInit(void)
{
	/* SET Rows pins as input high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW1, LOW);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW2, LOW);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW3, LOW);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW4, LOW);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_ROW1, HIGH);
 38a:	41 e0       	ldi	r20, 0x01	; 1
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	82 e0       	ldi	r24, 0x02	; 2
 390:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW2, HIGH);
 394:	41 e0       	ldi	r20, 0x01	; 1
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW3, HIGH);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW4, HIGH);
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	63 e0       	ldi	r22, 0x03	; 3
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>

	/* SET Columns pins as output high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL1, HIGH);
 3b2:	41 e0       	ldi	r20, 0x01	; 1
 3b4:	64 e0       	ldi	r22, 0x04	; 4
 3b6:	82 e0       	ldi	r24, 0x02	; 2
 3b8:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL2, HIGH);
 3bc:	41 e0       	ldi	r20, 0x01	; 1
 3be:	65 e0       	ldi	r22, 0x05	; 5
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL3, HIGH);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	66 e0       	ldi	r22, 0x06	; 6
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL4, HIGH);
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	67 e0       	ldi	r22, 0x07	; 7
 3d4:	82 e0       	ldi	r24, 0x02	; 2
 3d6:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_COL1, HIGH);
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	64 e0       	ldi	r22, 0x04	; 4
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL2, HIGH);
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	65 e0       	ldi	r22, 0x05	; 5
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL3, HIGH);
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	66 e0       	ldi	r22, 0x06	; 6
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL4, HIGH);
 3f8:	41 e0       	ldi	r20, 0x01	; 1
 3fa:	67 e0       	ldi	r22, 0x07	; 7
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 402:	08 95       	ret

00000404 <HKPD_u8GetPressedKey>:
}
u8 *HKPD_u8GetPressedKey(void)
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 408:	d4 e0       	ldi	r29, 0x04	; 4
 40a:	3b c0       	rjmp	.+118    	; 0x482 <HKPD_u8GetPressedKey+0x7e>

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
 40c:	40 e0       	ldi	r20, 0x00	; 0
 40e:	6d 2f       	mov	r22, r29
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 416:	81 ee       	ldi	r24, 0xE1	; 225
 418:	94 e0       	ldi	r25, 0x04	; 4
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <HKPD_u8GetPressedKey+0x16>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <HKPD_u8GetPressedKey+0x1c>
 420:	00 00       	nop
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	26 c0       	rjmp	.+76     	; 0x472 <HKPD_u8GetPressedKey+0x6e>
        {
            local_u8Status = MDIO_u8GetPinValue(KPD_PORT, local_u8Rows);
 426:	6c 2f       	mov	r22, r28
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	0e 94 02 04 	call	0x804	; 0x804 <MDIO_u8GetPinValue>

            if (local_u8Status == 0)
 42e:	81 11       	cpse	r24, r1
 430:	1f c0       	rjmp	.+62     	; 0x470 <HKPD_u8GetPressedKey+0x6c>
            {
                local_u8Value = KPD_Buttions[local_u8Rows - KPD_ROW1][local_u8Columns - KPD_COL1]; // Adjusted array indexing
 432:	8c 2f       	mov	r24, r28
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	2d 2f       	mov	r18, r29
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	24 50       	subi	r18, 0x04	; 4
 43c:	31 09       	sbc	r19, r1
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	83 52       	subi	r24, 0x23	; 35
 448:	9f 4f       	sbci	r25, 0xFF	; 255
 44a:	fc 01       	movw	r30, r24
 44c:	e2 0f       	add	r30, r18
 44e:	f3 1f       	adc	r31, r19
 450:	80 81       	ld	r24, Z
 452:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__data_end>

                // Wait for key release
                while (MDIO_u8GetPinValue(KPD_PORT, local_u8Rows) == LOW)
 456:	06 c0       	rjmp	.+12     	; 0x464 <HKPD_u8GetPressedKey+0x60>
 458:	81 ee       	ldi	r24, 0xE1	; 225
 45a:	94 e0       	ldi	r25, 0x04	; 4
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <HKPD_u8GetPressedKey+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <HKPD_u8GetPressedKey+0x5e>
 462:	00 00       	nop
 464:	6c 2f       	mov	r22, r28
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 02 04 	call	0x804	; 0x804 <MDIO_u8GetPinValue>
 46c:	88 23       	and	r24, r24
 46e:	a1 f3       	breq	.-24     	; 0x458 <HKPD_u8GetPressedKey+0x54>
    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 470:	cf 5f       	subi	r28, 0xFF	; 255
 472:	c4 30       	cpi	r28, 0x04	; 4
 474:	c0 f2       	brcs	.-80     	; 0x426 <HKPD_u8GetPressedKey+0x22>
                {
                    _delay_ms(5); // Adjusted delay for debounce
                }
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
 476:	41 e0       	ldi	r20, 0x01	; 1
 478:	6d 2f       	mov	r22, r29
 47a:	82 e0       	ldi	r24, 0x02	; 2
 47c:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
u8 *HKPD_u8GetPressedKey(void)
{
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 480:	df 5f       	subi	r29, 0xFF	; 255
 482:	d8 30       	cpi	r29, 0x08	; 8
 484:	18 f2       	brcs	.-122    	; 0x40c <HKPD_u8GetPressedKey+0x8>
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
    }
    return &local_u8Value; // Return value of static variable
}
 486:	8e ee       	ldi	r24, 0xEE	; 238
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <HLCD_vSendCommand>:
 * @brief Send a command to the LCD.
 *
 * @param A_u8Command: Command to be sent.
 */
void HLCD_vSendCommand(u8 A_u8Command)
{
 490:	cf 93       	push	r28
 492:	c8 2f       	mov	r28, r24
    // Set RS to 0 (Command Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, LOW);
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 49e:	40 e0       	ldi	r20, 0x00	; 0
 4a0:	61 e0       	ldi	r22, 0x01	; 1
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>

    // Send command on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Command);
 4a8:	6c 2f       	mov	r22, r28
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 4b0:	41 e0       	ldi	r20, 0x01	; 1
 4b2:	62 e0       	ldi	r22, 0x02	; 2
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 4ba:	89 ef       	ldi	r24, 0xF9	; 249
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	01 97       	sbiw	r24, 0x01	; 1
 4c0:	f1 f7       	brne	.-4      	; 0x4be <HLCD_vSendCommand+0x2e>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <HLCD_vSendCommand+0x34>
 4c4:	00 00       	nop
    _delay_ms(1);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 4c6:	40 e0       	ldi	r20, 0x00	; 0
 4c8:	62 e0       	ldi	r22, 0x02	; 2
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 4d0:	89 ef       	ldi	r24, 0xF9	; 249
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <HLCD_vSendCommand+0x44>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <HLCD_vSendCommand+0x4a>
 4da:	00 00       	nop
    _delay_ms(1);
}
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <HLCD_vInit>:
 * @brief Initialize the LCD module.
 */
void HLCD_vInit(void)
{
    // Set control pins direction as OUTPUT
    MDIO_vSetPinDirection(CONTROL_PORT, RS, OUTPUT);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	60 e0       	ldi	r22, 0x00	; 0
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, RW, OUTPUT);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, EN, OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	62 e0       	ldi	r22, 0x02	; 2
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	0e 94 02 03 	call	0x604	; 0x604 <MDIO_vSetPinDirection>

    // Set data port direction as OUTPUT (all pins)
    MDIO_vSetPortDirection(DATA_PORT, 0xFF);
 4fe:	6f ef       	ldi	r22, 0xFF	; 255
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 72 03 	call	0x6e4	; 0x6e4 <MDIO_vSetPortDirection>
 506:	8f e0       	ldi	r24, 0x0F	; 15
 508:	97 e2       	ldi	r25, 0x27	; 39
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <HLCD_vInit+0x2a>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <HLCD_vInit+0x30>
 510:	00 00       	nop

    // Wait for LCD to power up
    _delay_ms(40);

    // Send LCD initialization commands
    HLCD_vSendCommand(FUNCTION_SET);
 512:	88 e3       	ldi	r24, 0x38	; 56
 514:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 518:	89 ef       	ldi	r24, 0xF9	; 249
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <HLCD_vInit+0x3c>
 520:	00 c0       	rjmp	.+0      	; 0x522 <HLCD_vInit+0x42>
 522:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_ON_OFF);
 524:	8f e0       	ldi	r24, 0x0F	; 15
 526:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 52a:	89 ef       	ldi	r24, 0xF9	; 249
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	01 97       	sbiw	r24, 0x01	; 1
 530:	f1 f7       	brne	.-4      	; 0x52e <HLCD_vInit+0x4e>
 532:	00 c0       	rjmp	.+0      	; 0x534 <HLCD_vInit+0x54>
 534:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_CLEAR);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 53c:	8d ee       	ldi	r24, 0xED	; 237
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <HLCD_vInit+0x60>
 544:	00 c0       	rjmp	.+0      	; 0x546 <HLCD_vInit+0x66>
 546:	00 00       	nop
    _delay_ms(3);
    HLCD_vSendCommand(ENTRY_MODE_SET);
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 54e:	8d ee       	ldi	r24, 0xED	; 237
 550:	92 e0       	ldi	r25, 0x02	; 2
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <HLCD_vInit+0x72>
 556:	00 c0       	rjmp	.+0      	; 0x558 <HLCD_vInit+0x78>
 558:	00 00       	nop
 55a:	08 95       	ret

0000055c <HLCD_vSendData>:
 * @brief Send data (character) to the LCD.
 *
 * @param A_u8Data: Data (character) to be sent.
 */
void HLCD_vSendData(u8 A_u8Data)
{
 55c:	cf 93       	push	r28
 55e:	c8 2f       	mov	r28, r24
    // Set RS to 1 (Data Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, HIGH);
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	60 e0       	ldi	r22, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>

    // Send data on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Data);
 574:	6c 2f       	mov	r22, r28
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 57c:	41 e0       	ldi	r20, 0x01	; 1
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 586:	81 ee       	ldi	r24, 0xE1	; 225
 588:	94 e0       	ldi	r25, 0x04	; 4
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <HLCD_vSendData+0x2e>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <HLCD_vSendData+0x34>
 590:	00 00       	nop
    _delay_ms(5);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 592:	40 e0       	ldi	r20, 0x00	; 0
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 82 03 	call	0x704	; 0x704 <MDIO_vSetPinValue>
 59c:	81 ee       	ldi	r24, 0xE1	; 225
 59e:	94 e0       	ldi	r25, 0x04	; 4
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <HLCD_vSendData+0x44>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <HLCD_vSendData+0x4a>
 5a6:	00 00       	nop
    _delay_ms(5);
}
 5a8:	cf 91       	pop	r28
 5aa:	08 95       	ret

000005ac <HLCD_vSendString>:
 * @brief Send a string to display on the LCD.
 *
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
 5ac:	0f 93       	push	r16
 5ae:	1f 93       	push	r17
 5b0:	cf 93       	push	r28
 5b2:	8c 01       	movw	r16, r24
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 5b4:	c0 e0       	ldi	r28, 0x00	; 0
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <HLCD_vSendString+0x12>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
 5b8:	0e 94 ae 02 	call	0x55c	; 0x55c <HLCD_vSendData>
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 5bc:	cf 5f       	subi	r28, 0xFF	; 255
 5be:	f8 01       	movw	r30, r16
 5c0:	ec 0f       	add	r30, r28
 5c2:	f1 1d       	adc	r31, r1
 5c4:	80 81       	ld	r24, Z
 5c6:	81 11       	cpse	r24, r1
 5c8:	f7 cf       	rjmp	.-18     	; 0x5b8 <HLCD_vSendString+0xc>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
    }
}
 5ca:	cf 91       	pop	r28
 5cc:	1f 91       	pop	r17
 5ce:	0f 91       	pop	r16
 5d0:	08 95       	ret

000005d2 <HLCD_vMoveTo>:
 * @param A_u8Col: Column number (0 to 15).
 */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col)
{
    // Calculate cursor position based on row and column
    switch (A_u8Row)
 5d2:	88 23       	and	r24, r24
 5d4:	19 f0       	breq	.+6      	; 0x5dc <HLCD_vMoveTo+0xa>
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	31 f0       	breq	.+12     	; 0x5e6 <HLCD_vMoveTo+0x14>
 5da:	08 95       	ret
    {
        case 0:
            HLCD_vSendCommand(A_u8Col + 128); // Move to 1st row
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	86 0f       	add	r24, r22
 5e0:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
            break;
 5e4:	08 95       	ret
        case 1:
            HLCD_vSendCommand(A_u8Col + 192); // Move to 2nd row
 5e6:	80 ec       	ldi	r24, 0xC0	; 192
 5e8:	86 0f       	add	r24, r22
 5ea:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 5ee:	08 95       	ret

000005f0 <HLCD_vDisplayClear>:
 * @brief Clear the display of the LCD.
 */
void HLCD_vDisplayClear(void)
{
    // Send clear display command
    HLCD_vSendCommand(DISPLAY_CLEAR);
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 48 02 	call	0x490	; 0x490 <HLCD_vSendCommand>
 5f6:	89 ef       	ldi	r24, 0xF9	; 249
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <HLCD_vDisplayClear+0xa>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <HLCD_vDisplayClear+0x10>
 600:	00 00       	nop
 602:	08 95       	ret

00000604 <MDIO_vSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Config.h"

void MDIO_vSetPinDirection(u8 A_u8PortNumber,u8 A_u8PinNumber, u8 A_u8Dir )
{
	if(A_u8Dir == INPUT)
 604:	41 11       	cpse	r20, r1
 606:	38 c0       	rjmp	.+112    	; 0x678 <MDIO_vSetPinDirection+0x74>
	{
		switch (A_u8PortNumber)
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	91 f0       	breq	.+36     	; 0x630 <MDIO_vSetPinDirection+0x2c>
 60c:	28 f0       	brcs	.+10     	; 0x618 <MDIO_vSetPinDirection+0x14>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	d9 f0       	breq	.+54     	; 0x648 <MDIO_vSetPinDirection+0x44>
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	29 f1       	breq	.+74     	; 0x660 <MDIO_vSetPinDirection+0x5c>
 616:	08 95       	ret
		{
		case PORT_A: CLR_BIT(DDRA, A_u8PinNumber); break;
 618:	2a b3       	in	r18, 0x1a	; 26
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <MDIO_vSetPinDirection+0x20>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <MDIO_vSetPinDirection+0x1c>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	8a bb       	out	0x1a, r24	; 26
 62e:	08 95       	ret
		case PORT_B: CLR_BIT(DDRB, A_u8PinNumber); break;
 630:	27 b3       	in	r18, 0x17	; 23
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <MDIO_vSetPinDirection+0x38>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	6a 95       	dec	r22
 63e:	e2 f7       	brpl	.-8      	; 0x638 <MDIO_vSetPinDirection+0x34>
 640:	80 95       	com	r24
 642:	82 23       	and	r24, r18
 644:	87 bb       	out	0x17, r24	; 23
 646:	08 95       	ret
		case PORT_C: CLR_BIT(DDRC, A_u8PinNumber); break;
 648:	24 b3       	in	r18, 0x14	; 20
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <MDIO_vSetPinDirection+0x50>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <MDIO_vSetPinDirection+0x4c>
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	84 bb       	out	0x14, r24	; 20
 65e:	08 95       	ret
		case PORT_D: CLR_BIT(DDRD, A_u8PinNumber); break;
 660:	21 b3       	in	r18, 0x11	; 17
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <MDIO_vSetPinDirection+0x68>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <MDIO_vSetPinDirection+0x64>
 670:	80 95       	com	r24
 672:	82 23       	and	r24, r18
 674:	81 bb       	out	0x11, r24	; 17
 676:	08 95       	ret
		}
	}else if (A_u8Dir == OUTPUT)
 678:	41 30       	cpi	r20, 0x01	; 1
 67a:	99 f5       	brne	.+102    	; 0x6e2 <MDIO_vSetPinDirection+0xde>
	{
		switch (A_u8PortNumber)
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	89 f0       	breq	.+34     	; 0x6a2 <MDIO_vSetPinDirection+0x9e>
 680:	28 f0       	brcs	.+10     	; 0x68c <MDIO_vSetPinDirection+0x88>
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	c9 f0       	breq	.+50     	; 0x6b8 <MDIO_vSetPinDirection+0xb4>
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	11 f1       	breq	.+68     	; 0x6ce <MDIO_vSetPinDirection+0xca>
 68a:	08 95       	ret
		{
		case PORT_A: SET_BIT(DDRA, A_u8PinNumber); break;
 68c:	2a b3       	in	r18, 0x1a	; 26
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <MDIO_vSetPinDirection+0x94>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <MDIO_vSetPinDirection+0x90>
 69c:	82 2b       	or	r24, r18
 69e:	8a bb       	out	0x1a, r24	; 26
 6a0:	08 95       	ret
		case PORT_B: SET_BIT(DDRB, A_u8PinNumber); break;
 6a2:	27 b3       	in	r18, 0x17	; 23
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <MDIO_vSetPinDirection+0xaa>
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	6a 95       	dec	r22
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <MDIO_vSetPinDirection+0xa6>
 6b2:	82 2b       	or	r24, r18
 6b4:	87 bb       	out	0x17, r24	; 23
 6b6:	08 95       	ret
		case PORT_C: SET_BIT(DDRC, A_u8PinNumber); break;
 6b8:	24 b3       	in	r18, 0x14	; 20
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <MDIO_vSetPinDirection+0xc0>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	6a 95       	dec	r22
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <MDIO_vSetPinDirection+0xbc>
 6c8:	82 2b       	or	r24, r18
 6ca:	84 bb       	out	0x14, r24	; 20
 6cc:	08 95       	ret
		case PORT_D: SET_BIT(DDRD, A_u8PinNumber); break;
 6ce:	21 b3       	in	r18, 0x11	; 17
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <MDIO_vSetPinDirection+0xd6>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	6a 95       	dec	r22
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <MDIO_vSetPinDirection+0xd2>
 6de:	82 2b       	or	r24, r18
 6e0:	81 bb       	out	0x11, r24	; 17
 6e2:	08 95       	ret

000006e4 <MDIO_vSetPortDirection>:
		//Do Nothing.
	}
}

void MDIO_vSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir){
	switch (A_u8PortNumber){
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	41 f0       	breq	.+16     	; 0x6f8 <MDIO_vSetPortDirection+0x14>
 6e8:	28 f0       	brcs	.+10     	; 0x6f4 <MDIO_vSetPortDirection+0x10>
 6ea:	82 30       	cpi	r24, 0x02	; 2
 6ec:	39 f0       	breq	.+14     	; 0x6fc <MDIO_vSetPortDirection+0x18>
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	39 f0       	breq	.+14     	; 0x700 <MDIO_vSetPortDirection+0x1c>
 6f2:	08 95       	ret
	case PORT_A: DDRA = A_u8Dir; break;
 6f4:	6a bb       	out	0x1a, r22	; 26
 6f6:	08 95       	ret
	case PORT_B: DDRB = A_u8Dir; break;
 6f8:	67 bb       	out	0x17, r22	; 23
 6fa:	08 95       	ret
	case PORT_C: DDRC = A_u8Dir; break;
 6fc:	64 bb       	out	0x14, r22	; 20
 6fe:	08 95       	ret
	case PORT_D: DDRD = A_u8Dir; break;
 700:	61 bb       	out	0x11, r22	; 17
 702:	08 95       	ret

00000704 <MDIO_vSetPinValue>:
	}
}

void MDIO_vSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Value)
{
	if(A_u8Value == HIGH)
 704:	41 30       	cpi	r20, 0x01	; 1
 706:	a1 f5       	brne	.+104    	; 0x770 <MDIO_vSetPinValue+0x6c>
	{
		switch (A_u8PortNumber)
 708:	81 30       	cpi	r24, 0x01	; 1
 70a:	89 f0       	breq	.+34     	; 0x72e <MDIO_vSetPinValue+0x2a>
 70c:	28 f0       	brcs	.+10     	; 0x718 <MDIO_vSetPinValue+0x14>
 70e:	82 30       	cpi	r24, 0x02	; 2
 710:	c9 f0       	breq	.+50     	; 0x744 <MDIO_vSetPinValue+0x40>
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	11 f1       	breq	.+68     	; 0x75a <MDIO_vSetPinValue+0x56>
 716:	08 95       	ret
		{
		case PORT_A: SET_BIT(PORTA, A_u8PinNumber); break;
 718:	2b b3       	in	r18, 0x1b	; 27
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	02 c0       	rjmp	.+4      	; 0x724 <MDIO_vSetPinValue+0x20>
 720:	88 0f       	add	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	6a 95       	dec	r22
 726:	e2 f7       	brpl	.-8      	; 0x720 <MDIO_vSetPinValue+0x1c>
 728:	82 2b       	or	r24, r18
 72a:	8b bb       	out	0x1b, r24	; 27
 72c:	08 95       	ret
		case PORT_B: SET_BIT(PORTB, A_u8PinNumber); break;
 72e:	28 b3       	in	r18, 0x18	; 24
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	02 c0       	rjmp	.+4      	; 0x73a <MDIO_vSetPinValue+0x36>
 736:	88 0f       	add	r24, r24
 738:	99 1f       	adc	r25, r25
 73a:	6a 95       	dec	r22
 73c:	e2 f7       	brpl	.-8      	; 0x736 <MDIO_vSetPinValue+0x32>
 73e:	82 2b       	or	r24, r18
 740:	88 bb       	out	0x18, r24	; 24
 742:	08 95       	ret
		case PORT_C: SET_BIT(PORTC, A_u8PinNumber); break;
 744:	25 b3       	in	r18, 0x15	; 21
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	02 c0       	rjmp	.+4      	; 0x750 <MDIO_vSetPinValue+0x4c>
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	6a 95       	dec	r22
 752:	e2 f7       	brpl	.-8      	; 0x74c <MDIO_vSetPinValue+0x48>
 754:	82 2b       	or	r24, r18
 756:	85 bb       	out	0x15, r24	; 21
 758:	08 95       	ret
		case PORT_D: SET_BIT(PORTD, A_u8PinNumber); break;
 75a:	22 b3       	in	r18, 0x12	; 18
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	02 c0       	rjmp	.+4      	; 0x766 <MDIO_vSetPinValue+0x62>
 762:	88 0f       	add	r24, r24
 764:	99 1f       	adc	r25, r25
 766:	6a 95       	dec	r22
 768:	e2 f7       	brpl	.-8      	; 0x762 <MDIO_vSetPinValue+0x5e>
 76a:	82 2b       	or	r24, r18
 76c:	82 bb       	out	0x12, r24	; 18
 76e:	08 95       	ret
		}
	}else if (A_u8Value == LOW)
 770:	41 11       	cpse	r20, r1
 772:	37 c0       	rjmp	.+110    	; 0x7e2 <MDIO_vSetPinValue+0xde>
	{
		switch (A_u8PortNumber)
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	91 f0       	breq	.+36     	; 0x79c <MDIO_vSetPinValue+0x98>
 778:	28 f0       	brcs	.+10     	; 0x784 <MDIO_vSetPinValue+0x80>
 77a:	82 30       	cpi	r24, 0x02	; 2
 77c:	d9 f0       	breq	.+54     	; 0x7b4 <MDIO_vSetPinValue+0xb0>
 77e:	83 30       	cpi	r24, 0x03	; 3
 780:	29 f1       	breq	.+74     	; 0x7cc <MDIO_vSetPinValue+0xc8>
 782:	08 95       	ret
		{
		case PORT_A: CLR_BIT(PORTA, A_u8PinNumber); break;
 784:	2b b3       	in	r18, 0x1b	; 27
 786:	81 e0       	ldi	r24, 0x01	; 1
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <MDIO_vSetPinValue+0x8c>
 78c:	88 0f       	add	r24, r24
 78e:	99 1f       	adc	r25, r25
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <MDIO_vSetPinValue+0x88>
 794:	80 95       	com	r24
 796:	82 23       	and	r24, r18
 798:	8b bb       	out	0x1b, r24	; 27
 79a:	08 95       	ret
		case PORT_B: CLR_BIT(PORTB, A_u8PinNumber); break;
 79c:	28 b3       	in	r18, 0x18	; 24
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <MDIO_vSetPinValue+0xa4>
 7a4:	88 0f       	add	r24, r24
 7a6:	99 1f       	adc	r25, r25
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <MDIO_vSetPinValue+0xa0>
 7ac:	80 95       	com	r24
 7ae:	82 23       	and	r24, r18
 7b0:	88 bb       	out	0x18, r24	; 24
 7b2:	08 95       	ret
		case PORT_C: CLR_BIT(PORTC, A_u8PinNumber); break;
 7b4:	25 b3       	in	r18, 0x15	; 21
 7b6:	81 e0       	ldi	r24, 0x01	; 1
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <MDIO_vSetPinValue+0xbc>
 7bc:	88 0f       	add	r24, r24
 7be:	99 1f       	adc	r25, r25
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <MDIO_vSetPinValue+0xb8>
 7c4:	80 95       	com	r24
 7c6:	82 23       	and	r24, r18
 7c8:	85 bb       	out	0x15, r24	; 21
 7ca:	08 95       	ret
		case PORT_D: CLR_BIT(PORTD, A_u8PinNumber); break;
 7cc:	22 b3       	in	r18, 0x12	; 18
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <MDIO_vSetPinValue+0xd4>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <MDIO_vSetPinValue+0xd0>
 7dc:	80 95       	com	r24
 7de:	82 23       	and	r24, r18
 7e0:	82 bb       	out	0x12, r24	; 18
 7e2:	08 95       	ret

000007e4 <MDIO_vSetPortValue>:
		//DO Nothing
	}
}

void MDIO_vSetPortValue(u8 A_u8PortNumber, u8 A_u8Value){
	switch (A_u8PortNumber){
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	41 f0       	breq	.+16     	; 0x7f8 <MDIO_vSetPortValue+0x14>
 7e8:	28 f0       	brcs	.+10     	; 0x7f4 <MDIO_vSetPortValue+0x10>
 7ea:	82 30       	cpi	r24, 0x02	; 2
 7ec:	39 f0       	breq	.+14     	; 0x7fc <MDIO_vSetPortValue+0x18>
 7ee:	83 30       	cpi	r24, 0x03	; 3
 7f0:	39 f0       	breq	.+14     	; 0x800 <__DATA_REGION_LENGTH__>
 7f2:	08 95       	ret
	case PORT_A: PORTA = A_u8Value; break;
 7f4:	6b bb       	out	0x1b, r22	; 27
 7f6:	08 95       	ret
	case PORT_B: PORTB = A_u8Value; break;
 7f8:	68 bb       	out	0x18, r22	; 24
 7fa:	08 95       	ret
	case PORT_C: PORTC = A_u8Value; break;
 7fc:	65 bb       	out	0x15, r22	; 21
 7fe:	08 95       	ret
	case PORT_D: PORTD = A_u8Value; break;
 800:	62 bb       	out	0x12, r22	; 18
 802:	08 95       	ret

00000804 <MDIO_u8GetPinValue>:
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
	switch (A_u8PortNumber){
 804:	81 30       	cpi	r24, 0x01	; 1
 806:	79 f0       	breq	.+30     	; 0x826 <MDIO_u8GetPinValue+0x22>
 808:	28 f0       	brcs	.+10     	; 0x814 <MDIO_u8GetPinValue+0x10>
 80a:	82 30       	cpi	r24, 0x02	; 2
 80c:	a9 f0       	breq	.+42     	; 0x838 <MDIO_u8GetPinValue+0x34>
 80e:	83 30       	cpi	r24, 0x03	; 3
 810:	e1 f0       	breq	.+56     	; 0x84a <MDIO_u8GetPinValue+0x46>
 812:	24 c0       	rjmp	.+72     	; 0x85c <MDIO_u8GetPinValue+0x58>
		case PORT_A: Local_u8PinValue = GET_BIT(PINA, A_u8PinNumber); break;
 814:	89 b3       	in	r24, 0x19	; 25
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <MDIO_u8GetPinValue+0x1a>
 81a:	95 95       	asr	r25
 81c:	87 95       	ror	r24
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <MDIO_u8GetPinValue+0x16>
 822:	81 70       	andi	r24, 0x01	; 1
 824:	08 95       	ret
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
 826:	86 b3       	in	r24, 0x16	; 22
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <MDIO_u8GetPinValue+0x2c>
 82c:	95 95       	asr	r25
 82e:	87 95       	ror	r24
 830:	6a 95       	dec	r22
 832:	e2 f7       	brpl	.-8      	; 0x82c <MDIO_u8GetPinValue+0x28>
 834:	81 70       	andi	r24, 0x01	; 1
 836:	08 95       	ret
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
 838:	83 b3       	in	r24, 0x13	; 19
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <MDIO_u8GetPinValue+0x3e>
 83e:	95 95       	asr	r25
 840:	87 95       	ror	r24
 842:	6a 95       	dec	r22
 844:	e2 f7       	brpl	.-8      	; 0x83e <MDIO_u8GetPinValue+0x3a>
 846:	81 70       	andi	r24, 0x01	; 1
 848:	08 95       	ret
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
 84a:	80 b3       	in	r24, 0x10	; 16
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	02 c0       	rjmp	.+4      	; 0x854 <MDIO_u8GetPinValue+0x50>
 850:	95 95       	asr	r25
 852:	87 95       	ror	r24
 854:	6a 95       	dec	r22
 856:	e2 f7       	brpl	.-8      	; 0x850 <MDIO_u8GetPinValue+0x4c>
 858:	81 70       	andi	r24, 0x01	; 1
 85a:	08 95       	ret
	}
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
 85c:	82 e3       	ldi	r24, 0x32	; 50
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
		}
	return Local_u8PinValue;
}
 85e:	08 95       	ret

00000860 <__vector_17>:
	if (ptr_to_fun != NULL) {
		EEPROM_Call_Back = ptr_to_fun;
	}
}

void __vector_17(void) {
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
	if (EEPROM_Call_Back != NULL)
 882:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <EEPROM_Call_Back>
 886:	f0 91 f0 00 	lds	r31, 0x00F0	; 0x8000f0 <EEPROM_Call_Back+0x1>
 88a:	30 97       	sbiw	r30, 0x00	; 0
 88c:	09 f0       	breq	.+2      	; 0x890 <__vector_17+0x30>
		EEPROM_Call_Back();
 88e:	09 95       	icall
}
 890:	ff 91       	pop	r31
 892:	ef 91       	pop	r30
 894:	bf 91       	pop	r27
 896:	af 91       	pop	r26
 898:	9f 91       	pop	r25
 89a:	8f 91       	pop	r24
 89c:	7f 91       	pop	r23
 89e:	6f 91       	pop	r22
 8a0:	5f 91       	pop	r21
 8a2:	4f 91       	pop	r20
 8a4:	3f 91       	pop	r19
 8a6:	2f 91       	pop	r18
 8a8:	0f 90       	pop	r0
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	0f 90       	pop	r0
 8ae:	1f 90       	pop	r1
 8b0:	18 95       	reti

000008b2 <MUSART_vInit>:
		USART_TXC_Call_Back = CallBack;
	}
}
void MUSART_vSetUDRECallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		USART_UDRE_Call_Back = CallBack;
 8b2:	89 b9       	out	0x09, r24	; 9
 8b4:	90 bd       	out	0x20, r25	; 32
 8b6:	8a b1       	in	r24, 0x0a	; 10
 8b8:	8b 7f       	andi	r24, 0xFB	; 251
 8ba:	8a b9       	out	0x0a, r24	; 10
 8bc:	86 e8       	ldi	r24, 0x86	; 134
 8be:	80 bd       	out	0x20, r24	; 32
 8c0:	8a b1       	in	r24, 0x0a	; 10
 8c2:	80 61       	ori	r24, 0x10	; 16
 8c4:	8a b9       	out	0x0a, r24	; 10
 8c6:	8a b1       	in	r24, 0x0a	; 10
 8c8:	88 60       	ori	r24, 0x08	; 8
 8ca:	8a b9       	out	0x0a, r24	; 10
 8cc:	08 95       	ret

000008ce <MUSART_vTransmit>:
 8ce:	5d 9b       	sbis	0x0b, 5	; 11
 8d0:	fe cf       	rjmp	.-4      	; 0x8ce <MUSART_vTransmit>
 8d2:	8c b9       	out	0x0c, r24	; 12
 8d4:	08 95       	ret

000008d6 <MUSART_u8Receive>:
 8d6:	5f 9b       	sbis	0x0b, 7	; 11
 8d8:	fe cf       	rjmp	.-4      	; 0x8d6 <MUSART_u8Receive>
 8da:	5c 99       	sbic	0x0b, 4	; 11
 8dc:	06 c0       	rjmp	.+12     	; 0x8ea <MUSART_u8Receive+0x14>
 8de:	5b 99       	sbic	0x0b, 3	; 11
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <MUSART_u8Receive+0x18>
 8e2:	5a 99       	sbic	0x0b, 2	; 11
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <MUSART_u8Receive+0x1c>
 8e6:	8c b1       	in	r24, 0x0c	; 12
 8e8:	08 95       	ret
 8ea:	8f ef       	ldi	r24, 0xFF	; 255
 8ec:	08 95       	ret
 8ee:	8f ef       	ldi	r24, 0xFF	; 255
 8f0:	08 95       	ret
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	08 95       	ret

000008f6 <MUSART_u8UnreadDate>:
 8f6:	8b b1       	in	r24, 0x0b	; 11
 8f8:	88 1f       	adc	r24, r24
 8fa:	88 27       	eor	r24, r24
 8fc:	88 1f       	adc	r24, r24
 8fe:	08 95       	ret

00000900 <__vector_13>:
	}
}

void __vector_13(void) {
 900:	1f 92       	push	r1
 902:	0f 92       	push	r0
 904:	0f b6       	in	r0, 0x3f	; 63
 906:	0f 92       	push	r0
 908:	11 24       	eor	r1, r1
 90a:	2f 93       	push	r18
 90c:	3f 93       	push	r19
 90e:	4f 93       	push	r20
 910:	5f 93       	push	r21
 912:	6f 93       	push	r22
 914:	7f 93       	push	r23
 916:	8f 93       	push	r24
 918:	9f 93       	push	r25
 91a:	af 93       	push	r26
 91c:	bf 93       	push	r27
 91e:	ef 93       	push	r30
 920:	ff 93       	push	r31
	if (USART_RXC_Call_Back != NULL)
 922:	e0 91 f5 00 	lds	r30, 0x00F5	; 0x8000f5 <USART_RXC_Call_Back>
 926:	f0 91 f6 00 	lds	r31, 0x00F6	; 0x8000f6 <USART_RXC_Call_Back+0x1>
 92a:	30 97       	sbiw	r30, 0x00	; 0
 92c:	09 f0       	breq	.+2      	; 0x930 <__vector_13+0x30>
		USART_RXC_Call_Back();
 92e:	09 95       	icall
}
 930:	ff 91       	pop	r31
 932:	ef 91       	pop	r30
 934:	bf 91       	pop	r27
 936:	af 91       	pop	r26
 938:	9f 91       	pop	r25
 93a:	8f 91       	pop	r24
 93c:	7f 91       	pop	r23
 93e:	6f 91       	pop	r22
 940:	5f 91       	pop	r21
 942:	4f 91       	pop	r20
 944:	3f 91       	pop	r19
 946:	2f 91       	pop	r18
 948:	0f 90       	pop	r0
 94a:	0f be       	out	0x3f, r0	; 63
 94c:	0f 90       	pop	r0
 94e:	1f 90       	pop	r1
 950:	18 95       	reti

00000952 <__vector_14>:

void __vector_14(void) {
 952:	1f 92       	push	r1
 954:	0f 92       	push	r0
 956:	0f b6       	in	r0, 0x3f	; 63
 958:	0f 92       	push	r0
 95a:	11 24       	eor	r1, r1
 95c:	2f 93       	push	r18
 95e:	3f 93       	push	r19
 960:	4f 93       	push	r20
 962:	5f 93       	push	r21
 964:	6f 93       	push	r22
 966:	7f 93       	push	r23
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	af 93       	push	r26
 96e:	bf 93       	push	r27
 970:	ef 93       	push	r30
 972:	ff 93       	push	r31
	if (USART_UDRE_Call_Back != NULL)
 974:	e0 91 f1 00 	lds	r30, 0x00F1	; 0x8000f1 <USART_UDRE_Call_Back>
 978:	f0 91 f2 00 	lds	r31, 0x00F2	; 0x8000f2 <USART_UDRE_Call_Back+0x1>
 97c:	30 97       	sbiw	r30, 0x00	; 0
 97e:	09 f0       	breq	.+2      	; 0x982 <__vector_14+0x30>
		USART_UDRE_Call_Back();
 980:	09 95       	icall
}
 982:	ff 91       	pop	r31
 984:	ef 91       	pop	r30
 986:	bf 91       	pop	r27
 988:	af 91       	pop	r26
 98a:	9f 91       	pop	r25
 98c:	8f 91       	pop	r24
 98e:	7f 91       	pop	r23
 990:	6f 91       	pop	r22
 992:	5f 91       	pop	r21
 994:	4f 91       	pop	r20
 996:	3f 91       	pop	r19
 998:	2f 91       	pop	r18
 99a:	0f 90       	pop	r0
 99c:	0f be       	out	0x3f, r0	; 63
 99e:	0f 90       	pop	r0
 9a0:	1f 90       	pop	r1
 9a2:	18 95       	reti

000009a4 <__vector_15>:

void __vector_15(void) {
 9a4:	1f 92       	push	r1
 9a6:	0f 92       	push	r0
 9a8:	0f b6       	in	r0, 0x3f	; 63
 9aa:	0f 92       	push	r0
 9ac:	11 24       	eor	r1, r1
 9ae:	2f 93       	push	r18
 9b0:	3f 93       	push	r19
 9b2:	4f 93       	push	r20
 9b4:	5f 93       	push	r21
 9b6:	6f 93       	push	r22
 9b8:	7f 93       	push	r23
 9ba:	8f 93       	push	r24
 9bc:	9f 93       	push	r25
 9be:	af 93       	push	r26
 9c0:	bf 93       	push	r27
 9c2:	ef 93       	push	r30
 9c4:	ff 93       	push	r31
	if (USART_TXC_Call_Back != NULL)
 9c6:	e0 91 f3 00 	lds	r30, 0x00F3	; 0x8000f3 <USART_TXC_Call_Back>
 9ca:	f0 91 f4 00 	lds	r31, 0x00F4	; 0x8000f4 <USART_TXC_Call_Back+0x1>
 9ce:	30 97       	sbiw	r30, 0x00	; 0
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__vector_15+0x30>
		USART_TXC_Call_Back();
 9d2:	09 95       	icall
}
 9d4:	ff 91       	pop	r31
 9d6:	ef 91       	pop	r30
 9d8:	bf 91       	pop	r27
 9da:	af 91       	pop	r26
 9dc:	9f 91       	pop	r25
 9de:	8f 91       	pop	r24
 9e0:	7f 91       	pop	r23
 9e2:	6f 91       	pop	r22
 9e4:	5f 91       	pop	r21
 9e6:	4f 91       	pop	r20
 9e8:	3f 91       	pop	r19
 9ea:	2f 91       	pop	r18
 9ec:	0f 90       	pop	r0
 9ee:	0f be       	out	0x3f, r0	; 63
 9f0:	0f 90       	pop	r0
 9f2:	1f 90       	pop	r1
 9f4:	18 95       	reti

000009f6 <_exit>:
 9f6:	f8 94       	cli

000009f8 <__stop_program>:
 9f8:	ff cf       	rjmp	.-2      	; 0x9f8 <__stop_program>
