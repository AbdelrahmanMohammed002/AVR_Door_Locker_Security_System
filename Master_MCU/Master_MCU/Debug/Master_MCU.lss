
Master_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ad8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  00000ad8  00000b6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080011e  0080011e  00000c2a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c7  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bee  00000000  00000000  0000304f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001870  00000000  00000000  00003c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  000054b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000053f0  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000152e  00000000  00000000  0000adc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  0000c2ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000018fa  00000000  00000000  0000c47e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__vector_13>
  38:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_14>
  3c:	0c 94 41 05 	jmp	0xa82	; 0xa82 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 89 04 	jmp	0x912	; 0x912 <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ed       	ldi	r30, 0xD8	; 216
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 31       	cpi	r26, 0x1E	; 30
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e1       	ldi	r26, 0x1E	; 30
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 32       	cpi	r26, 0x27	; 39
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 02 01 	call	0x204	; 0x204 <main>
  8a:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Function_vGetPassword>:
* Function_vGetPassword: Gets a password from the user.
*
* @param A_ScreenString: The string to display on the screen.
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	7b 01       	movw	r14, r22
	// Initialize variables
	u8 *local_u8PressedKey = NOT_PRESSED;
	u8 local_u8Counter = 0;

	// Display the prompt on the LCD
	HLCD_vSendString(A_ScreenString);
  9e:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
	// Initialize variables
	u8 *local_u8PressedKey = NOT_PRESSED;
	u8 local_u8Counter = 0;
  a2:	c0 e0       	ldi	r28, 0x00	; 0
* @param A_ScreenString: The string to display on the screen.
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
	// Initialize variables
	u8 *local_u8PressedKey = NOT_PRESSED;
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0

	// Display the prompt on the LCD
	HLCD_vSendString(A_ScreenString);

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
  a8:	2e c0       	rjmp	.+92     	; 0x106 <Function_vGetPassword+0x74>
		// Inner loop to get each character of the password
		while (local_u8Counter < 5) {
			// Get the pressed key from the keypad
			local_u8PressedKey = HKPD_u8GetPressedKey();
  aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <HKPD_u8GetPressedKey>
  ae:	8c 01       	movw	r16, r24

			// Move the cursor to the current position
			HLCD_vMoveTo(1, local_u8Counter);
  b0:	6c 2f       	mov	r22, r28
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>

			// Check if a valid key was pressed
			if (*local_u8PressedKey != NOT_PRESSED && *local_u8PressedKey != '=') {
  b8:	f8 01       	movw	r30, r16
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	f9 f0       	breq	.+62     	; 0xfe <Function_vGetPassword+0x6c>
  c0:	8d 33       	cpi	r24, 0x3D	; 61
  c2:	e9 f0       	breq	.+58     	; 0xfe <Function_vGetPassword+0x6c>
				// Store the character in the password buffer
				*(A_PointerToPassword + local_u8Counter) = *local_u8PressedKey;
  c4:	f7 01       	movw	r30, r14
  c6:	ec 0f       	add	r30, r28
  c8:	f1 1d       	adc	r31, r1
  ca:	80 83       	st	Z, r24

				// Display the character on the LCD
				HLCD_vSendData(*(A_PointerToPassword + local_u8Counter));
  cc:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	ff e3       	ldi	r31, 0x3F	; 63
  d2:	2d e0       	ldi	r18, 0x0D	; 13
  d4:	83 e0       	ldi	r24, 0x03	; 3
  d6:	f1 50       	subi	r31, 0x01	; 1
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <Function_vGetPassword+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Function_vGetPassword+0x4e>
  e0:	00 00       	nop

				// Delay for readability
				_delay_ms(1000);

				// Clear the character on the LCD
				HLCD_vMoveTo(1, local_u8Counter);
  e2:	6c 2f       	mov	r22, r28
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
				HLCD_vSendData(0x2A);
  ea:	8a e2       	ldi	r24, 0x2A	; 42
  ec:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>

				// Increment the counter
				local_u8Counter++;
  f0:	cf 5f       	subi	r28, 0xFF	; 255

				// Move the cursor to the next position
				HLCD_vMoveTo(1, local_u8Counter);
  f2:	6c 2f       	mov	r22, r28
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>

				// Clear the pressed key flag
				*local_u8PressedKey = NOT_PRESSED;
  fa:	f8 01       	movw	r30, r16
  fc:	10 82       	st	Z, r1
	HLCD_vSendString(A_ScreenString);

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
		// Inner loop to get each character of the password
		while (local_u8Counter < 5) {
  fe:	c5 30       	cpi	r28, 0x05	; 5
 100:	a0 f2       	brcs	.-88     	; 0xaa <Function_vGetPassword+0x18>
				*local_u8PressedKey = NOT_PRESSED;
			}
		}

		// Check if the '=' key was pressed to exit the loop
		local_u8PressedKey = HKPD_u8GetPressedKey();
 102:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <HKPD_u8GetPressedKey>

	// Display the prompt on the LCD
	HLCD_vSendString(A_ScreenString);

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
 106:	fc 01       	movw	r30, r24
 108:	80 81       	ld	r24, Z
 10a:	8d 33       	cpi	r24, 0x3D	; 61
 10c:	c1 f7       	brne	.-16     	; 0xfe <Function_vGetPassword+0x6c>

		// Check if the '=' key was pressed to exit the loop
		local_u8PressedKey = HKPD_u8GetPressedKey();
	}
	// Display Clear for next use
	HLCD_vDisplayClear();
 10e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
}
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	0f 91       	pop	r16
 118:	ff 90       	pop	r15
 11a:	ef 90       	pop	r14
 11c:	08 95       	ret

0000011e <Function_vWaitingScreen>:



void Function_vWaitingScreen(void) {
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
 126:	2d 97       	sbiw	r28, 0x0d	; 13
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	f8 94       	cli
 12c:	de bf       	out	0x3e, r29	; 62
 12e:	0f be       	out	0x3f, r0	; 63
 130:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Waiting[] = "PLEASE WAIT!";
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	de 01       	movw	r26, r28
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	01 90       	ld	r0, Z+
 13e:	0d 92       	st	X+, r0
 140:	8a 95       	dec	r24
 142:	e1 f7       	brne	.-8      	; 0x13c <Function_vWaitingScreen+0x1e>
	HLCD_vSendString(local_u8Waiting);
 144:	ce 01       	movw	r24, r28
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>

	HLCD_vSendData(0xFF);
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
	HLCD_vMoveTo(0, 13);
 152:	6d e0       	ldi	r22, 0x0D	; 13
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
 15a:	2f e9       	ldi	r18, 0x9F	; 159
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <Function_vWaitingScreen+0x42>
 168:	00 c0       	rjmp	.+0      	; 0x16a <Function_vWaitingScreen+0x4c>
 16a:	00 00       	nop
	_delay_ms(500);

	HLCD_vSendData(0xFF);
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
	HLCD_vMoveTo(0, 14);
 172:	6e e0       	ldi	r22, 0x0E	; 14
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
 17a:	2f e9       	ldi	r18, 0x9F	; 159
 17c:	86 e8       	ldi	r24, 0x86	; 134
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <Function_vWaitingScreen+0x62>
 188:	00 c0       	rjmp	.+0      	; 0x18a <Function_vWaitingScreen+0x6c>
 18a:	00 00       	nop
	_delay_ms(500);

	HLCD_vSendData(0xFF);
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
	HLCD_vMoveTo(0, 15);
 192:	6f e0       	ldi	r22, 0x0F	; 15
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
 19a:	2f e9       	ldi	r18, 0x9F	; 159
 19c:	86 e8       	ldi	r24, 0x86	; 134
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <Function_vWaitingScreen+0x82>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <Function_vWaitingScreen+0x8c>
 1aa:	00 00       	nop
	_delay_ms(500);

	HLCD_vSendData(0xFF);
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
	HLCD_vMoveTo(0, 16);
 1b2:	60 e1       	ldi	r22, 0x10	; 16
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
 1ba:	2f e9       	ldi	r18, 0x9F	; 159
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	21 50       	subi	r18, 0x01	; 1
 1c2:	80 40       	sbci	r24, 0x00	; 0
 1c4:	90 40       	sbci	r25, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <Function_vWaitingScreen+0xa2>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <Function_vWaitingScreen+0xac>
 1ca:	00 00       	nop
	_delay_ms(500);

}
 1cc:	2d 96       	adiw	r28, 0x0d	; 13
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <Function_vGetOption>:




void Function_vGetOption(u8 * A_u8Option){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	
	u8 * local_u8PressedKey = NOT_PRESSED;
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
	
	while(*local_u8PressedKey != '1' && *local_u8PressedKey != '2'){
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <Function_vGetOption+0x10>
		local_u8PressedKey= HKPD_u8GetPressedKey();
 1ea:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <HKPD_u8GetPressedKey>

void Function_vGetOption(u8 * A_u8Option){
	
	u8 * local_u8PressedKey = NOT_PRESSED;
	
	while(*local_u8PressedKey != '1' && *local_u8PressedKey != '2'){
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 81       	ld	r18, Z
 1f2:	3f ec       	ldi	r19, 0xCF	; 207
 1f4:	32 0f       	add	r19, r18
 1f6:	32 30       	cpi	r19, 0x02	; 2
 1f8:	c0 f7       	brcc	.-16     	; 0x1ea <Function_vGetOption+0xc>
		local_u8PressedKey= HKPD_u8GetPressedKey();
	}
	
	*A_u8Option = *local_u8PressedKey;
 1fa:	28 83       	st	Y, r18
	*local_u8PressedKey = NOT_PRESSED;
 1fc:	10 82       	st	Z, r1
}
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <main>:





int main(void) {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
 20c:	ca 5a       	subi	r28, 0xAA	; 170
 20e:	d1 09       	sbc	r29, r1
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
	
	MDIO_vSetPinDirection(PORT_D, 0, INPUT);//RX
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORT_D, 1, OUTPUT);//\TX
 224:	41 e0       	ldi	r20, 0x01	; 1
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>

	HLCD_vInit();
 22e:	0e 94 c9 02 	call	0x592	; 0x592 <HLCD_vInit>
	HKPD_vInit();
 232:	0e 94 0a 02 	call	0x414	; 0x414 <HKPD_vInit>
	MUSART_vInit(51);
 236:	83 e3       	ldi	r24, 0x33	; 51
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 b2 04 	call	0x964	; 0x964 <MUSART_vInit>
	
	MUSART_vTransmit(MASTER_READY);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 c0 04 	call	0x980	; 0x980 <MUSART_vTransmit>
	while (MUSART_u8Receive()!=SLAVE_READY);
 244:	0e 94 c4 04 	call	0x988	; 0x988 <MUSART_u8Receive>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x40>
	
	u8 local_u8MasterStatus,  local_u8SlaveStatus;
	
	
	u8 local_u8LCDScreens[10][16] ={
 24c:	80 ea       	ldi	r24, 0xA0	; 160
 24e:	e0 e6       	ldi	r30, 0x60	; 96
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	de 01       	movw	r26, r28
 254:	11 96       	adiw	r26, 0x01	; 1
 256:	01 90       	ld	r0, Z+
 258:	0d 92       	st	X+, r0
 25a:	8a 95       	dec	r24
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x52>
	};
	

	while (1) {
		
		while(!MUSART_u8UnreadDate());
 25e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MUSART_u8UnreadDate>
 262:	88 23       	and	r24, r24
 264:	e1 f3       	breq	.-8      	; 0x25e <main+0x5a>
		local_u8SlaveStatus = MUSART_u8Receive();
 266:	0e 94 c4 04 	call	0x988	; 0x988 <MUSART_u8Receive>
		
		if (local_u8SlaveStatus == 0xFF)//create new password
 26a:	8f 3f       	cpi	r24, 0xFF	; 255
 26c:	09 f0       	breq	.+2      	; 0x270 <main+0x6c>
 26e:	55 c0       	rjmp	.+170    	; 0x31a <main+0x116>
		{
			u8 local_u8EnteredPassword[5], local_u8ReEnteredPassword[5];
			Function_vGetPassword(local_u8LCDScreens[0], local_u8EnteredPassword);
 270:	be 01       	movw	r22, r28
 272:	6a 55       	subi	r22, 0x5A	; 90
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	ce 01       	movw	r24, r28
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	0e 94 49 00 	call	0x92	; 0x92 <Function_vGetPassword>
			Function_vGetPassword(local_u8LCDScreens[1], local_u8ReEnteredPassword);
 27e:	be 01       	movw	r22, r28
 280:	6f 55       	subi	r22, 0x5F	; 95
 282:	7f 4f       	sbci	r23, 0xFF	; 255
 284:	ce 01       	movw	r24, r28
 286:	41 96       	adiw	r24, 0x11	; 17
 288:	0e 94 49 00 	call	0x92	; 0x92 <Function_vGetPassword>
			MUSART_vTransmit(CREATE_PASSWORD);
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 c0 04 	call	0x980	; 0x980 <MUSART_vTransmit>
			MUSART_vTransmitString(local_u8EnteredPassword, PASSWORD_SIZE);
 292:	65 e0       	ldi	r22, 0x05	; 5
 294:	ce 01       	movw	r24, r28
 296:	8a 55       	subi	r24, 0x5A	; 90
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <MUSART_vTransmitString>
			MUSART_vTransmitString(local_u8ReEnteredPassword, PASSWORD_SIZE);
 29e:	65 e0       	ldi	r22, 0x05	; 5
 2a0:	ce 01       	movw	r24, r28
 2a2:	8f 55       	subi	r24, 0x5F	; 95
 2a4:	9f 4f       	sbci	r25, 0xFF	; 255
 2a6:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <MUSART_vTransmitString>
			while(!MUSART_u8UnreadDate());
 2aa:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MUSART_u8UnreadDate>
 2ae:	88 23       	and	r24, r24
 2b0:	e1 f3       	breq	.-8      	; 0x2aa <main+0xa6>
			local_u8SlaveStatus = MUSART_u8Receive();
 2b2:	0e 94 c4 04 	call	0x988	; 0x988 <MUSART_u8Receive>
			if (local_u8SlaveStatus == SUCCEEDED)
 2b6:	86 30       	cpi	r24, 0x06	; 6
 2b8:	b1 f4       	brne	.+44     	; 0x2e6 <main+0xe2>
			{
				Function_vWaitingScreen();
 2ba:	0e 94 8f 00 	call	0x11e	; 0x11e <Function_vWaitingScreen>
				HLCD_vMoveTo(1, 0);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
				HLCD_vSendString(local_u8LCDScreens[3]);
 2c6:	ce 01       	movw	r24, r28
 2c8:	c1 96       	adiw	r24, 0x31	; 49
 2ca:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
 2ce:	2f e3       	ldi	r18, 0x3F	; 63
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	21 50       	subi	r18, 0x01	; 1
 2d6:	80 40       	sbci	r24, 0x00	; 0
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0xd0>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0xda>
 2de:	00 00       	nop
				_delay_ms(5000);
				HLCD_vDisplayClear();
 2e0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
 2e4:	bc cf       	rjmp	.-136    	; 0x25e <main+0x5a>
				
			}
			else if(local_u8SlaveStatus == ERROR)
 2e6:	87 30       	cpi	r24, 0x07	; 7
 2e8:	09 f0       	breq	.+2      	; 0x2ec <main+0xe8>
 2ea:	b9 cf       	rjmp	.-142    	; 0x25e <main+0x5a>
			{
				Function_vWaitingScreen();
 2ec:	0e 94 8f 00 	call	0x11e	; 0x11e <Function_vWaitingScreen>
				HLCD_vMoveTo(1, 0);
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
				HLCD_vSendString(local_u8LCDScreens[4]);
 2f8:	ce 01       	movw	r24, r28
 2fa:	8f 5b       	subi	r24, 0xBF	; 191
 2fc:	9f 4f       	sbci	r25, 0xFF	; 255
 2fe:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
 302:	2f e3       	ldi	r18, 0x3F	; 63
 304:	82 e4       	ldi	r24, 0x42	; 66
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	21 50       	subi	r18, 0x01	; 1
 30a:	80 40       	sbci	r24, 0x00	; 0
 30c:	90 40       	sbci	r25, 0x00	; 0
 30e:	e1 f7       	brne	.-8      	; 0x308 <main+0x104>
 310:	00 c0       	rjmp	.+0      	; 0x312 <main+0x10e>
 312:	00 00       	nop
				_delay_ms(5000);
				HLCD_vDisplayClear();
 314:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
 318:	a2 cf       	rjmp	.-188    	; 0x25e <main+0x5a>
			}
			
			
			
		}
		else if (local_u8SlaveStatus == 0x00)// system is already used
 31a:	81 11       	cpse	r24, r1
 31c:	a0 cf       	rjmp	.-192    	; 0x25e <main+0x5a>
		{
			HLCD_vSendString(local_u8LCDScreens[5]);
 31e:	ce 01       	movw	r24, r28
 320:	8f 5a       	subi	r24, 0xAF	; 175
 322:	9f 4f       	sbci	r25, 0xFF	; 255
 324:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
			HLCD_vMoveTo(1, 0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 42 03 	call	0x684	; 0x684 <HLCD_vMoveTo>
			HLCD_vSendString(local_u8LCDScreens[6]);
 330:	ce 01       	movw	r24, r28
 332:	8f 59       	subi	r24, 0x9F	; 159
 334:	9f 4f       	sbci	r25, 0xFF	; 255
 336:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
			
			u8 local_u8Option[1];
			Function_vGetOption(local_u8Option);
 33a:	ce 01       	movw	r24, r28
 33c:	8a 55       	subi	r24, 0x5A	; 90
 33e:	9f 4f       	sbci	r25, 0xFF	; 255
 340:	0e 94 ef 00 	call	0x1de	; 0x1de <Function_vGetOption>
			
			HLCD_vDisplayClear();
 344:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
			u8 local_u8EnterPassword[5];
			Function_vGetPassword(local_u8LCDScreens[0], local_u8EnterPassword);
 348:	be 01       	movw	r22, r28
 34a:	6f 55       	subi	r22, 0x5F	; 95
 34c:	7f 4f       	sbci	r23, 0xFF	; 255
 34e:	ce 01       	movw	r24, r28
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	0e 94 49 00 	call	0x92	; 0x92 <Function_vGetPassword>
			
			if (*local_u8Option == '1')
 356:	ca 55       	subi	r28, 0x5A	; 90
 358:	df 4f       	sbci	r29, 0xFF	; 255
 35a:	88 81       	ld	r24, Y
 35c:	c6 5a       	subi	r28, 0xA6	; 166
 35e:	d0 40       	sbci	r29, 0x00	; 0
 360:	81 33       	cpi	r24, 0x31	; 49
 362:	21 f4       	brne	.+8      	; 0x36c <main+0x168>
			{
				MUSART_vTransmit(OPEN_DOOR);
 364:	88 e0       	ldi	r24, 0x08	; 8
 366:	0e 94 c0 04 	call	0x980	; 0x980 <MUSART_vTransmit>
 36a:	05 c0       	rjmp	.+10     	; 0x376 <main+0x172>
			}else if(*local_u8Option == '2')
 36c:	82 33       	cpi	r24, 0x32	; 50
 36e:	19 f4       	brne	.+6      	; 0x376 <main+0x172>
			{
				MUSART_vTransmit(CHANGE_PASSWORD);
 370:	85 e0       	ldi	r24, 0x05	; 5
 372:	0e 94 c0 04 	call	0x980	; 0x980 <MUSART_vTransmit>
			}
			MUSART_vTransmitString(local_u8EnterPassword, PASSWORD_SIZE);
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	ce 01       	movw	r24, r28
 37a:	8f 55       	subi	r24, 0x5F	; 95
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <MUSART_vTransmitString>
			while(!MUSART_u8UnreadDate());
 382:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MUSART_u8UnreadDate>
 386:	88 23       	and	r24, r24
 388:	e1 f3       	breq	.-8      	; 0x382 <main+0x17e>
			local_u8SlaveStatus = MUSART_u8Receive();
 38a:	0e 94 c4 04 	call	0x988	; 0x988 <MUSART_u8Receive>
 38e:	18 2f       	mov	r17, r24
			if (local_u8SlaveStatus == ERROR)
 390:	87 30       	cpi	r24, 0x07	; 7
 392:	21 f4       	brne	.+8      	; 0x39c <main+0x198>
			{
				HLCD_vSendString(local_u8LCDScreens[2]);
 394:	ce 01       	movw	r24, r28
 396:	81 96       	adiw	r24, 0x21	; 33
 398:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
				
			}
			
			
			if (*local_u8Option == '1' && local_u8SlaveStatus == SUCCEEDED)
 39c:	ca 55       	subi	r28, 0x5A	; 90
 39e:	df 4f       	sbci	r29, 0xFF	; 255
 3a0:	88 81       	ld	r24, Y
 3a2:	c6 5a       	subi	r28, 0xA6	; 166
 3a4:	d0 40       	sbci	r29, 0x00	; 0
 3a6:	81 33       	cpi	r24, 0x31	; 49
 3a8:	09 f0       	breq	.+2      	; 0x3ac <main+0x1a8>
 3aa:	59 cf       	rjmp	.-334    	; 0x25e <main+0x5a>
 3ac:	16 30       	cpi	r17, 0x06	; 6
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0x1ae>
 3b0:	56 cf       	rjmp	.-340    	; 0x25e <main+0x5a>
			{
				// Open Door CW for 15 seconds
				HLCD_vSendString(local_u8LCDScreens[7]);
 3b2:	ce 01       	movw	r24, r28
 3b4:	8f 58       	subi	r24, 0x8F	; 143
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
 3bc:	2f eb       	ldi	r18, 0xBF	; 191
 3be:	86 ec       	ldi	r24, 0xC6	; 198
 3c0:	9d e2       	ldi	r25, 0x2D	; 45
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x1be>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x1c8>
 3cc:	00 00       	nop
				_delay_ms(15000);
				HLCD_vDisplayClear();
 3ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
				// Wait for 3 seconds
				HLCD_vSendString(local_u8LCDScreens[8]);
 3d2:	ce 01       	movw	r24, r28
 3d4:	8f 57       	subi	r24, 0x7F	; 127
 3d6:	9f 4f       	sbci	r25, 0xFF	; 255
 3d8:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
 3dc:	2f eb       	ldi	r18, 0xBF	; 191
 3de:	87 e2       	ldi	r24, 0x27	; 39
 3e0:	99 e0       	ldi	r25, 0x09	; 9
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <main+0x1de>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <main+0x1e8>
 3ec:	00 00       	nop
				_delay_ms(3000);
				HLCD_vDisplayClear();
 3ee:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
				// Close Door ACW for 15 seconds
				HLCD_vSendString(local_u8LCDScreens[9]);
 3f2:	ce 01       	movw	r24, r28
 3f4:	8f 56       	subi	r24, 0x6F	; 111
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	0e 94 2f 03 	call	0x65e	; 0x65e <HLCD_vSendString>
 3fc:	2f eb       	ldi	r18, 0xBF	; 191
 3fe:	86 ec       	ldi	r24, 0xC6	; 198
 400:	9d e2       	ldi	r25, 0x2D	; 45
 402:	21 50       	subi	r18, 0x01	; 1
 404:	80 40       	sbci	r24, 0x00	; 0
 406:	90 40       	sbci	r25, 0x00	; 0
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
				_delay_ms(15000);
				HLCD_vDisplayClear();
 40e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <HLCD_vDisplayClear>
 412:	25 cf       	rjmp	.-438    	; 0x25e <main+0x5a>

00000414 <HKPD_vInit>:
#include "KPD_Interface.h"

void HKPD_vInit(void)
{
	/* SET Rows pins as input high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW1, LOW);
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW2, LOW);
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW3, LOW);
 428:	40 e0       	ldi	r20, 0x00	; 0
 42a:	62 e0       	ldi	r22, 0x02	; 2
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW4, LOW);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	63 e0       	ldi	r22, 0x03	; 3
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_ROW1, HIGH);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW2, HIGH);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW3, HIGH);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	62 e0       	ldi	r22, 0x02	; 2
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW4, HIGH);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>

	/* SET Columns pins as output high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL1, HIGH);
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	64 e0       	ldi	r22, 0x04	; 4
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL2, HIGH);
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	65 e0       	ldi	r22, 0x05	; 5
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL3, HIGH);
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	66 e0       	ldi	r22, 0x06	; 6
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL4, HIGH);
 482:	41 e0       	ldi	r20, 0x01	; 1
 484:	67 e0       	ldi	r22, 0x07	; 7
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_COL1, HIGH);
 48c:	41 e0       	ldi	r20, 0x01	; 1
 48e:	64 e0       	ldi	r22, 0x04	; 4
 490:	82 e0       	ldi	r24, 0x02	; 2
 492:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL2, HIGH);
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	65 e0       	ldi	r22, 0x05	; 5
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL3, HIGH);
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL4, HIGH);
 4aa:	41 e0       	ldi	r20, 0x01	; 1
 4ac:	67 e0       	ldi	r22, 0x07	; 7
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 4b4:	08 95       	ret

000004b6 <HKPD_u8GetPressedKey>:
}
u8 *HKPD_u8GetPressedKey(void)
{
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 4ba:	d4 e0       	ldi	r29, 0x04	; 4
 4bc:	3b c0       	rjmp	.+118    	; 0x534 <HKPD_u8GetPressedKey+0x7e>

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	6d 2f       	mov	r22, r29
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 4c8:	81 ee       	ldi	r24, 0xE1	; 225
 4ca:	94 e0       	ldi	r25, 0x04	; 4
 4cc:	01 97       	sbiw	r24, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <HKPD_u8GetPressedKey+0x16>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <HKPD_u8GetPressedKey+0x1c>
 4d2:	00 00       	nop
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 4d4:	c0 e0       	ldi	r28, 0x00	; 0
 4d6:	26 c0       	rjmp	.+76     	; 0x524 <HKPD_u8GetPressedKey+0x6e>
        {
            local_u8Status = MDIO_u8GetPinValue(KPD_PORT, local_u8Rows);
 4d8:	6c 2f       	mov	r22, r28
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MDIO_u8GetPinValue>

            if (local_u8Status == 0)
 4e0:	81 11       	cpse	r24, r1
 4e2:	1f c0       	rjmp	.+62     	; 0x522 <HKPD_u8GetPressedKey+0x6c>
            {
                local_u8Value = KPD_Buttions[local_u8Rows - KPD_ROW1][local_u8Columns - KPD_COL1]; // Adjusted array indexing
 4e4:	8c 2f       	mov	r24, r28
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	2d 2f       	mov	r18, r29
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	24 50       	subi	r18, 0x04	; 4
 4ee:	31 09       	sbc	r19, r1
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	83 5f       	subi	r24, 0xF3	; 243
 4fa:	9e 4f       	sbci	r25, 0xFE	; 254
 4fc:	fc 01       	movw	r30, r24
 4fe:	e2 0f       	add	r30, r18
 500:	f3 1f       	adc	r31, r19
 502:	80 81       	ld	r24, Z
 504:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>

                // Wait for key release
                while (MDIO_u8GetPinValue(KPD_PORT, local_u8Rows) == LOW)
 508:	06 c0       	rjmp	.+12     	; 0x516 <HKPD_u8GetPressedKey+0x60>
 50a:	81 ee       	ldi	r24, 0xE1	; 225
 50c:	94 e0       	ldi	r25, 0x04	; 4
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <HKPD_u8GetPressedKey+0x58>
 512:	00 c0       	rjmp	.+0      	; 0x514 <HKPD_u8GetPressedKey+0x5e>
 514:	00 00       	nop
 516:	6c 2f       	mov	r22, r28
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <MDIO_u8GetPinValue>
 51e:	88 23       	and	r24, r24
 520:	a1 f3       	breq	.-24     	; 0x50a <HKPD_u8GetPressedKey+0x54>
    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	c4 30       	cpi	r28, 0x04	; 4
 526:	c0 f2       	brcs	.-80     	; 0x4d8 <HKPD_u8GetPressedKey+0x22>
                {
                    _delay_ms(5); // Adjusted delay for debounce
                }
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
 528:	41 e0       	ldi	r20, 0x01	; 1
 52a:	6d 2f       	mov	r22, r29
 52c:	82 e0       	ldi	r24, 0x02	; 2
 52e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
u8 *HKPD_u8GetPressedKey(void)
{
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 532:	df 5f       	subi	r29, 0xFF	; 255
 534:	d8 30       	cpi	r29, 0x08	; 8
 536:	18 f2       	brcs	.-122    	; 0x4be <HKPD_u8GetPressedKey+0x8>
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
    }
    return &local_u8Value; // Return value of static variable
}
 538:	8e e1       	ldi	r24, 0x1E	; 30
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	08 95       	ret

00000542 <HLCD_vSendCommand>:
 * @brief Send a command to the LCD.
 *
 * @param A_u8Command: Command to be sent.
 */
void HLCD_vSendCommand(u8 A_u8Command)
{
 542:	cf 93       	push	r28
 544:	c8 2f       	mov	r28, r24
    // Set RS to 0 (Command Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, LOW);
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>

    // Send command on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Command);
 55a:	6c 2f       	mov	r22, r28
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 4b 04 	call	0x896	; 0x896 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	62 e0       	ldi	r22, 0x02	; 2
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 56c:	89 ef       	ldi	r24, 0xF9	; 249
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <HLCD_vSendCommand+0x2e>
 574:	00 c0       	rjmp	.+0      	; 0x576 <HLCD_vSendCommand+0x34>
 576:	00 00       	nop
    _delay_ms(1);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 578:	40 e0       	ldi	r20, 0x00	; 0
 57a:	62 e0       	ldi	r22, 0x02	; 2
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 582:	89 ef       	ldi	r24, 0xF9	; 249
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <HLCD_vSendCommand+0x44>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <HLCD_vSendCommand+0x4a>
 58c:	00 00       	nop
    _delay_ms(1);
}
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <HLCD_vInit>:
 * @brief Initialize the LCD module.
 */
void HLCD_vInit(void)
{
    // Set control pins direction as OUTPUT
    MDIO_vSetPinDirection(CONTROL_PORT, RS, OUTPUT);
 592:	41 e0       	ldi	r20, 0x01	; 1
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, RW, OUTPUT);
 59c:	41 e0       	ldi	r20, 0x01	; 1
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, EN, OUTPUT);
 5a6:	41 e0       	ldi	r20, 0x01	; 1
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <MDIO_vSetPinDirection>

    // Set data port direction as OUTPUT (all pins)
    MDIO_vSetPortDirection(DATA_PORT, 0xFF);
 5b0:	6f ef       	ldi	r22, 0xFF	; 255
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 cb 03 	call	0x796	; 0x796 <MDIO_vSetPortDirection>
 5b8:	8f e0       	ldi	r24, 0x0F	; 15
 5ba:	97 e2       	ldi	r25, 0x27	; 39
 5bc:	01 97       	sbiw	r24, 0x01	; 1
 5be:	f1 f7       	brne	.-4      	; 0x5bc <HLCD_vInit+0x2a>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <HLCD_vInit+0x30>
 5c2:	00 00       	nop

    // Wait for LCD to power up
    _delay_ms(40);

    // Send LCD initialization commands
    HLCD_vSendCommand(FUNCTION_SET);
 5c4:	88 e3       	ldi	r24, 0x38	; 56
 5c6:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 5ca:	89 ef       	ldi	r24, 0xF9	; 249
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <HLCD_vInit+0x3c>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <HLCD_vInit+0x42>
 5d4:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_ON_OFF);
 5d6:	8f e0       	ldi	r24, 0x0F	; 15
 5d8:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 5dc:	89 ef       	ldi	r24, 0xF9	; 249
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <HLCD_vInit+0x4e>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <HLCD_vInit+0x54>
 5e6:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_CLEAR);
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 5ee:	8d ee       	ldi	r24, 0xED	; 237
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <HLCD_vInit+0x60>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <HLCD_vInit+0x66>
 5f8:	00 00       	nop
    _delay_ms(3);
    HLCD_vSendCommand(ENTRY_MODE_SET);
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 600:	8d ee       	ldi	r24, 0xED	; 237
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <HLCD_vInit+0x72>
 608:	00 c0       	rjmp	.+0      	; 0x60a <HLCD_vInit+0x78>
 60a:	00 00       	nop
 60c:	08 95       	ret

0000060e <HLCD_vSendData>:
 * @brief Send data (character) to the LCD.
 *
 * @param A_u8Data: Data (character) to be sent.
 */
void HLCD_vSendData(u8 A_u8Data)
{
 60e:	cf 93       	push	r28
 610:	c8 2f       	mov	r28, r24
    // Set RS to 1 (Data Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, HIGH);
 612:	41 e0       	ldi	r20, 0x01	; 1
 614:	60 e0       	ldi	r22, 0x00	; 0
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	61 e0       	ldi	r22, 0x01	; 1
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>

    // Send data on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Data);
 626:	6c 2f       	mov	r22, r28
 628:	80 e0       	ldi	r24, 0x00	; 0
 62a:	0e 94 4b 04 	call	0x896	; 0x896 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	62 e0       	ldi	r22, 0x02	; 2
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 638:	81 ee       	ldi	r24, 0xE1	; 225
 63a:	94 e0       	ldi	r25, 0x04	; 4
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <HLCD_vSendData+0x2e>
 640:	00 c0       	rjmp	.+0      	; 0x642 <HLCD_vSendData+0x34>
 642:	00 00       	nop
    _delay_ms(5);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	62 e0       	ldi	r22, 0x02	; 2
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 db 03 	call	0x7b6	; 0x7b6 <MDIO_vSetPinValue>
 64e:	81 ee       	ldi	r24, 0xE1	; 225
 650:	94 e0       	ldi	r25, 0x04	; 4
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <HLCD_vSendData+0x44>
 656:	00 c0       	rjmp	.+0      	; 0x658 <HLCD_vSendData+0x4a>
 658:	00 00       	nop
    _delay_ms(5);
}
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <HLCD_vSendString>:
 * @brief Send a string to display on the LCD.
 *
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
 65e:	0f 93       	push	r16
 660:	1f 93       	push	r17
 662:	cf 93       	push	r28
 664:	8c 01       	movw	r16, r24
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 666:	c0 e0       	ldi	r28, 0x00	; 0
 668:	03 c0       	rjmp	.+6      	; 0x670 <HLCD_vSendString+0x12>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
 66a:	0e 94 07 03 	call	0x60e	; 0x60e <HLCD_vSendData>
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 66e:	cf 5f       	subi	r28, 0xFF	; 255
 670:	f8 01       	movw	r30, r16
 672:	ec 0f       	add	r30, r28
 674:	f1 1d       	adc	r31, r1
 676:	80 81       	ld	r24, Z
 678:	81 11       	cpse	r24, r1
 67a:	f7 cf       	rjmp	.-18     	; 0x66a <HLCD_vSendString+0xc>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
    }
}
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <HLCD_vMoveTo>:
 * @param A_u8Col: Column number (0 to 15).
 */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col)
{
    // Calculate cursor position based on row and column
    switch (A_u8Row)
 684:	88 23       	and	r24, r24
 686:	19 f0       	breq	.+6      	; 0x68e <HLCD_vMoveTo+0xa>
 688:	81 30       	cpi	r24, 0x01	; 1
 68a:	31 f0       	breq	.+12     	; 0x698 <HLCD_vMoveTo+0x14>
 68c:	08 95       	ret
    {
        case 0:
            HLCD_vSendCommand(A_u8Col + 128); // Move to 1st row
 68e:	80 e8       	ldi	r24, 0x80	; 128
 690:	86 0f       	add	r24, r22
 692:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
            break;
 696:	08 95       	ret
        case 1:
            HLCD_vSendCommand(A_u8Col + 192); // Move to 2nd row
 698:	80 ec       	ldi	r24, 0xC0	; 192
 69a:	86 0f       	add	r24, r22
 69c:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 6a0:	08 95       	ret

000006a2 <HLCD_vDisplayClear>:
 * @brief Clear the display of the LCD.
 */
void HLCD_vDisplayClear(void)
{
    // Send clear display command
    HLCD_vSendCommand(DISPLAY_CLEAR);
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	0e 94 a1 02 	call	0x542	; 0x542 <HLCD_vSendCommand>
 6a8:	87 e8       	ldi	r24, 0x87	; 135
 6aa:	93 e1       	ldi	r25, 0x13	; 19
 6ac:	01 97       	sbiw	r24, 0x01	; 1
 6ae:	f1 f7       	brne	.-4      	; 0x6ac <HLCD_vDisplayClear+0xa>
 6b0:	00 c0       	rjmp	.+0      	; 0x6b2 <HLCD_vDisplayClear+0x10>
 6b2:	00 00       	nop
 6b4:	08 95       	ret

000006b6 <MDIO_vSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Config.h"

void MDIO_vSetPinDirection(u8 A_u8PortNumber,u8 A_u8PinNumber, u8 A_u8Dir )
{
	if(A_u8Dir == INPUT)
 6b6:	41 11       	cpse	r20, r1
 6b8:	38 c0       	rjmp	.+112    	; 0x72a <MDIO_vSetPinDirection+0x74>
	{
		switch (A_u8PortNumber)
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	91 f0       	breq	.+36     	; 0x6e2 <MDIO_vSetPinDirection+0x2c>
 6be:	28 f0       	brcs	.+10     	; 0x6ca <MDIO_vSetPinDirection+0x14>
 6c0:	82 30       	cpi	r24, 0x02	; 2
 6c2:	d9 f0       	breq	.+54     	; 0x6fa <MDIO_vSetPinDirection+0x44>
 6c4:	83 30       	cpi	r24, 0x03	; 3
 6c6:	29 f1       	breq	.+74     	; 0x712 <MDIO_vSetPinDirection+0x5c>
 6c8:	08 95       	ret
		{
		case PORT_A: CLR_BIT(DDRA, A_u8PinNumber); break;
 6ca:	2a b3       	in	r18, 0x1a	; 26
 6cc:	81 e0       	ldi	r24, 0x01	; 1
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <MDIO_vSetPinDirection+0x20>
 6d2:	88 0f       	add	r24, r24
 6d4:	99 1f       	adc	r25, r25
 6d6:	6a 95       	dec	r22
 6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <MDIO_vSetPinDirection+0x1c>
 6da:	80 95       	com	r24
 6dc:	82 23       	and	r24, r18
 6de:	8a bb       	out	0x1a, r24	; 26
 6e0:	08 95       	ret
		case PORT_B: CLR_BIT(DDRB, A_u8PinNumber); break;
 6e2:	27 b3       	in	r18, 0x17	; 23
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <MDIO_vSetPinDirection+0x38>
 6ea:	88 0f       	add	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	6a 95       	dec	r22
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <MDIO_vSetPinDirection+0x34>
 6f2:	80 95       	com	r24
 6f4:	82 23       	and	r24, r18
 6f6:	87 bb       	out	0x17, r24	; 23
 6f8:	08 95       	ret
		case PORT_C: CLR_BIT(DDRC, A_u8PinNumber); break;
 6fa:	24 b3       	in	r18, 0x14	; 20
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <MDIO_vSetPinDirection+0x50>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <MDIO_vSetPinDirection+0x4c>
 70a:	80 95       	com	r24
 70c:	82 23       	and	r24, r18
 70e:	84 bb       	out	0x14, r24	; 20
 710:	08 95       	ret
		case PORT_D: CLR_BIT(DDRD, A_u8PinNumber); break;
 712:	21 b3       	in	r18, 0x11	; 17
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <MDIO_vSetPinDirection+0x68>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	6a 95       	dec	r22
 720:	e2 f7       	brpl	.-8      	; 0x71a <MDIO_vSetPinDirection+0x64>
 722:	80 95       	com	r24
 724:	82 23       	and	r24, r18
 726:	81 bb       	out	0x11, r24	; 17
 728:	08 95       	ret
		}
	}else if (A_u8Dir == OUTPUT)
 72a:	41 30       	cpi	r20, 0x01	; 1
 72c:	99 f5       	brne	.+102    	; 0x794 <MDIO_vSetPinDirection+0xde>
	{
		switch (A_u8PortNumber)
 72e:	81 30       	cpi	r24, 0x01	; 1
 730:	89 f0       	breq	.+34     	; 0x754 <MDIO_vSetPinDirection+0x9e>
 732:	28 f0       	brcs	.+10     	; 0x73e <MDIO_vSetPinDirection+0x88>
 734:	82 30       	cpi	r24, 0x02	; 2
 736:	c9 f0       	breq	.+50     	; 0x76a <MDIO_vSetPinDirection+0xb4>
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	11 f1       	breq	.+68     	; 0x780 <MDIO_vSetPinDirection+0xca>
 73c:	08 95       	ret
		{
		case PORT_A: SET_BIT(DDRA, A_u8PinNumber); break;
 73e:	2a b3       	in	r18, 0x1a	; 26
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <MDIO_vSetPinDirection+0x94>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	6a 95       	dec	r22
 74c:	e2 f7       	brpl	.-8      	; 0x746 <MDIO_vSetPinDirection+0x90>
 74e:	82 2b       	or	r24, r18
 750:	8a bb       	out	0x1a, r24	; 26
 752:	08 95       	ret
		case PORT_B: SET_BIT(DDRB, A_u8PinNumber); break;
 754:	27 b3       	in	r18, 0x17	; 23
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <MDIO_vSetPinDirection+0xaa>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <MDIO_vSetPinDirection+0xa6>
 764:	82 2b       	or	r24, r18
 766:	87 bb       	out	0x17, r24	; 23
 768:	08 95       	ret
		case PORT_C: SET_BIT(DDRC, A_u8PinNumber); break;
 76a:	24 b3       	in	r18, 0x14	; 20
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <MDIO_vSetPinDirection+0xc0>
 772:	88 0f       	add	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	6a 95       	dec	r22
 778:	e2 f7       	brpl	.-8      	; 0x772 <MDIO_vSetPinDirection+0xbc>
 77a:	82 2b       	or	r24, r18
 77c:	84 bb       	out	0x14, r24	; 20
 77e:	08 95       	ret
		case PORT_D: SET_BIT(DDRD, A_u8PinNumber); break;
 780:	21 b3       	in	r18, 0x11	; 17
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 c0       	rjmp	.+4      	; 0x78c <MDIO_vSetPinDirection+0xd6>
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	6a 95       	dec	r22
 78e:	e2 f7       	brpl	.-8      	; 0x788 <MDIO_vSetPinDirection+0xd2>
 790:	82 2b       	or	r24, r18
 792:	81 bb       	out	0x11, r24	; 17
 794:	08 95       	ret

00000796 <MDIO_vSetPortDirection>:
		//Do Nothing.
	}
}

void MDIO_vSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir){
	switch (A_u8PortNumber){
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	41 f0       	breq	.+16     	; 0x7aa <MDIO_vSetPortDirection+0x14>
 79a:	28 f0       	brcs	.+10     	; 0x7a6 <MDIO_vSetPortDirection+0x10>
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	39 f0       	breq	.+14     	; 0x7ae <MDIO_vSetPortDirection+0x18>
 7a0:	83 30       	cpi	r24, 0x03	; 3
 7a2:	39 f0       	breq	.+14     	; 0x7b2 <MDIO_vSetPortDirection+0x1c>
 7a4:	08 95       	ret
	case PORT_A: DDRA = A_u8Dir; break;
 7a6:	6a bb       	out	0x1a, r22	; 26
 7a8:	08 95       	ret
	case PORT_B: DDRB = A_u8Dir; break;
 7aa:	67 bb       	out	0x17, r22	; 23
 7ac:	08 95       	ret
	case PORT_C: DDRC = A_u8Dir; break;
 7ae:	64 bb       	out	0x14, r22	; 20
 7b0:	08 95       	ret
	case PORT_D: DDRD = A_u8Dir; break;
 7b2:	61 bb       	out	0x11, r22	; 17
 7b4:	08 95       	ret

000007b6 <MDIO_vSetPinValue>:
	}
}

void MDIO_vSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Value)
{
	if(A_u8Value == HIGH)
 7b6:	41 30       	cpi	r20, 0x01	; 1
 7b8:	a1 f5       	brne	.+104    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	{
		switch (A_u8PortNumber)
 7ba:	81 30       	cpi	r24, 0x01	; 1
 7bc:	89 f0       	breq	.+34     	; 0x7e0 <MDIO_vSetPinValue+0x2a>
 7be:	28 f0       	brcs	.+10     	; 0x7ca <MDIO_vSetPinValue+0x14>
 7c0:	82 30       	cpi	r24, 0x02	; 2
 7c2:	c9 f0       	breq	.+50     	; 0x7f6 <MDIO_vSetPinValue+0x40>
 7c4:	83 30       	cpi	r24, 0x03	; 3
 7c6:	11 f1       	breq	.+68     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7c8:	08 95       	ret
		{
		case PORT_A: SET_BIT(PORTA, A_u8PinNumber); break;
 7ca:	2b b3       	in	r18, 0x1b	; 27
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <MDIO_vSetPinValue+0x20>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <MDIO_vSetPinValue+0x1c>
 7da:	82 2b       	or	r24, r18
 7dc:	8b bb       	out	0x1b, r24	; 27
 7de:	08 95       	ret
		case PORT_B: SET_BIT(PORTB, A_u8PinNumber); break;
 7e0:	28 b3       	in	r18, 0x18	; 24
 7e2:	81 e0       	ldi	r24, 0x01	; 1
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <MDIO_vSetPinValue+0x36>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	6a 95       	dec	r22
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <MDIO_vSetPinValue+0x32>
 7f0:	82 2b       	or	r24, r18
 7f2:	88 bb       	out	0x18, r24	; 24
 7f4:	08 95       	ret
		case PORT_C: SET_BIT(PORTC, A_u8PinNumber); break;
 7f6:	25 b3       	in	r18, 0x15	; 21
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	6a 95       	dec	r22
 804:	e2 f7       	brpl	.-8      	; 0x7fe <MDIO_vSetPinValue+0x48>
 806:	82 2b       	or	r24, r18
 808:	85 bb       	out	0x15, r24	; 21
 80a:	08 95       	ret
		case PORT_D: SET_BIT(PORTD, A_u8PinNumber); break;
 80c:	22 b3       	in	r18, 0x12	; 18
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 c0       	rjmp	.+4      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	6a 95       	dec	r22
 81a:	e2 f7       	brpl	.-8      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 81c:	82 2b       	or	r24, r18
 81e:	82 bb       	out	0x12, r24	; 18
 820:	08 95       	ret
		}
	}else if (A_u8Value == LOW)
 822:	41 11       	cpse	r20, r1
 824:	37 c0       	rjmp	.+110    	; 0x894 <__stack+0x35>
	{
		switch (A_u8PortNumber)
 826:	81 30       	cpi	r24, 0x01	; 1
 828:	91 f0       	breq	.+36     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 82a:	28 f0       	brcs	.+10     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 82c:	82 30       	cpi	r24, 0x02	; 2
 82e:	d9 f0       	breq	.+54     	; 0x866 <__stack+0x7>
 830:	83 30       	cpi	r24, 0x03	; 3
 832:	29 f1       	breq	.+74     	; 0x87e <__stack+0x1f>
 834:	08 95       	ret
		{
		case PORT_A: CLR_BIT(PORTA, A_u8PinNumber); break;
 836:	2b b3       	in	r18, 0x1b	; 27
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	02 c0       	rjmp	.+4      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	6a 95       	dec	r22
 844:	e2 f7       	brpl	.-8      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 846:	80 95       	com	r24
 848:	82 23       	and	r24, r18
 84a:	8b bb       	out	0x1b, r24	; 27
 84c:	08 95       	ret
		case PORT_B: CLR_BIT(PORTB, A_u8PinNumber); break;
 84e:	28 b3       	in	r18, 0x18	; 24
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	6a 95       	dec	r22
 85c:	e2 f7       	brpl	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 85e:	80 95       	com	r24
 860:	82 23       	and	r24, r18
 862:	88 bb       	out	0x18, r24	; 24
 864:	08 95       	ret
		case PORT_C: CLR_BIT(PORTC, A_u8PinNumber); break;
 866:	25 b3       	in	r18, 0x15	; 21
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	6a 95       	dec	r22
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	80 95       	com	r24
 878:	82 23       	and	r24, r18
 87a:	85 bb       	out	0x15, r24	; 21
 87c:	08 95       	ret
		case PORT_D: CLR_BIT(PORTD, A_u8PinNumber); break;
 87e:	22 b3       	in	r18, 0x12	; 18
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	82 23       	and	r24, r18
 892:	82 bb       	out	0x12, r24	; 18
 894:	08 95       	ret

00000896 <MDIO_vSetPortValue>:
		//DO Nothing
	}
}

void MDIO_vSetPortValue(u8 A_u8PortNumber, u8 A_u8Value){
	switch (A_u8PortNumber){
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	41 f0       	breq	.+16     	; 0x8aa <MDIO_vSetPortValue+0x14>
 89a:	28 f0       	brcs	.+10     	; 0x8a6 <MDIO_vSetPortValue+0x10>
 89c:	82 30       	cpi	r24, 0x02	; 2
 89e:	39 f0       	breq	.+14     	; 0x8ae <MDIO_vSetPortValue+0x18>
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	39 f0       	breq	.+14     	; 0x8b2 <MDIO_vSetPortValue+0x1c>
 8a4:	08 95       	ret
	case PORT_A: PORTA = A_u8Value; break;
 8a6:	6b bb       	out	0x1b, r22	; 27
 8a8:	08 95       	ret
	case PORT_B: PORTB = A_u8Value; break;
 8aa:	68 bb       	out	0x18, r22	; 24
 8ac:	08 95       	ret
	case PORT_C: PORTC = A_u8Value; break;
 8ae:	65 bb       	out	0x15, r22	; 21
 8b0:	08 95       	ret
	case PORT_D: PORTD = A_u8Value; break;
 8b2:	62 bb       	out	0x12, r22	; 18
 8b4:	08 95       	ret

000008b6 <MDIO_u8GetPinValue>:
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
	switch (A_u8PortNumber){
 8b6:	81 30       	cpi	r24, 0x01	; 1
 8b8:	79 f0       	breq	.+30     	; 0x8d8 <MDIO_u8GetPinValue+0x22>
 8ba:	28 f0       	brcs	.+10     	; 0x8c6 <MDIO_u8GetPinValue+0x10>
 8bc:	82 30       	cpi	r24, 0x02	; 2
 8be:	a9 f0       	breq	.+42     	; 0x8ea <MDIO_u8GetPinValue+0x34>
 8c0:	83 30       	cpi	r24, 0x03	; 3
 8c2:	e1 f0       	breq	.+56     	; 0x8fc <MDIO_u8GetPinValue+0x46>
 8c4:	24 c0       	rjmp	.+72     	; 0x90e <MDIO_u8GetPinValue+0x58>
		case PORT_A: Local_u8PinValue = GET_BIT(PINA, A_u8PinNumber); break;
 8c6:	89 b3       	in	r24, 0x19	; 25
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <MDIO_u8GetPinValue+0x1a>
 8cc:	95 95       	asr	r25
 8ce:	87 95       	ror	r24
 8d0:	6a 95       	dec	r22
 8d2:	e2 f7       	brpl	.-8      	; 0x8cc <MDIO_u8GetPinValue+0x16>
 8d4:	81 70       	andi	r24, 0x01	; 1
 8d6:	08 95       	ret
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
 8d8:	86 b3       	in	r24, 0x16	; 22
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <MDIO_u8GetPinValue+0x2c>
 8de:	95 95       	asr	r25
 8e0:	87 95       	ror	r24
 8e2:	6a 95       	dec	r22
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <MDIO_u8GetPinValue+0x28>
 8e6:	81 70       	andi	r24, 0x01	; 1
 8e8:	08 95       	ret
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
 8ea:	83 b3       	in	r24, 0x13	; 19
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <MDIO_u8GetPinValue+0x3e>
 8f0:	95 95       	asr	r25
 8f2:	87 95       	ror	r24
 8f4:	6a 95       	dec	r22
 8f6:	e2 f7       	brpl	.-8      	; 0x8f0 <MDIO_u8GetPinValue+0x3a>
 8f8:	81 70       	andi	r24, 0x01	; 1
 8fa:	08 95       	ret
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
 8fc:	80 b3       	in	r24, 0x10	; 16
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <MDIO_u8GetPinValue+0x50>
 902:	95 95       	asr	r25
 904:	87 95       	ror	r24
 906:	6a 95       	dec	r22
 908:	e2 f7       	brpl	.-8      	; 0x902 <MDIO_u8GetPinValue+0x4c>
 90a:	81 70       	andi	r24, 0x01	; 1
 90c:	08 95       	ret
	}
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
 90e:	82 e3       	ldi	r24, 0x32	; 50
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
		}
	return Local_u8PinValue;
}
 910:	08 95       	ret

00000912 <__vector_17>:
	if (ptr_to_fun != NULL) {
		EEPROM_Call_Back = ptr_to_fun;
	}
}

void __vector_17(void) {
 912:	1f 92       	push	r1
 914:	0f 92       	push	r0
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	0f 92       	push	r0
 91a:	11 24       	eor	r1, r1
 91c:	2f 93       	push	r18
 91e:	3f 93       	push	r19
 920:	4f 93       	push	r20
 922:	5f 93       	push	r21
 924:	6f 93       	push	r22
 926:	7f 93       	push	r23
 928:	8f 93       	push	r24
 92a:	9f 93       	push	r25
 92c:	af 93       	push	r26
 92e:	bf 93       	push	r27
 930:	ef 93       	push	r30
 932:	ff 93       	push	r31
	if (EEPROM_Call_Back != NULL)
 934:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <EEPROM_Call_Back>
 938:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <EEPROM_Call_Back+0x1>
 93c:	30 97       	sbiw	r30, 0x00	; 0
 93e:	09 f0       	breq	.+2      	; 0x942 <__vector_17+0x30>
		EEPROM_Call_Back();
 940:	09 95       	icall
}
 942:	ff 91       	pop	r31
 944:	ef 91       	pop	r30
 946:	bf 91       	pop	r27
 948:	af 91       	pop	r26
 94a:	9f 91       	pop	r25
 94c:	8f 91       	pop	r24
 94e:	7f 91       	pop	r23
 950:	6f 91       	pop	r22
 952:	5f 91       	pop	r21
 954:	4f 91       	pop	r20
 956:	3f 91       	pop	r19
 958:	2f 91       	pop	r18
 95a:	0f 90       	pop	r0
 95c:	0f be       	out	0x3f, r0	; 63
 95e:	0f 90       	pop	r0
 960:	1f 90       	pop	r1
 962:	18 95       	reti

00000964 <MUSART_vInit>:
		USART_TXC_Call_Back = CallBack;
	}
}
void MUSART_vSetUDRECallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		USART_UDRE_Call_Back = CallBack;
 964:	89 b9       	out	0x09, r24	; 9
 966:	90 bd       	out	0x20, r25	; 32
 968:	8a b1       	in	r24, 0x0a	; 10
 96a:	8b 7f       	andi	r24, 0xFB	; 251
 96c:	8a b9       	out	0x0a, r24	; 10
 96e:	86 e8       	ldi	r24, 0x86	; 134
 970:	80 bd       	out	0x20, r24	; 32
 972:	8a b1       	in	r24, 0x0a	; 10
 974:	80 61       	ori	r24, 0x10	; 16
 976:	8a b9       	out	0x0a, r24	; 10
 978:	8a b1       	in	r24, 0x0a	; 10
 97a:	88 60       	ori	r24, 0x08	; 8
 97c:	8a b9       	out	0x0a, r24	; 10
 97e:	08 95       	ret

00000980 <MUSART_vTransmit>:
 980:	5d 9b       	sbis	0x0b, 5	; 11
 982:	fe cf       	rjmp	.-4      	; 0x980 <MUSART_vTransmit>
 984:	8c b9       	out	0x0c, r24	; 12
 986:	08 95       	ret

00000988 <MUSART_u8Receive>:
 988:	5f 9b       	sbis	0x0b, 7	; 11
 98a:	fe cf       	rjmp	.-4      	; 0x988 <MUSART_u8Receive>
 98c:	5c 99       	sbic	0x0b, 4	; 11
 98e:	06 c0       	rjmp	.+12     	; 0x99c <MUSART_u8Receive+0x14>
 990:	5b 99       	sbic	0x0b, 3	; 11
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <MUSART_u8Receive+0x18>
 994:	5a 99       	sbic	0x0b, 2	; 11
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <MUSART_u8Receive+0x1c>
 998:	8c b1       	in	r24, 0x0c	; 12
 99a:	08 95       	ret
 99c:	8f ef       	ldi	r24, 0xFF	; 255
 99e:	08 95       	ret
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	08 95       	ret
 9a4:	8f ef       	ldi	r24, 0xFF	; 255
 9a6:	08 95       	ret

000009a8 <MUSART_u8UnreadDate>:
 9a8:	8b b1       	in	r24, 0x0b	; 11
 9aa:	88 1f       	adc	r24, r24
 9ac:	88 27       	eor	r24, r24
 9ae:	88 1f       	adc	r24, r24
 9b0:	08 95       	ret

000009b2 <MUSART_vTransmitString>:
 9b2:	0f 93       	push	r16
 9b4:	1f 93       	push	r17
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	8c 01       	movw	r16, r24
 9bc:	d6 2f       	mov	r29, r22
 9be:	c0 e0       	ldi	r28, 0x00	; 0
 9c0:	07 c0       	rjmp	.+14     	; 0x9d0 <MUSART_vTransmitString+0x1e>
 9c2:	f8 01       	movw	r30, r16
 9c4:	ec 0f       	add	r30, r28
 9c6:	f1 1d       	adc	r31, r1
 9c8:	80 81       	ld	r24, Z
 9ca:	0e 94 c0 04 	call	0x980	; 0x980 <MUSART_vTransmit>
 9ce:	cf 5f       	subi	r28, 0xFF	; 255
 9d0:	cd 17       	cp	r28, r29
 9d2:	b8 f3       	brcs	.-18     	; 0x9c2 <MUSART_vTransmitString+0x10>
 9d4:	df 91       	pop	r29
 9d6:	cf 91       	pop	r28
 9d8:	1f 91       	pop	r17
 9da:	0f 91       	pop	r16
 9dc:	08 95       	ret

000009de <__vector_13>:
	}
}

void __vector_13(void) {
 9de:	1f 92       	push	r1
 9e0:	0f 92       	push	r0
 9e2:	0f b6       	in	r0, 0x3f	; 63
 9e4:	0f 92       	push	r0
 9e6:	11 24       	eor	r1, r1
 9e8:	2f 93       	push	r18
 9ea:	3f 93       	push	r19
 9ec:	4f 93       	push	r20
 9ee:	5f 93       	push	r21
 9f0:	6f 93       	push	r22
 9f2:	7f 93       	push	r23
 9f4:	8f 93       	push	r24
 9f6:	9f 93       	push	r25
 9f8:	af 93       	push	r26
 9fa:	bf 93       	push	r27
 9fc:	ef 93       	push	r30
 9fe:	ff 93       	push	r31
	if (USART_RXC_Call_Back != NULL)
 a00:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <USART_RXC_Call_Back>
 a04:	f0 91 26 01 	lds	r31, 0x0126	; 0x800126 <USART_RXC_Call_Back+0x1>
 a08:	30 97       	sbiw	r30, 0x00	; 0
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__vector_13+0x30>
		USART_RXC_Call_Back();
 a0c:	09 95       	icall
}
 a0e:	ff 91       	pop	r31
 a10:	ef 91       	pop	r30
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	7f 91       	pop	r23
 a1c:	6f 91       	pop	r22
 a1e:	5f 91       	pop	r21
 a20:	4f 91       	pop	r20
 a22:	3f 91       	pop	r19
 a24:	2f 91       	pop	r18
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <__vector_14>:

void __vector_14(void) {
 a30:	1f 92       	push	r1
 a32:	0f 92       	push	r0
 a34:	0f b6       	in	r0, 0x3f	; 63
 a36:	0f 92       	push	r0
 a38:	11 24       	eor	r1, r1
 a3a:	2f 93       	push	r18
 a3c:	3f 93       	push	r19
 a3e:	4f 93       	push	r20
 a40:	5f 93       	push	r21
 a42:	6f 93       	push	r22
 a44:	7f 93       	push	r23
 a46:	8f 93       	push	r24
 a48:	9f 93       	push	r25
 a4a:	af 93       	push	r26
 a4c:	bf 93       	push	r27
 a4e:	ef 93       	push	r30
 a50:	ff 93       	push	r31
	if (USART_UDRE_Call_Back != NULL)
 a52:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <USART_UDRE_Call_Back>
 a56:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <USART_UDRE_Call_Back+0x1>
 a5a:	30 97       	sbiw	r30, 0x00	; 0
 a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_14+0x30>
		USART_UDRE_Call_Back();
 a5e:	09 95       	icall
}
 a60:	ff 91       	pop	r31
 a62:	ef 91       	pop	r30
 a64:	bf 91       	pop	r27
 a66:	af 91       	pop	r26
 a68:	9f 91       	pop	r25
 a6a:	8f 91       	pop	r24
 a6c:	7f 91       	pop	r23
 a6e:	6f 91       	pop	r22
 a70:	5f 91       	pop	r21
 a72:	4f 91       	pop	r20
 a74:	3f 91       	pop	r19
 a76:	2f 91       	pop	r18
 a78:	0f 90       	pop	r0
 a7a:	0f be       	out	0x3f, r0	; 63
 a7c:	0f 90       	pop	r0
 a7e:	1f 90       	pop	r1
 a80:	18 95       	reti

00000a82 <__vector_15>:

void __vector_15(void) {
 a82:	1f 92       	push	r1
 a84:	0f 92       	push	r0
 a86:	0f b6       	in	r0, 0x3f	; 63
 a88:	0f 92       	push	r0
 a8a:	11 24       	eor	r1, r1
 a8c:	2f 93       	push	r18
 a8e:	3f 93       	push	r19
 a90:	4f 93       	push	r20
 a92:	5f 93       	push	r21
 a94:	6f 93       	push	r22
 a96:	7f 93       	push	r23
 a98:	8f 93       	push	r24
 a9a:	9f 93       	push	r25
 a9c:	af 93       	push	r26
 a9e:	bf 93       	push	r27
 aa0:	ef 93       	push	r30
 aa2:	ff 93       	push	r31
	if (USART_TXC_Call_Back != NULL)
 aa4:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <USART_TXC_Call_Back>
 aa8:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <USART_TXC_Call_Back+0x1>
 aac:	30 97       	sbiw	r30, 0x00	; 0
 aae:	09 f0       	breq	.+2      	; 0xab2 <__vector_15+0x30>
		USART_TXC_Call_Back();
 ab0:	09 95       	icall
}
 ab2:	ff 91       	pop	r31
 ab4:	ef 91       	pop	r30
 ab6:	bf 91       	pop	r27
 ab8:	af 91       	pop	r26
 aba:	9f 91       	pop	r25
 abc:	8f 91       	pop	r24
 abe:	7f 91       	pop	r23
 ac0:	6f 91       	pop	r22
 ac2:	5f 91       	pop	r21
 ac4:	4f 91       	pop	r20
 ac6:	3f 91       	pop	r19
 ac8:	2f 91       	pop	r18
 aca:	0f 90       	pop	r0
 acc:	0f be       	out	0x3f, r0	; 63
 ace:	0f 90       	pop	r0
 ad0:	1f 90       	pop	r1
 ad2:	18 95       	reti

00000ad4 <_exit>:
 ad4:	f8 94       	cli

00000ad6 <__stop_program>:
 ad6:	ff cf       	rjmp	.-2      	; 0xad6 <__stop_program>
