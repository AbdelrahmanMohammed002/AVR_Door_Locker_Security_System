
Master_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  00000d7c  00000e10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080014e  0080014e  00000efe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000efe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002839  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ddb  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020c6  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008e4  00000000  00000000  00006988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005f35  00000000  00000000  0000726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018da  00000000  00000000  0000d1a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c0  00000000  00000000  0000ea7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001bb5  00000000  00000000  0000ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_6>
  1c:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_7>
  20:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__vector_8>
  24:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__vector_13>
  38:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__vector_14>
  3c:	0c 94 93 06 	jmp	0xd26	; 0xd26 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__vector_17>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 34       	cpi	r26, 0x4E	; 78
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e4       	ldi	r26, 0x4E	; 78
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 01 	call	0x2f2	; 0x2f2 <main>
  8a:	0c 94 bc 06 	jmp	0xd78	; 0xd78 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TIMER1_CTC_INT_ISR>:
	MUSART_vTransmitString(local_u8ReEnteredPassword, PASSWORD_SIZE);

}

void TIMER1_CTC_INT_ISR() {
	if (global_u8TicksCounter == 15) {
  92:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <global_u8TicksCounter>
  96:	8f 30       	cpi	r24, 0x0F	; 15
  98:	41 f4       	brne	.+16     	; 0xaa <TIMER1_CTC_INT_ISR+0x18>
		global_u8SecondsCounter++;
  9a:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <global_u8SecondsCounter>
  9e:	8f 5f       	subi	r24, 0xFF	; 255
  a0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <global_u8SecondsCounter>
		global_u8TicksCounter = 0;
  a4:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <global_u8TicksCounter>
  a8:	08 95       	ret
		} else {
		global_u8TicksCounter++;
  aa:	8f 5f       	subi	r24, 0xFF	; 255
  ac:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <global_u8TicksCounter>
  b0:	08 95       	ret

000000b2 <Function_vGetPassword>:
* Function_vGetPassword: Gets a password from the user.
*
* @param A_ScreenString: The string to display on the screen.
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
  b2:	ef 92       	push	r14
  b4:	ff 92       	push	r15
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	7b 01       	movw	r14, r22
	u8 *local_u8PressedKey = NOT_PRESSED;
	u8 local_u8Counter = 0;

	HLCD_vSendString(A_ScreenString); // Display the prompt on the LCD
  be:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
* @param A_ScreenString: The string to display on the screen.
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
	u8 *local_u8PressedKey = NOT_PRESSED;
	u8 local_u8Counter = 0;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
*
* @param A_ScreenString: The string to display on the screen.
* @param A_PointerToPassword: A pointer to the buffer where the password will be stored.
*/
void Function_vGetPassword(u8 *A_ScreenString, u8 *A_PointerToPassword) {
	u8 *local_u8PressedKey = NOT_PRESSED;
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
	u8 local_u8Counter = 0;

	HLCD_vSendString(A_ScreenString); // Display the prompt on the LCD

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
  c8:	2e c0       	rjmp	.+92     	; 0x126 <Function_vGetPassword+0x74>
		// Inner loop to get each character of the password
		while (local_u8Counter < PASSWORD_SIZE - 1) { // Ensure space for null terminator
			local_u8PressedKey = HKPD_u8GetPressedKey(); // Get the pressed key from the keypad
  ca:	0e 94 c0 02 	call	0x580	; 0x580 <HKPD_u8GetPressedKey>
  ce:	8c 01       	movw	r16, r24

			HLCD_vMoveTo(1, local_u8Counter); // Move the cursor to the current position
  d0:	6c 2f       	mov	r22, r28
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>

			// Check if a valid key was pressed
			if (*local_u8PressedKey != NOT_PRESSED && *local_u8PressedKey != '=') {
  d8:	f8 01       	movw	r30, r16
  da:	80 81       	ld	r24, Z
  dc:	88 23       	and	r24, r24
  de:	f9 f0       	breq	.+62     	; 0x11e <Function_vGetPassword+0x6c>
  e0:	8d 33       	cpi	r24, 0x3D	; 61
  e2:	e9 f0       	breq	.+58     	; 0x11e <Function_vGetPassword+0x6c>
				*(A_PointerToPassword + local_u8Counter) = *local_u8PressedKey; // Store the character in the password buffer
  e4:	f7 01       	movw	r30, r14
  e6:	ec 0f       	add	r30, r28
  e8:	f1 1d       	adc	r31, r1
  ea:	80 83       	st	Z, r24

				HLCD_vSendData(*(A_PointerToPassword + local_u8Counter)); // Display the character on the LCD
  ec:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <HLCD_vSendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	ff e3       	ldi	r31, 0x3F	; 63
  f2:	2d e0       	ldi	r18, 0x0D	; 13
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	f1 50       	subi	r31, 0x01	; 1
  f8:	20 40       	sbci	r18, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <Function_vGetPassword+0x44>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <Function_vGetPassword+0x4e>
 100:	00 00       	nop

				_delay_ms(1000); // Delay for readability

				HLCD_vMoveTo(1, local_u8Counter); // Clear the character on the LCD
 102:	6c 2f       	mov	r22, r28
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
				HLCD_vSendData(0x2A);
 10a:	8a e2       	ldi	r24, 0x2A	; 42
 10c:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <HLCD_vSendData>

				local_u8Counter++; // Increment the counter
 110:	cf 5f       	subi	r28, 0xFF	; 255
				HLCD_vMoveTo(1, local_u8Counter); // Move the cursor to the next position
 112:	6c 2f       	mov	r22, r28
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
				*local_u8PressedKey = NOT_PRESSED; // Clear the pressed key flag
 11a:	f8 01       	movw	r30, r16
 11c:	10 82       	st	Z, r1
	HLCD_vSendString(A_ScreenString); // Display the prompt on the LCD

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
		// Inner loop to get each character of the password
		while (local_u8Counter < PASSWORD_SIZE - 1) { // Ensure space for null terminator
 11e:	c5 30       	cpi	r28, 0x05	; 5
 120:	a0 f2       	brcs	.-88     	; 0xca <Function_vGetPassword+0x18>
				local_u8Counter++; // Increment the counter
				HLCD_vMoveTo(1, local_u8Counter); // Move the cursor to the next position
				*local_u8PressedKey = NOT_PRESSED; // Clear the pressed key flag
			}
		}
		local_u8PressedKey = HKPD_u8GetPressedKey(); // Check if the '=' key was pressed to exit the loop
 122:	0e 94 c0 02 	call	0x580	; 0x580 <HKPD_u8GetPressedKey>
	u8 local_u8Counter = 0;

	HLCD_vSendString(A_ScreenString); // Display the prompt on the LCD

	// Main loop to get the password
	while (*local_u8PressedKey != '=') {
 126:	fc 01       	movw	r30, r24
 128:	80 81       	ld	r24, Z
 12a:	8d 33       	cpi	r24, 0x3D	; 61
 12c:	c1 f7       	brne	.-16     	; 0x11e <Function_vGetPassword+0x6c>
				*local_u8PressedKey = NOT_PRESSED; // Clear the pressed key flag
			}
		}
		local_u8PressedKey = HKPD_u8GetPressedKey(); // Check if the '=' key was pressed to exit the loop
	}
	*(A_PointerToPassword + local_u8Counter) = '\0'; // Null-terminate the password string
 12e:	f7 01       	movw	r30, r14
 130:	ec 0f       	add	r30, r28
 132:	f1 1d       	adc	r31, r1
 134:	10 82       	st	Z, r1
	HLCD_vDisplayClear(); // Clear the display for next use
 136:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
}
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

00000146 <Function_vWaitingScreen>:

/**
* Function_vWaitingScreen: Displays a "Please Wait!" message with a loading effect.
*/
void Function_vWaitingScreen(void) {
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	2d 97       	sbiw	r28, 0x0d	; 13
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Waiting[] = "PLEASE WAIT!";
 15c:	8d e0       	ldi	r24, 0x0D	; 13
 15e:	e0 e3       	ldi	r30, 0x30	; 48
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	de 01       	movw	r26, r28
 164:	11 96       	adiw	r26, 0x01	; 1
 166:	01 90       	ld	r0, Z+
 168:	0d 92       	st	X+, r0
 16a:	8a 95       	dec	r24
 16c:	e1 f7       	brne	.-8      	; 0x166 <Function_vWaitingScreen+0x20>
	HLCD_vSendString(local_u8Waiting);
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>

	for (u8 i = 13; i <= 16; i++) {
 176:	1d e0       	ldi	r17, 0x0D	; 13
 178:	11 c0       	rjmp	.+34     	; 0x19c <Function_vWaitingScreen+0x56>
		HLCD_vMoveTo(0, i);
 17a:	61 2f       	mov	r22, r17
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
		HLCD_vSendData(0xFF);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <HLCD_vSendData>
 188:	2f e9       	ldi	r18, 0x9F	; 159
 18a:	86 e8       	ldi	r24, 0x86	; 134
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <Function_vWaitingScreen+0x48>
 196:	00 c0       	rjmp	.+0      	; 0x198 <Function_vWaitingScreen+0x52>
 198:	00 00       	nop
*/
void Function_vWaitingScreen(void) {
	u8 local_u8Waiting[] = "PLEASE WAIT!";
	HLCD_vSendString(local_u8Waiting);

	for (u8 i = 13; i <= 16; i++) {
 19a:	1f 5f       	subi	r17, 0xFF	; 255
 19c:	11 31       	cpi	r17, 0x11	; 17
 19e:	68 f3       	brcs	.-38     	; 0x17a <Function_vWaitingScreen+0x34>
		HLCD_vMoveTo(0, i);
		HLCD_vSendData(0xFF);
		_delay_ms(500);
	}
}
 1a0:	2d 96       	adiw	r28, 0x0d	; 13
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	1f 91       	pop	r17
 1b2:	08 95       	ret

000001b4 <Function_vGetOption>:
/**
* Function_vGetOption: Retrieves the user's option ('1' or '2') via the keypad.
*
* @param A_u8Option: A pointer to the variable where the selected option will be stored.
*/
void Function_vGetOption(u8 *A_u8Option) {
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	ec 01       	movw	r28, r24
	u8 *local_u8PressedKey = NOT_PRESSED;
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0

	// Loop until a valid option ('1' or '2') is selected
	while (*local_u8PressedKey != '1' && *local_u8PressedKey != '2') {
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <Function_vGetOption+0x10>
		local_u8PressedKey = HKPD_u8GetPressedKey();
 1c0:	0e 94 c0 02 	call	0x580	; 0x580 <HKPD_u8GetPressedKey>
*/
void Function_vGetOption(u8 *A_u8Option) {
	u8 *local_u8PressedKey = NOT_PRESSED;

	// Loop until a valid option ('1' or '2') is selected
	while (*local_u8PressedKey != '1' && *local_u8PressedKey != '2') {
 1c4:	fc 01       	movw	r30, r24
 1c6:	20 81       	ld	r18, Z
 1c8:	3f ec       	ldi	r19, 0xCF	; 207
 1ca:	32 0f       	add	r19, r18
 1cc:	32 30       	cpi	r19, 0x02	; 2
 1ce:	c0 f7       	brcc	.-16     	; 0x1c0 <Function_vGetOption+0xc>
		local_u8PressedKey = HKPD_u8GetPressedKey();
	}

	*A_u8Option = *local_u8PressedKey; // Store the selected option
 1d0:	28 83       	st	Y, r18
	*local_u8PressedKey = NOT_PRESSED; // Clear the pressed key flag
 1d2:	10 82       	st	Z, r1
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <Function_vCreatePassword>:


void Function_vCreatePassword(u8 (*A_u8LCDScreens)[16]){
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	2c 97       	sbiw	r28, 0x0c	; 12
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	8c 01       	movw	r16, r24
	u8 local_u8EnteredPassword[PASSWORD_SIZE], local_u8ReEnteredPassword[PASSWORD_SIZE];

	// Get the new password from the user
	Function_vGetPassword(A_u8LCDScreens[0], local_u8EnteredPassword);
 1f4:	be 01       	movw	r22, r28
 1f6:	6f 5f       	subi	r22, 0xFF	; 255
 1f8:	7f 4f       	sbci	r23, 0xFF	; 255
 1fa:	0e 94 59 00 	call	0xb2	; 0xb2 <Function_vGetPassword>
	Function_vGetPassword(A_u8LCDScreens[1], local_u8ReEnteredPassword);
 1fe:	be 01       	movw	r22, r28
 200:	69 5f       	subi	r22, 0xF9	; 249
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	c8 01       	movw	r24, r16
 206:	40 96       	adiw	r24, 0x10	; 16
 208:	0e 94 59 00 	call	0xb2	; 0xb2 <Function_vGetPassword>

	// Transmit the password creation request to the Slave MCU
	MUSART_vTransmitString(local_u8EnteredPassword, PASSWORD_SIZE);
 20c:	66 e0       	ldi	r22, 0x06	; 6
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	0e 94 2b 06 	call	0xc56	; 0xc56 <MUSART_vTransmitString>
	MUSART_vTransmitString(local_u8ReEnteredPassword, PASSWORD_SIZE);
 216:	66 e0       	ldi	r22, 0x06	; 6
 218:	ce 01       	movw	r24, r28
 21a:	07 96       	adiw	r24, 0x07	; 7
 21c:	0e 94 2b 06 	call	0xc56	; 0xc56 <MUSART_vTransmitString>

}
 220:	2c 96       	adiw	r28, 0x0c	; 12
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	f8 94       	cli
 226:	de bf       	out	0x3e, r29	; 62
 228:	0f be       	out	0x3f, r0	; 63
 22a:	cd bf       	out	0x3d, r28	; 61
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	08 95       	ret

00000236 <Function_vSystemFreeze>:
		} else {
		global_u8TicksCounter++;
	}
}

void Function_vSystemFreeze(u8 (*A_u8LCDScreens)[16]){
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	ec 01       	movw	r28, r24
	// Initialize Timer1 and set callback for channel A CTC interrupt
	MTIMER1_vInit();
 23c:	0e 94 1b 05 	call	0xa36	; 0xa36 <MTIMER1_vInit>
	MTIMER1_vChannelASetCTCCallBack(&TIMER1_CTC_INT_ISR);
 240:	89 e4       	ldi	r24, 0x49	; 73
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 51 05 	call	0xaa2	; 0xaa2 <MTIMER1_vChannelASetCTCCallBack>
	MTIMER1_vChannelASetCTCRegister(62500);
 248:	84 e2       	ldi	r24, 0x24	; 36
 24a:	94 ef       	ldi	r25, 0xF4	; 244
 24c:	0e 94 3a 05 	call	0xa74	; 0xa74 <MTIMER1_vChannelASetCTCRegister>
	MTIMER1_vChannelAEnableCTCINT();
 250:	0e 94 41 05 	call	0xa82	; 0xa82 <MTIMER1_vChannelAEnableCTCINT>
	
	// Enable global interrupts
	MGIE_vEnableInterrupts();
 254:	0e 94 17 05 	call	0xa2e	; 0xa2e <MGIE_vEnableInterrupts>
	
	HLCD_vSendString(A_u8LCDScreens[12]);
 258:	ce 01       	movw	r24, r28
 25a:	80 54       	subi	r24, 0x40	; 64
 25c:	9f 4f       	sbci	r25, 0xFF	; 255
 25e:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
	while(global_u8SecondsCounter<60);
 262:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <global_u8SecondsCounter>
 266:	8c 33       	cpi	r24, 0x3C	; 60
 268:	e0 f3       	brcs	.-8      	; 0x262 <Function_vSystemFreeze+0x2c>
	HLCD_vDisplayClear();
 26a:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
	global_u8FailureCounter= 0;
 26e:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
	global_u8SecondsCounter =0;
 272:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <global_u8SecondsCounter>
	MTIMER1_vDisInit();
 276:	0e 94 37 05 	call	0xa6e	; 0xa6e <MTIMER1_vDisInit>
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <Function_vOpenDoor>:

void Function_vOpenDoor(u8 (*A_u8LCDScreens)[16]){
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
	
	// Initialize Timer1 and set callback for channel A CTC interrupt
	MTIMER1_vInit();
 286:	0e 94 1b 05 	call	0xa36	; 0xa36 <MTIMER1_vInit>
	MTIMER1_vChannelASetCTCCallBack(&TIMER1_CTC_INT_ISR);
 28a:	89 e4       	ldi	r24, 0x49	; 73
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <MTIMER1_vChannelASetCTCCallBack>
	MTIMER1_vChannelASetCTCRegister(62500);
 292:	84 e2       	ldi	r24, 0x24	; 36
 294:	94 ef       	ldi	r25, 0xF4	; 244
 296:	0e 94 3a 05 	call	0xa74	; 0xa74 <MTIMER1_vChannelASetCTCRegister>
	MTIMER1_vChannelAEnableCTCINT();
 29a:	0e 94 41 05 	call	0xa82	; 0xa82 <MTIMER1_vChannelAEnableCTCINT>
		
	// Enable global interrupts
	MGIE_vEnableInterrupts();
 29e:	0e 94 17 05 	call	0xa2e	; 0xa2e <MGIE_vEnableInterrupts>
	
	// Open the door and display status messages
	HLCD_vSendString(A_u8LCDScreens[7]);
 2a2:	ce 01       	movw	r24, r28
 2a4:	80 59       	subi	r24, 0x90	; 144
 2a6:	9f 4f       	sbci	r25, 0xFF	; 255
 2a8:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
		while(global_u8SecondsCounter<15);
 2ac:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <global_u8SecondsCounter>
 2b0:	8f 30       	cpi	r24, 0x0F	; 15
 2b2:	e0 f3       	brcs	.-8      	; 0x2ac <Function_vOpenDoor+0x2c>

	HLCD_vDisplayClear();
 2b4:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
	HLCD_vSendString(A_u8LCDScreens[8]);
 2b8:	ce 01       	movw	r24, r28
 2ba:	80 58       	subi	r24, 0x80	; 128
 2bc:	9f 4f       	sbci	r25, 0xFF	; 255
 2be:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
		while(global_u8SecondsCounter<19);
 2c2:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <global_u8SecondsCounter>
 2c6:	83 31       	cpi	r24, 0x13	; 19
 2c8:	e0 f3       	brcs	.-8      	; 0x2c2 <Function_vOpenDoor+0x42>

	HLCD_vDisplayClear();
 2ca:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
	HLCD_vSendString(A_u8LCDScreens[9]);
 2ce:	ce 01       	movw	r24, r28
 2d0:	80 57       	subi	r24, 0x70	; 112
 2d2:	9f 4f       	sbci	r25, 0xFF	; 255
 2d4:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
		while(global_u8SecondsCounter<34);
 2d8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <global_u8SecondsCounter>
 2dc:	82 32       	cpi	r24, 0x22	; 34
 2de:	e0 f3       	brcs	.-8      	; 0x2d8 <Function_vOpenDoor+0x58>

	HLCD_vDisplayClear();
 2e0:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
	global_u8SecondsCounter =0;
 2e4:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <global_u8SecondsCounter>
	MTIMER1_vDisInit();
 2e8:	0e 94 37 05 	call	0xa6e	; 0xa6e <MTIMER1_vDisInit>
}
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	08 95       	ret

000002f2 <main>:



int main(void) {
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	c7 5d       	subi	r28, 0xD7	; 215
 2fc:	d1 09       	sbc	r29, r1
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
	// Initialize MCU peripherals
	MDIO_vSetPinDirection(PORT_D, 0, INPUT);  // RX
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(PORT_D, 1, OUTPUT); // TX
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	83 e0       	ldi	r24, 0x03	; 3
 318:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>

	HLCD_vInit();
 31c:	0e 94 2e 03 	call	0x65c	; 0x65c <HLCD_vInit>
	HKPD_vInit();
 320:	0e 94 6f 02 	call	0x4de	; 0x4de <HKPD_vInit>
	MUSART_vInit(51);
 324:	83 e3       	ldi	r24, 0x33	; 51
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 04 06 	call	0xc08	; 0xc08 <MUSART_vInit>

	// Initial handshake with Slave MCU
	MUSART_vTransmit(MASTER_READY);
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 12 06 	call	0xc24	; 0xc24 <MUSART_vTransmit>
	while (MUSART_u8Receive() != SLAVE_READY);
 332:	0e 94 16 06 	call	0xc2c	; 0xc2c <MUSART_u8Receive>
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	e1 f7       	brne	.-8      	; 0x332 <main+0x40>

	u8 local_u8MasterStatus, local_u8SlaveStatus;

	// LCD screen messages
	u8 local_u8LCDScreens[13][16] = {
 33a:	80 ed       	ldi	r24, 0xD0	; 208
 33c:	e0 e6       	ldi	r30, 0x60	; 96
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	de 01       	movw	r26, r28
 342:	11 96       	adiw	r26, 0x01	; 1
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x52>
		{"System is Locked"}
	};

	while (1) {
		// Wait for incoming data from Slave MCU
		while (!MUSART_u8UnreadDate());
 34c:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_u8UnreadDate>
 350:	88 23       	and	r24, r24
 352:	e1 f3       	breq	.-8      	; 0x34c <main+0x5a>
		local_u8SlaveStatus = MUSART_u8Receive();
 354:	0e 94 16 06 	call	0xc2c	; 0xc2c <MUSART_u8Receive>

		// Handle the CREATE_PASSWORD operation
		if (local_u8SlaveStatus == 0xFF) {
 358:	8f 3f       	cpi	r24, 0xFF	; 255
 35a:	51 f5       	brne	.+84     	; 0x3b0 <main+0xbe>
			
			MUSART_vTransmit(CREATE_PASSWORD);
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	0e 94 12 06 	call	0xc24	; 0xc24 <MUSART_vTransmit>
			
			// Create Passwords
			Function_vCreatePassword(local_u8LCDScreens);
 362:	ce 01       	movw	r24, r28
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	0e 94 ed 00 	call	0x1da	; 0x1da <Function_vCreatePassword>
			
			// Wait for the Slave MCU to process the request
			while (!MUSART_u8UnreadDate());
 36a:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_u8UnreadDate>
 36e:	88 23       	and	r24, r24
 370:	e1 f3       	breq	.-8      	; 0x36a <main+0x78>
			local_u8SlaveStatus = MUSART_u8Receive();
 372:	0e 94 16 06 	call	0xc2c	; 0xc2c <MUSART_u8Receive>
 376:	18 2f       	mov	r17, r24

			// Display success or error message
			Function_vWaitingScreen();
 378:	0e 94 a3 00 	call	0x146	; 0x146 <Function_vWaitingScreen>
			HLCD_vMoveTo(1, 0);
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
			HLCD_vSendString(local_u8SlaveStatus == SUCCEEDED ? local_u8LCDScreens[3] : local_u8LCDScreens[4]);
 384:	16 30       	cpi	r17, 0x06	; 6
 386:	19 f4       	brne	.+6      	; 0x38e <main+0x9c>
 388:	ce 01       	movw	r24, r28
 38a:	c1 96       	adiw	r24, 0x31	; 49
 38c:	03 c0       	rjmp	.+6      	; 0x394 <main+0xa2>
 38e:	ce 01       	movw	r24, r28
 390:	8f 5b       	subi	r24, 0xBF	; 191
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
 398:	2f e3       	ldi	r18, 0x3F	; 63
 39a:	82 e4       	ldi	r24, 0x42	; 66
 39c:	9f e0       	ldi	r25, 0x0F	; 15
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <main+0xac>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <main+0xb6>
 3a8:	00 00       	nop
			_delay_ms(5000);
			HLCD_vDisplayClear();
 3aa:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
 3ae:	ce cf       	rjmp	.-100    	; 0x34c <main+0x5a>
		}

		// Handle the existing password scenario
		else if (local_u8SlaveStatus != 0xFF) {
 3b0:	8f 3f       	cpi	r24, 0xFF	; 255
 3b2:	61 f2       	breq	.-104    	; 0x34c <main+0x5a>
			HLCD_vSendString(local_u8LCDScreens[5]);
 3b4:	ce 01       	movw	r24, r28
 3b6:	8f 5a       	subi	r24, 0xAF	; 175
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
			HLCD_vMoveTo(1, 0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
			HLCD_vSendString(local_u8LCDScreens[6]);
 3c6:	ce 01       	movw	r24, r28
 3c8:	8f 59       	subi	r24, 0x9F	; 159
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>

			u8 local_u8Option[1];
			Function_vGetOption(local_u8Option); // Get the user's option
 3d0:	ce 01       	movw	r24, r28
 3d2:	89 52       	subi	r24, 0x29	; 41
 3d4:	9f 4f       	sbci	r25, 0xFF	; 255
 3d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <Function_vGetOption>

			HLCD_vDisplayClear();
 3da:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
			u8 local_u8EnterPassword[PASSWORD_SIZE];
			Function_vGetPassword(local_u8LCDScreens[0], local_u8EnterPassword); // Get the password
 3de:	be 01       	movw	r22, r28
 3e0:	6f 52       	subi	r22, 0x2F	; 47
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	ce 01       	movw	r24, r28
 3e6:	01 96       	adiw	r24, 0x01	; 1
 3e8:	0e 94 59 00 	call	0xb2	; 0xb2 <Function_vGetPassword>

			// Handle OPEN_DOOR or CHANGE_PASSWORD
			MUSART_vTransmit(*local_u8Option == '1' ? OPEN_DOOR : CHANGE_PASSWORD);
 3ec:	c9 52       	subi	r28, 0x29	; 41
 3ee:	df 4f       	sbci	r29, 0xFF	; 255
 3f0:	88 81       	ld	r24, Y
 3f2:	c7 5d       	subi	r28, 0xD7	; 215
 3f4:	d0 40       	sbci	r29, 0x00	; 0
 3f6:	81 33       	cpi	r24, 0x31	; 49
 3f8:	11 f4       	brne	.+4      	; 0x3fe <main+0x10c>
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	01 c0       	rjmp	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	85 e0       	ldi	r24, 0x05	; 5
 400:	0e 94 12 06 	call	0xc24	; 0xc24 <MUSART_vTransmit>
			MUSART_vTransmitString(local_u8EnterPassword, PASSWORD_SIZE);
 404:	66 e0       	ldi	r22, 0x06	; 6
 406:	ce 01       	movw	r24, r28
 408:	8f 52       	subi	r24, 0x2F	; 47
 40a:	9f 4f       	sbci	r25, 0xFF	; 255
 40c:	0e 94 2b 06 	call	0xc56	; 0xc56 <MUSART_vTransmitString>

			// Wait for the Slave MCU's response
			while (!MUSART_u8UnreadDate());
 410:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_u8UnreadDate>
 414:	88 23       	and	r24, r24
 416:	e1 f3       	breq	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			local_u8SlaveStatus = MUSART_u8Receive();
 418:	0e 94 16 06 	call	0xc2c	; 0xc2c <MUSART_u8Receive>

			if (local_u8SlaveStatus == ERROR && global_u8FailureCounter<2) {
 41c:	87 30       	cpi	r24, 0x07	; 7
 41e:	09 f5       	brne	.+66     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 420:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__data_end>
 424:	92 30       	cpi	r25, 0x02	; 2
 426:	e8 f4       	brcc	.+58     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
				global_u8FailureCounter++;
 428:	9f 5f       	subi	r25, 0xFF	; 255
 42a:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__data_end>
				HLCD_vSendString(local_u8LCDScreens[10]);
 42e:	ce 01       	movw	r24, r28
 430:	8f 55       	subi	r24, 0x5F	; 95
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
				HLCD_vMoveTo(1,0);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
				HLCD_vSendString(local_u8LCDScreens[11]);
 440:	ce 01       	movw	r24, r28
 442:	8f 54       	subi	r24, 0x4F	; 79
 444:	9f 4f       	sbci	r25, 0xFF	; 255
 446:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
 44a:	2f e3       	ldi	r18, 0x3F	; 63
 44c:	82 e4       	ldi	r24, 0x42	; 66
 44e:	9f e0       	ldi	r25, 0x0F	; 15
 450:	21 50       	subi	r18, 0x01	; 1
 452:	80 40       	sbci	r24, 0x00	; 0
 454:	90 40       	sbci	r25, 0x00	; 0
 456:	e1 f7       	brne	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	00 c0       	rjmp	.+0      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 45a:	00 00       	nop
				_delay_ms(5000);
				HLCD_vDisplayClear();
 45c:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
 460:	75 cf       	rjmp	.-278    	; 0x34c <main+0x5a>
			} else if (*local_u8Option == '1' && local_u8SlaveStatus == SUCCEEDED) {
 462:	c9 52       	subi	r28, 0x29	; 41
 464:	df 4f       	sbci	r29, 0xFF	; 255
 466:	98 81       	ld	r25, Y
 468:	c7 5d       	subi	r28, 0xD7	; 215
 46a:	d0 40       	sbci	r29, 0x00	; 0
 46c:	91 33       	cpi	r25, 0x31	; 49
 46e:	39 f4       	brne	.+14     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 470:	86 30       	cpi	r24, 0x06	; 6
 472:	29 f4       	brne	.+10     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
				Function_vOpenDoor(local_u8LCDScreens);
 474:	ce 01       	movw	r24, r28
 476:	01 96       	adiw	r24, 0x01	; 1
 478:	0e 94 40 01 	call	0x280	; 0x280 <Function_vOpenDoor>
 47c:	67 cf       	rjmp	.-306    	; 0x34c <main+0x5a>
			} else if (*local_u8Option == '2' && local_u8SlaveStatus == SUCCEEDED) {
 47e:	92 33       	cpi	r25, 0x32	; 50
 480:	49 f5       	brne	.+82     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
 482:	86 30       	cpi	r24, 0x06	; 6
 484:	39 f5       	brne	.+78     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
				// Create Passwords
				Function_vCreatePassword(local_u8LCDScreens);
 486:	ce 01       	movw	r24, r28
 488:	01 96       	adiw	r24, 0x01	; 1
 48a:	0e 94 ed 00 	call	0x1da	; 0x1da <Function_vCreatePassword>
							
				// Wait for the Slave MCU to process the request
				while (!MUSART_u8UnreadDate());
 48e:	0e 94 26 06 	call	0xc4c	; 0xc4c <MUSART_u8UnreadDate>
 492:	88 23       	and	r24, r24
 494:	e1 f3       	breq	.-8      	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
				local_u8SlaveStatus = MUSART_u8Receive();
 496:	0e 94 16 06 	call	0xc2c	; 0xc2c <MUSART_u8Receive>
 49a:	18 2f       	mov	r17, r24

				// Display success or error message
				Function_vWaitingScreen();
 49c:	0e 94 a3 00 	call	0x146	; 0x146 <Function_vWaitingScreen>
				HLCD_vMoveTo(1, 0);
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 a7 03 	call	0x74e	; 0x74e <HLCD_vMoveTo>
				HLCD_vSendString(local_u8SlaveStatus == SUCCEEDED ? local_u8LCDScreens[3] : local_u8LCDScreens[4]);
 4a8:	16 30       	cpi	r17, 0x06	; 6
 4aa:	19 f4       	brne	.+6      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ac:	ce 01       	movw	r24, r28
 4ae:	c1 96       	adiw	r24, 0x31	; 49
 4b0:	03 c0       	rjmp	.+6      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b2:	ce 01       	movw	r24, r28
 4b4:	8f 5b       	subi	r24, 0xBF	; 191
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	0e 94 94 03 	call	0x728	; 0x728 <HLCD_vSendString>
 4bc:	2f e3       	ldi	r18, 0x3F	; 63
 4be:	82 e4       	ldi	r24, 0x42	; 66
 4c0:	9f e0       	ldi	r25, 0x0F	; 15
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	80 40       	sbci	r24, 0x00	; 0
 4c6:	90 40       	sbci	r25, 0x00	; 0
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
				_delay_ms(5000);
				HLCD_vDisplayClear();
 4ce:	0e 94 b6 03 	call	0x76c	; 0x76c <HLCD_vDisplayClear>
 4d2:	3c cf       	rjmp	.-392    	; 0x34c <main+0x5a>
			}else{
				Function_vSystemFreeze(local_u8LCDScreens);
 4d4:	ce 01       	movw	r24, r28
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	0e 94 1b 01 	call	0x236	; 0x236 <Function_vSystemFreeze>
 4dc:	37 cf       	rjmp	.-402    	; 0x34c <main+0x5a>

000004de <HKPD_vInit>:
#include "KPD_Interface.h"

void HKPD_vInit(void)
{
	/* SET Rows pins as input high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW1, LOW);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW2, LOW);
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	61 e0       	ldi	r22, 0x01	; 1
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW3, LOW);
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	62 e0       	ldi	r22, 0x02	; 2
 4f6:	82 e0       	ldi	r24, 0x02	; 2
 4f8:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_ROW4, LOW);
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	63 e0       	ldi	r22, 0x03	; 3
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_ROW1, HIGH);
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	82 e0       	ldi	r24, 0x02	; 2
 50c:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW2, HIGH);
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	82 e0       	ldi	r24, 0x02	; 2
 516:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW3, HIGH);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	62 e0       	ldi	r22, 0x02	; 2
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_ROW4, HIGH);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	63 e0       	ldi	r22, 0x03	; 3
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>

	/* SET Columns pins as output high */
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL1, HIGH);
 52e:	41 e0       	ldi	r20, 0x01	; 1
 530:	64 e0       	ldi	r22, 0x04	; 4
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL2, HIGH);
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	65 e0       	ldi	r22, 0x05	; 5
 53c:	82 e0       	ldi	r24, 0x02	; 2
 53e:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL3, HIGH);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	66 e0       	ldi	r22, 0x06	; 6
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
	MDIO_vSetPinDirection(KPD_PORT,KPD_COL4, HIGH);
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	67 e0       	ldi	r22, 0x07	; 7
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>

	MDIO_vSetPinValue(KPD_PORT, KPD_COL1, HIGH);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	64 e0       	ldi	r22, 0x04	; 4
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL2, HIGH);
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	65 e0       	ldi	r22, 0x05	; 5
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL3, HIGH);
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	66 e0       	ldi	r22, 0x06	; 6
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
	MDIO_vSetPinValue(KPD_PORT, KPD_COL4, HIGH);
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	67 e0       	ldi	r22, 0x07	; 7
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 57e:	08 95       	ret

00000580 <HKPD_u8GetPressedKey>:
}
u8 *HKPD_u8GetPressedKey(void)
{
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 584:	d4 e0       	ldi	r29, 0x04	; 4
 586:	3b c0       	rjmp	.+118    	; 0x5fe <HKPD_u8GetPressedKey+0x7e>

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	6d 2f       	mov	r22, r29
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 592:	81 ee       	ldi	r24, 0xE1	; 225
 594:	94 e0       	ldi	r25, 0x04	; 4
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <HKPD_u8GetPressedKey+0x16>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <HKPD_u8GetPressedKey+0x1c>
 59c:	00 00       	nop
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 59e:	c0 e0       	ldi	r28, 0x00	; 0
 5a0:	26 c0       	rjmp	.+76     	; 0x5ee <HKPD_u8GetPressedKey+0x6e>
        {
            local_u8Status = MDIO_u8GetPinValue(KPD_PORT, local_u8Rows);
 5a2:	6c 2f       	mov	r22, r28
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	0e 94 c0 04 	call	0x980	; 0x980 <MDIO_u8GetPinValue>

            if (local_u8Status == 0)
 5aa:	81 11       	cpse	r24, r1
 5ac:	1f c0       	rjmp	.+62     	; 0x5ec <HKPD_u8GetPressedKey+0x6c>
            {
                local_u8Value = KPD_Buttions[local_u8Rows - KPD_ROW1][local_u8Columns - KPD_COL1]; // Adjusted array indexing
 5ae:	8c 2f       	mov	r24, r28
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	2d 2f       	mov	r18, r29
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	24 50       	subi	r18, 0x04	; 4
 5b8:	31 09       	sbc	r19, r1
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	83 5c       	subi	r24, 0xC3	; 195
 5c4:	9e 4f       	sbci	r25, 0xFE	; 254
 5c6:	fc 01       	movw	r30, r24
 5c8:	e2 0f       	add	r30, r18
 5ca:	f3 1f       	adc	r31, r19
 5cc:	80 81       	ld	r24, Z
 5ce:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <local_u8Value.1968>

                // Wait for key release
                while (MDIO_u8GetPinValue(KPD_PORT, local_u8Rows) == LOW)
 5d2:	06 c0       	rjmp	.+12     	; 0x5e0 <HKPD_u8GetPressedKey+0x60>
 5d4:	81 ee       	ldi	r24, 0xE1	; 225
 5d6:	94 e0       	ldi	r25, 0x04	; 4
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <HKPD_u8GetPressedKey+0x58>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <HKPD_u8GetPressedKey+0x5e>
 5de:	00 00       	nop
 5e0:	6c 2f       	mov	r22, r28
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	0e 94 c0 04 	call	0x980	; 0x980 <MDIO_u8GetPinValue>
 5e8:	88 23       	and	r24, r24
 5ea:	a1 f3       	breq	.-24     	; 0x5d4 <HKPD_u8GetPressedKey+0x54>
    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {

        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, LOW);
        _delay_ms(5); // Reduced delay for column activation

        for(u8 local_u8Rows = KPD_ROW1; local_u8Rows <= KPD_ROW4; local_u8Rows++) // Fixed variable increment in loop
 5ec:	cf 5f       	subi	r28, 0xFF	; 255
 5ee:	c4 30       	cpi	r28, 0x04	; 4
 5f0:	c0 f2       	brcs	.-80     	; 0x5a2 <HKPD_u8GetPressedKey+0x22>
                {
                    _delay_ms(5); // Adjusted delay for debounce
                }
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
 5f2:	41 e0       	ldi	r20, 0x01	; 1
 5f4:	6d 2f       	mov	r22, r29
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
u8 *HKPD_u8GetPressedKey(void)
{
    static u8 local_u8Value = NOT_PRESSED; // Static variable to retain value across function calls
    u8 local_u8Status;

    for (u8 local_u8Columns = KPD_COL1; local_u8Columns <= KPD_COL4; local_u8Columns++) {
 5fc:	df 5f       	subi	r29, 0xFF	; 255
 5fe:	d8 30       	cpi	r29, 0x08	; 8
 600:	18 f2       	brcs	.-122    	; 0x588 <HKPD_u8GetPressedKey+0x8>
            }
        }
        MDIO_vSetPinValue(KPD_PORT, local_u8Columns, HIGH);
    }
    return &local_u8Value; // Return value of static variable
}
 602:	81 e5       	ldi	r24, 0x51	; 81
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

0000060c <HLCD_vSendCommand>:
 * @brief Send a command to the LCD.
 *
 * @param A_u8Command: Command to be sent.
 */
void HLCD_vSendCommand(u8 A_u8Command)
{
 60c:	cf 93       	push	r28
 60e:	c8 2f       	mov	r28, r24
    // Set RS to 0 (Command Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, LOW);
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	61 e0       	ldi	r22, 0x01	; 1
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>

    // Send command on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Command);
 624:	6c 2f       	mov	r22, r28
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	0e 94 b0 04 	call	0x960	; 0x960 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 62c:	41 e0       	ldi	r20, 0x01	; 1
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 636:	89 ef       	ldi	r24, 0xF9	; 249
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <HLCD_vSendCommand+0x2e>
 63e:	00 c0       	rjmp	.+0      	; 0x640 <HLCD_vSendCommand+0x34>
 640:	00 00       	nop
    _delay_ms(1);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 642:	40 e0       	ldi	r20, 0x00	; 0
 644:	62 e0       	ldi	r22, 0x02	; 2
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 64c:	89 ef       	ldi	r24, 0xF9	; 249
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <HLCD_vSendCommand+0x44>
 654:	00 c0       	rjmp	.+0      	; 0x656 <HLCD_vSendCommand+0x4a>
 656:	00 00       	nop
    _delay_ms(1);
}
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <HLCD_vInit>:
 * @brief Initialize the LCD module.
 */
void HLCD_vInit(void)
{
    // Set control pins direction as OUTPUT
    MDIO_vSetPinDirection(CONTROL_PORT, RS, OUTPUT);
 65c:	41 e0       	ldi	r20, 0x01	; 1
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, RW, OUTPUT);
 666:	41 e0       	ldi	r20, 0x01	; 1
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>
    MDIO_vSetPinDirection(CONTROL_PORT, EN, OUTPUT);
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	62 e0       	ldi	r22, 0x02	; 2
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	0e 94 c0 03 	call	0x780	; 0x780 <MDIO_vSetPinDirection>

    // Set data port direction as OUTPUT (all pins)
    MDIO_vSetPortDirection(DATA_PORT, 0xFF);
 67a:	6f ef       	ldi	r22, 0xFF	; 255
 67c:	80 e0       	ldi	r24, 0x00	; 0
 67e:	0e 94 30 04 	call	0x860	; 0x860 <MDIO_vSetPortDirection>
 682:	8f e0       	ldi	r24, 0x0F	; 15
 684:	97 e2       	ldi	r25, 0x27	; 39
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <HLCD_vInit+0x2a>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <HLCD_vInit+0x30>
 68c:	00 00       	nop

    // Wait for LCD to power up
    _delay_ms(40);

    // Send LCD initialization commands
    HLCD_vSendCommand(FUNCTION_SET);
 68e:	88 e3       	ldi	r24, 0x38	; 56
 690:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 694:	89 ef       	ldi	r24, 0xF9	; 249
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	01 97       	sbiw	r24, 0x01	; 1
 69a:	f1 f7       	brne	.-4      	; 0x698 <HLCD_vInit+0x3c>
 69c:	00 c0       	rjmp	.+0      	; 0x69e <HLCD_vInit+0x42>
 69e:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_ON_OFF);
 6a0:	8f e0       	ldi	r24, 0x0F	; 15
 6a2:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 6a6:	89 ef       	ldi	r24, 0xF9	; 249
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <HLCD_vInit+0x4e>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <HLCD_vInit+0x54>
 6b0:	00 00       	nop
    _delay_ms(1);
    HLCD_vSendCommand(DISPLAY_CLEAR);
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 6b8:	8d ee       	ldi	r24, 0xED	; 237
 6ba:	92 e0       	ldi	r25, 0x02	; 2
 6bc:	01 97       	sbiw	r24, 0x01	; 1
 6be:	f1 f7       	brne	.-4      	; 0x6bc <HLCD_vInit+0x60>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <HLCD_vInit+0x66>
 6c2:	00 00       	nop
    _delay_ms(3);
    HLCD_vSendCommand(ENTRY_MODE_SET);
 6c4:	86 e0       	ldi	r24, 0x06	; 6
 6c6:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 6ca:	8d ee       	ldi	r24, 0xED	; 237
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	f1 f7       	brne	.-4      	; 0x6ce <HLCD_vInit+0x72>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <HLCD_vInit+0x78>
 6d4:	00 00       	nop
 6d6:	08 95       	ret

000006d8 <HLCD_vSendData>:
 * @brief Send data (character) to the LCD.
 *
 * @param A_u8Data: Data (character) to be sent.
 */
void HLCD_vSendData(u8 A_u8Data)
{
 6d8:	cf 93       	push	r28
 6da:	c8 2f       	mov	r28, r24
    // Set RS to 1 (Data Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RS, HIGH);
 6dc:	41 e0       	ldi	r20, 0x01	; 1
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>

    // Set RW to 0 (Write Mode)
    MDIO_vSetPinValue(CONTROL_PORT, RW, LOW);
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>

    // Send data on data bus (data port)
    MDIO_vSetPortValue(DATA_PORT, A_u8Data);
 6f0:	6c 2f       	mov	r22, r28
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	0e 94 b0 04 	call	0x960	; 0x960 <MDIO_vSetPortValue>

    // Enable pulse (E = 1 then E = 0)
    MDIO_vSetPinValue(CONTROL_PORT, EN, HIGH);
 6f8:	41 e0       	ldi	r20, 0x01	; 1
 6fa:	62 e0       	ldi	r22, 0x02	; 2
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 702:	81 ee       	ldi	r24, 0xE1	; 225
 704:	94 e0       	ldi	r25, 0x04	; 4
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <HLCD_vSendData+0x2e>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <HLCD_vSendData+0x34>
 70c:	00 00       	nop
    _delay_ms(5);
    MDIO_vSetPinValue(CONTROL_PORT, EN, LOW);
 70e:	40 e0       	ldi	r20, 0x00	; 0
 710:	62 e0       	ldi	r22, 0x02	; 2
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	0e 94 40 04 	call	0x880	; 0x880 <MDIO_vSetPinValue>
 718:	81 ee       	ldi	r24, 0xE1	; 225
 71a:	94 e0       	ldi	r25, 0x04	; 4
 71c:	01 97       	sbiw	r24, 0x01	; 1
 71e:	f1 f7       	brne	.-4      	; 0x71c <HLCD_vSendData+0x44>
 720:	00 c0       	rjmp	.+0      	; 0x722 <HLCD_vSendData+0x4a>
 722:	00 00       	nop
    _delay_ms(5);
}
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <HLCD_vSendString>:
 * @brief Send a string to display on the LCD.
 *
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
 728:	0f 93       	push	r16
 72a:	1f 93       	push	r17
 72c:	cf 93       	push	r28
 72e:	8c 01       	movw	r16, r24
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 730:	c0 e0       	ldi	r28, 0x00	; 0
 732:	03 c0       	rjmp	.+6      	; 0x73a <HLCD_vSendString+0x12>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
 734:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <HLCD_vSendData>
 * @param A_u8String: Pointer to the string to be displayed.
 */
void HLCD_vSendString(u8 *A_u8String)
{
    // Loop through each character in the string until null terminator is encountered
    for (u8 Local_u8Index = 0; A_u8String[Local_u8Index] != '\0'; Local_u8Index++)
 738:	cf 5f       	subi	r28, 0xFF	; 255
 73a:	f8 01       	movw	r30, r16
 73c:	ec 0f       	add	r30, r28
 73e:	f1 1d       	adc	r31, r1
 740:	80 81       	ld	r24, Z
 742:	81 11       	cpse	r24, r1
 744:	f7 cf       	rjmp	.-18     	; 0x734 <HLCD_vSendString+0xc>
    {
        // Send each character to the LCD
        HLCD_vSendData(A_u8String[Local_u8Index]);
    }
}
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	08 95       	ret

0000074e <HLCD_vMoveTo>:
 * @param A_u8Col: Column number (0 to 15).
 */
void HLCD_vMoveTo(u8 A_u8Row, u8 A_u8Col)
{
    // Calculate cursor position based on row and column
    switch (A_u8Row)
 74e:	88 23       	and	r24, r24
 750:	19 f0       	breq	.+6      	; 0x758 <HLCD_vMoveTo+0xa>
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	31 f0       	breq	.+12     	; 0x762 <HLCD_vMoveTo+0x14>
 756:	08 95       	ret
    {
        case 0:
            HLCD_vSendCommand(A_u8Col + 128); // Move to 1st row
 758:	80 e8       	ldi	r24, 0x80	; 128
 75a:	86 0f       	add	r24, r22
 75c:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
            break;
 760:	08 95       	ret
        case 1:
            HLCD_vSendCommand(A_u8Col + 192); // Move to 2nd row
 762:	80 ec       	ldi	r24, 0xC0	; 192
 764:	86 0f       	add	r24, r22
 766:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 76a:	08 95       	ret

0000076c <HLCD_vDisplayClear>:
 * @brief Clear the display of the LCD.
 */
void HLCD_vDisplayClear(void)
{
    // Send clear display command
    HLCD_vSendCommand(DISPLAY_CLEAR);
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	0e 94 06 03 	call	0x60c	; 0x60c <HLCD_vSendCommand>
 772:	87 e8       	ldi	r24, 0x87	; 135
 774:	93 e1       	ldi	r25, 0x13	; 19
 776:	01 97       	sbiw	r24, 0x01	; 1
 778:	f1 f7       	brne	.-4      	; 0x776 <HLCD_vDisplayClear+0xa>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <HLCD_vDisplayClear+0x10>
 77c:	00 00       	nop
 77e:	08 95       	ret

00000780 <MDIO_vSetPinDirection>:
#include "DIO_Private.h"
#include "DIO_Config.h"

void MDIO_vSetPinDirection(u8 A_u8PortNumber,u8 A_u8PinNumber, u8 A_u8Dir )
{
	if(A_u8Dir == INPUT)
 780:	41 11       	cpse	r20, r1
 782:	38 c0       	rjmp	.+112    	; 0x7f4 <MDIO_vSetPinDirection+0x74>
	{
		switch (A_u8PortNumber)
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	91 f0       	breq	.+36     	; 0x7ac <MDIO_vSetPinDirection+0x2c>
 788:	28 f0       	brcs	.+10     	; 0x794 <MDIO_vSetPinDirection+0x14>
 78a:	82 30       	cpi	r24, 0x02	; 2
 78c:	d9 f0       	breq	.+54     	; 0x7c4 <MDIO_vSetPinDirection+0x44>
 78e:	83 30       	cpi	r24, 0x03	; 3
 790:	29 f1       	breq	.+74     	; 0x7dc <MDIO_vSetPinDirection+0x5c>
 792:	08 95       	ret
		{
		case PORT_A: CLR_BIT(DDRA, A_u8PinNumber); break;
 794:	2a b3       	in	r18, 0x1a	; 26
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <MDIO_vSetPinDirection+0x20>
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	6a 95       	dec	r22
 7a2:	e2 f7       	brpl	.-8      	; 0x79c <MDIO_vSetPinDirection+0x1c>
 7a4:	80 95       	com	r24
 7a6:	82 23       	and	r24, r18
 7a8:	8a bb       	out	0x1a, r24	; 26
 7aa:	08 95       	ret
		case PORT_B: CLR_BIT(DDRB, A_u8PinNumber); break;
 7ac:	27 b3       	in	r18, 0x17	; 23
 7ae:	81 e0       	ldi	r24, 0x01	; 1
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <MDIO_vSetPinDirection+0x38>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	6a 95       	dec	r22
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <MDIO_vSetPinDirection+0x34>
 7bc:	80 95       	com	r24
 7be:	82 23       	and	r24, r18
 7c0:	87 bb       	out	0x17, r24	; 23
 7c2:	08 95       	ret
		case PORT_C: CLR_BIT(DDRC, A_u8PinNumber); break;
 7c4:	24 b3       	in	r18, 0x14	; 20
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <MDIO_vSetPinDirection+0x50>
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	6a 95       	dec	r22
 7d2:	e2 f7       	brpl	.-8      	; 0x7cc <MDIO_vSetPinDirection+0x4c>
 7d4:	80 95       	com	r24
 7d6:	82 23       	and	r24, r18
 7d8:	84 bb       	out	0x14, r24	; 20
 7da:	08 95       	ret
		case PORT_D: CLR_BIT(DDRD, A_u8PinNumber); break;
 7dc:	21 b3       	in	r18, 0x11	; 17
 7de:	81 e0       	ldi	r24, 0x01	; 1
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <MDIO_vSetPinDirection+0x68>
 7e4:	88 0f       	add	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	6a 95       	dec	r22
 7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <MDIO_vSetPinDirection+0x64>
 7ec:	80 95       	com	r24
 7ee:	82 23       	and	r24, r18
 7f0:	81 bb       	out	0x11, r24	; 17
 7f2:	08 95       	ret
		}
	}else if (A_u8Dir == OUTPUT)
 7f4:	41 30       	cpi	r20, 0x01	; 1
 7f6:	99 f5       	brne	.+102    	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
	{
		switch (A_u8PortNumber)
 7f8:	81 30       	cpi	r24, 0x01	; 1
 7fa:	89 f0       	breq	.+34     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7fc:	28 f0       	brcs	.+10     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fe:	82 30       	cpi	r24, 0x02	; 2
 800:	c9 f0       	breq	.+50     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 802:	83 30       	cpi	r24, 0x03	; 3
 804:	11 f1       	breq	.+68     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 806:	08 95       	ret
		{
		case PORT_A: SET_BIT(DDRA, A_u8PinNumber); break;
 808:	2a b3       	in	r18, 0x1a	; 26
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	6a 95       	dec	r22
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	82 2b       	or	r24, r18
 81a:	8a bb       	out	0x1a, r24	; 26
 81c:	08 95       	ret
		case PORT_B: SET_BIT(DDRB, A_u8PinNumber); break;
 81e:	27 b3       	in	r18, 0x17	; 23
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	88 0f       	add	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	6a 95       	dec	r22
 82c:	e2 f7       	brpl	.-8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 82e:	82 2b       	or	r24, r18
 830:	87 bb       	out	0x17, r24	; 23
 832:	08 95       	ret
		case PORT_C: SET_BIT(DDRC, A_u8PinNumber); break;
 834:	24 b3       	in	r18, 0x14	; 20
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	02 c0       	rjmp	.+4      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	6a 95       	dec	r22
 842:	e2 f7       	brpl	.-8      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 844:	82 2b       	or	r24, r18
 846:	84 bb       	out	0x14, r24	; 20
 848:	08 95       	ret
		case PORT_D: SET_BIT(DDRD, A_u8PinNumber); break;
 84a:	21 b3       	in	r18, 0x11	; 17
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	88 0f       	add	r24, r24
 854:	99 1f       	adc	r25, r25
 856:	6a 95       	dec	r22
 858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	82 2b       	or	r24, r18
 85c:	81 bb       	out	0x11, r24	; 17
 85e:	08 95       	ret

00000860 <MDIO_vSetPortDirection>:
		//Do Nothing.
	}
}

void MDIO_vSetPortDirection(u8 A_u8PortNumber, u8 A_u8Dir){
	switch (A_u8PortNumber){
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	41 f0       	breq	.+16     	; 0x874 <MDIO_vSetPortDirection+0x14>
 864:	28 f0       	brcs	.+10     	; 0x870 <MDIO_vSetPortDirection+0x10>
 866:	82 30       	cpi	r24, 0x02	; 2
 868:	39 f0       	breq	.+14     	; 0x878 <MDIO_vSetPortDirection+0x18>
 86a:	83 30       	cpi	r24, 0x03	; 3
 86c:	39 f0       	breq	.+14     	; 0x87c <MDIO_vSetPortDirection+0x1c>
 86e:	08 95       	ret
	case PORT_A: DDRA = A_u8Dir; break;
 870:	6a bb       	out	0x1a, r22	; 26
 872:	08 95       	ret
	case PORT_B: DDRB = A_u8Dir; break;
 874:	67 bb       	out	0x17, r22	; 23
 876:	08 95       	ret
	case PORT_C: DDRC = A_u8Dir; break;
 878:	64 bb       	out	0x14, r22	; 20
 87a:	08 95       	ret
	case PORT_D: DDRD = A_u8Dir; break;
 87c:	61 bb       	out	0x11, r22	; 17
 87e:	08 95       	ret

00000880 <MDIO_vSetPinValue>:
	}
}

void MDIO_vSetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber, u8 A_u8Value)
{
	if(A_u8Value == HIGH)
 880:	41 30       	cpi	r20, 0x01	; 1
 882:	a1 f5       	brne	.+104    	; 0x8ec <MDIO_vSetPinValue+0x6c>
	{
		switch (A_u8PortNumber)
 884:	81 30       	cpi	r24, 0x01	; 1
 886:	89 f0       	breq	.+34     	; 0x8aa <MDIO_vSetPinValue+0x2a>
 888:	28 f0       	brcs	.+10     	; 0x894 <MDIO_vSetPinValue+0x14>
 88a:	82 30       	cpi	r24, 0x02	; 2
 88c:	c9 f0       	breq	.+50     	; 0x8c0 <MDIO_vSetPinValue+0x40>
 88e:	83 30       	cpi	r24, 0x03	; 3
 890:	11 f1       	breq	.+68     	; 0x8d6 <MDIO_vSetPinValue+0x56>
 892:	08 95       	ret
		{
		case PORT_A: SET_BIT(PORTA, A_u8PinNumber); break;
 894:	2b b3       	in	r18, 0x1b	; 27
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <MDIO_vSetPinValue+0x20>
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	6a 95       	dec	r22
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <MDIO_vSetPinValue+0x1c>
 8a4:	82 2b       	or	r24, r18
 8a6:	8b bb       	out	0x1b, r24	; 27
 8a8:	08 95       	ret
		case PORT_B: SET_BIT(PORTB, A_u8PinNumber); break;
 8aa:	28 b3       	in	r18, 0x18	; 24
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <MDIO_vSetPinValue+0x36>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	6a 95       	dec	r22
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <MDIO_vSetPinValue+0x32>
 8ba:	82 2b       	or	r24, r18
 8bc:	88 bb       	out	0x18, r24	; 24
 8be:	08 95       	ret
		case PORT_C: SET_BIT(PORTC, A_u8PinNumber); break;
 8c0:	25 b3       	in	r18, 0x15	; 21
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <MDIO_vSetPinValue+0x4c>
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	6a 95       	dec	r22
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <MDIO_vSetPinValue+0x48>
 8d0:	82 2b       	or	r24, r18
 8d2:	85 bb       	out	0x15, r24	; 21
 8d4:	08 95       	ret
		case PORT_D: SET_BIT(PORTD, A_u8PinNumber); break;
 8d6:	22 b3       	in	r18, 0x12	; 18
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	02 c0       	rjmp	.+4      	; 0x8e2 <MDIO_vSetPinValue+0x62>
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	6a 95       	dec	r22
 8e4:	e2 f7       	brpl	.-8      	; 0x8de <MDIO_vSetPinValue+0x5e>
 8e6:	82 2b       	or	r24, r18
 8e8:	82 bb       	out	0x12, r24	; 18
 8ea:	08 95       	ret
		}
	}else if (A_u8Value == LOW)
 8ec:	41 11       	cpse	r20, r1
 8ee:	37 c0       	rjmp	.+110    	; 0x95e <MDIO_vSetPinValue+0xde>
	{
		switch (A_u8PortNumber)
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	91 f0       	breq	.+36     	; 0x918 <MDIO_vSetPinValue+0x98>
 8f4:	28 f0       	brcs	.+10     	; 0x900 <MDIO_vSetPinValue+0x80>
 8f6:	82 30       	cpi	r24, 0x02	; 2
 8f8:	d9 f0       	breq	.+54     	; 0x930 <MDIO_vSetPinValue+0xb0>
 8fa:	83 30       	cpi	r24, 0x03	; 3
 8fc:	29 f1       	breq	.+74     	; 0x948 <MDIO_vSetPinValue+0xc8>
 8fe:	08 95       	ret
		{
		case PORT_A: CLR_BIT(PORTA, A_u8PinNumber); break;
 900:	2b b3       	in	r18, 0x1b	; 27
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	02 c0       	rjmp	.+4      	; 0x90c <MDIO_vSetPinValue+0x8c>
 908:	88 0f       	add	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	6a 95       	dec	r22
 90e:	e2 f7       	brpl	.-8      	; 0x908 <MDIO_vSetPinValue+0x88>
 910:	80 95       	com	r24
 912:	82 23       	and	r24, r18
 914:	8b bb       	out	0x1b, r24	; 27
 916:	08 95       	ret
		case PORT_B: CLR_BIT(PORTB, A_u8PinNumber); break;
 918:	28 b3       	in	r18, 0x18	; 24
 91a:	81 e0       	ldi	r24, 0x01	; 1
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	02 c0       	rjmp	.+4      	; 0x924 <MDIO_vSetPinValue+0xa4>
 920:	88 0f       	add	r24, r24
 922:	99 1f       	adc	r25, r25
 924:	6a 95       	dec	r22
 926:	e2 f7       	brpl	.-8      	; 0x920 <MDIO_vSetPinValue+0xa0>
 928:	80 95       	com	r24
 92a:	82 23       	and	r24, r18
 92c:	88 bb       	out	0x18, r24	; 24
 92e:	08 95       	ret
		case PORT_C: CLR_BIT(PORTC, A_u8PinNumber); break;
 930:	25 b3       	in	r18, 0x15	; 21
 932:	81 e0       	ldi	r24, 0x01	; 1
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	02 c0       	rjmp	.+4      	; 0x93c <MDIO_vSetPinValue+0xbc>
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	6a 95       	dec	r22
 93e:	e2 f7       	brpl	.-8      	; 0x938 <MDIO_vSetPinValue+0xb8>
 940:	80 95       	com	r24
 942:	82 23       	and	r24, r18
 944:	85 bb       	out	0x15, r24	; 21
 946:	08 95       	ret
		case PORT_D: CLR_BIT(PORTD, A_u8PinNumber); break;
 948:	22 b3       	in	r18, 0x12	; 18
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <MDIO_vSetPinValue+0xd4>
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	6a 95       	dec	r22
 956:	e2 f7       	brpl	.-8      	; 0x950 <MDIO_vSetPinValue+0xd0>
 958:	80 95       	com	r24
 95a:	82 23       	and	r24, r18
 95c:	82 bb       	out	0x12, r24	; 18
 95e:	08 95       	ret

00000960 <MDIO_vSetPortValue>:
		//DO Nothing
	}
}

void MDIO_vSetPortValue(u8 A_u8PortNumber, u8 A_u8Value){
	switch (A_u8PortNumber){
 960:	81 30       	cpi	r24, 0x01	; 1
 962:	41 f0       	breq	.+16     	; 0x974 <MDIO_vSetPortValue+0x14>
 964:	28 f0       	brcs	.+10     	; 0x970 <MDIO_vSetPortValue+0x10>
 966:	82 30       	cpi	r24, 0x02	; 2
 968:	39 f0       	breq	.+14     	; 0x978 <MDIO_vSetPortValue+0x18>
 96a:	83 30       	cpi	r24, 0x03	; 3
 96c:	39 f0       	breq	.+14     	; 0x97c <MDIO_vSetPortValue+0x1c>
 96e:	08 95       	ret
	case PORT_A: PORTA = A_u8Value; break;
 970:	6b bb       	out	0x1b, r22	; 27
 972:	08 95       	ret
	case PORT_B: PORTB = A_u8Value; break;
 974:	68 bb       	out	0x18, r22	; 24
 976:	08 95       	ret
	case PORT_C: PORTC = A_u8Value; break;
 978:	65 bb       	out	0x15, r22	; 21
 97a:	08 95       	ret
	case PORT_D: PORTD = A_u8Value; break;
 97c:	62 bb       	out	0x12, r22	; 18
 97e:	08 95       	ret

00000980 <MDIO_u8GetPinValue>:
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
	switch (A_u8PortNumber){
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	79 f0       	breq	.+30     	; 0x9a2 <MDIO_u8GetPinValue+0x22>
 984:	28 f0       	brcs	.+10     	; 0x990 <MDIO_u8GetPinValue+0x10>
 986:	82 30       	cpi	r24, 0x02	; 2
 988:	a9 f0       	breq	.+42     	; 0x9b4 <MDIO_u8GetPinValue+0x34>
 98a:	83 30       	cpi	r24, 0x03	; 3
 98c:	e1 f0       	breq	.+56     	; 0x9c6 <MDIO_u8GetPinValue+0x46>
 98e:	24 c0       	rjmp	.+72     	; 0x9d8 <MDIO_u8GetPinValue+0x58>
		case PORT_A: Local_u8PinValue = GET_BIT(PINA, A_u8PinNumber); break;
 990:	89 b3       	in	r24, 0x19	; 25
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	02 c0       	rjmp	.+4      	; 0x99a <MDIO_u8GetPinValue+0x1a>
 996:	95 95       	asr	r25
 998:	87 95       	ror	r24
 99a:	6a 95       	dec	r22
 99c:	e2 f7       	brpl	.-8      	; 0x996 <MDIO_u8GetPinValue+0x16>
 99e:	81 70       	andi	r24, 0x01	; 1
 9a0:	08 95       	ret
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
 9a2:	86 b3       	in	r24, 0x16	; 22
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <MDIO_u8GetPinValue+0x2c>
 9a8:	95 95       	asr	r25
 9aa:	87 95       	ror	r24
 9ac:	6a 95       	dec	r22
 9ae:	e2 f7       	brpl	.-8      	; 0x9a8 <MDIO_u8GetPinValue+0x28>
 9b0:	81 70       	andi	r24, 0x01	; 1
 9b2:	08 95       	ret
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
 9b4:	83 b3       	in	r24, 0x13	; 19
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	02 c0       	rjmp	.+4      	; 0x9be <MDIO_u8GetPinValue+0x3e>
 9ba:	95 95       	asr	r25
 9bc:	87 95       	ror	r24
 9be:	6a 95       	dec	r22
 9c0:	e2 f7       	brpl	.-8      	; 0x9ba <MDIO_u8GetPinValue+0x3a>
 9c2:	81 70       	andi	r24, 0x01	; 1
 9c4:	08 95       	ret
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
 9c6:	80 b3       	in	r24, 0x10	; 16
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <MDIO_u8GetPinValue+0x50>
 9cc:	95 95       	asr	r25
 9ce:	87 95       	ror	r24
 9d0:	6a 95       	dec	r22
 9d2:	e2 f7       	brpl	.-8      	; 0x9cc <MDIO_u8GetPinValue+0x4c>
 9d4:	81 70       	andi	r24, 0x01	; 1
 9d6:	08 95       	ret
	}
}

u8 MDIO_u8GetPinValue(u8 A_u8PortNumber, u8 A_u8PinNumber)
{
	u8 Local_u8PinValue = WRONG_VALUE;
 9d8:	82 e3       	ldi	r24, 0x32	; 50
		case PORT_B: Local_u8PinValue = GET_BIT(PINB, A_u8PinNumber); break;
		case PORT_C: Local_u8PinValue = GET_BIT(PINC, A_u8PinNumber); break;
		case PORT_D: Local_u8PinValue = GET_BIT(PIND, A_u8PinNumber); break;
		}
	return Local_u8PinValue;
}
 9da:	08 95       	ret

000009dc <__vector_17>:
	if (ptr_to_fun != NULL) {
		EEPROM_Call_Back = ptr_to_fun;
	}
}

void __vector_17(void) {
 9dc:	1f 92       	push	r1
 9de:	0f 92       	push	r0
 9e0:	0f b6       	in	r0, 0x3f	; 63
 9e2:	0f 92       	push	r0
 9e4:	11 24       	eor	r1, r1
 9e6:	2f 93       	push	r18
 9e8:	3f 93       	push	r19
 9ea:	4f 93       	push	r20
 9ec:	5f 93       	push	r21
 9ee:	6f 93       	push	r22
 9f0:	7f 93       	push	r23
 9f2:	8f 93       	push	r24
 9f4:	9f 93       	push	r25
 9f6:	af 93       	push	r26
 9f8:	bf 93       	push	r27
 9fa:	ef 93       	push	r30
 9fc:	ff 93       	push	r31
	if (EEPROM_Call_Back != NULL)
 9fe:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <EEPROM_Call_Back>
 a02:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <EEPROM_Call_Back+0x1>
 a06:	30 97       	sbiw	r30, 0x00	; 0
 a08:	09 f0       	breq	.+2      	; 0xa0c <__vector_17+0x30>
		EEPROM_Call_Back();
 a0a:	09 95       	icall
}
 a0c:	ff 91       	pop	r31
 a0e:	ef 91       	pop	r30
 a10:	bf 91       	pop	r27
 a12:	af 91       	pop	r26
 a14:	9f 91       	pop	r25
 a16:	8f 91       	pop	r24
 a18:	7f 91       	pop	r23
 a1a:	6f 91       	pop	r22
 a1c:	5f 91       	pop	r21
 a1e:	4f 91       	pop	r20
 a20:	3f 91       	pop	r19
 a22:	2f 91       	pop	r18
 a24:	0f 90       	pop	r0
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	0f 90       	pop	r0
 a2a:	1f 90       	pop	r1
 a2c:	18 95       	reti

00000a2e <MGIE_vEnableInterrupts>:
// 0 disable


void MGIE_vEnableInterrupts(void)
{
	SET_BIT(SREG, I);
 a2e:	8f b7       	in	r24, 0x3f	; 63
 a30:	80 68       	ori	r24, 0x80	; 128
 a32:	8f bf       	out	0x3f, r24	; 63
 a34:	08 95       	ret

00000a36 <MTIMER1_vInit>:
		TIMER1B_CTC_Call_Back = CallBack;
	}
}
void MTIMER1_vSetInputCaptureCallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		TIMER1_ICU_Call_Back = CallBack;
 a36:	8f b5       	in	r24, 0x2f	; 47
 a38:	8e 7f       	andi	r24, 0xFE	; 254
 a3a:	8f bd       	out	0x2f, r24	; 47
 a3c:	8f b5       	in	r24, 0x2f	; 47
 a3e:	8d 7f       	andi	r24, 0xFD	; 253
 a40:	8f bd       	out	0x2f, r24	; 47
 a42:	8e b5       	in	r24, 0x2e	; 46
 a44:	88 60       	ori	r24, 0x08	; 8
 a46:	8e bd       	out	0x2e, r24	; 46
 a48:	8e b5       	in	r24, 0x2e	; 46
 a4a:	8f 7e       	andi	r24, 0xEF	; 239
 a4c:	8e bd       	out	0x2e, r24	; 46
 a4e:	8f b5       	in	r24, 0x2f	; 47
 a50:	8f 7b       	andi	r24, 0xBF	; 191
 a52:	8f bd       	out	0x2f, r24	; 47
 a54:	8f b5       	in	r24, 0x2f	; 47
 a56:	8f 77       	andi	r24, 0x7F	; 127
 a58:	8f bd       	out	0x2f, r24	; 47
 a5a:	8e b5       	in	r24, 0x2e	; 46
 a5c:	8e 7f       	andi	r24, 0xFE	; 254
 a5e:	8e bd       	out	0x2e, r24	; 46
 a60:	8e b5       	in	r24, 0x2e	; 46
 a62:	82 60       	ori	r24, 0x02	; 2
 a64:	8e bd       	out	0x2e, r24	; 46
 a66:	8e b5       	in	r24, 0x2e	; 46
 a68:	8b 7f       	andi	r24, 0xFB	; 251
 a6a:	8e bd       	out	0x2e, r24	; 46
 a6c:	08 95       	ret

00000a6e <MTIMER1_vDisInit>:
 a6e:	1f bc       	out	0x2f, r1	; 47
 a70:	1e bc       	out	0x2e, r1	; 46
 a72:	08 95       	ret

00000a74 <MTIMER1_vChannelASetCTCRegister>:
 a74:	9b bd       	out	0x2b, r25	; 43
 a76:	8a bd       	out	0x2a, r24	; 42
 a78:	08 95       	ret

00000a7a <MTIMER1_vClearOVFFlag>:
 a7a:	88 b7       	in	r24, 0x38	; 56
 a7c:	84 60       	ori	r24, 0x04	; 4
 a7e:	88 bf       	out	0x38, r24	; 56
 a80:	08 95       	ret

00000a82 <MTIMER1_vChannelAEnableCTCINT>:
 a82:	89 b7       	in	r24, 0x39	; 57
 a84:	80 61       	ori	r24, 0x10	; 16
 a86:	89 bf       	out	0x39, r24	; 57
 a88:	08 95       	ret

00000a8a <MTIMER1_vChannelAClearCTCFlag>:
 a8a:	88 b7       	in	r24, 0x38	; 56
 a8c:	80 61       	ori	r24, 0x10	; 16
 a8e:	88 bf       	out	0x38, r24	; 56
 a90:	08 95       	ret

00000a92 <MTIMER1_vChannelBClearCTCFlag>:
 a92:	88 b7       	in	r24, 0x38	; 56
 a94:	88 60       	ori	r24, 0x08	; 8
 a96:	88 bf       	out	0x38, r24	; 56
 a98:	08 95       	ret

00000a9a <MTIMER1_vClearInputCaptureFlag>:
 a9a:	88 b7       	in	r24, 0x38	; 56
 a9c:	80 62       	ori	r24, 0x20	; 32
 a9e:	88 bf       	out	0x38, r24	; 56
 aa0:	08 95       	ret

00000aa2 <MTIMER1_vChannelASetCTCCallBack>:
 aa2:	00 97       	sbiw	r24, 0x00	; 0
 aa4:	21 f0       	breq	.+8      	; 0xaae <MTIMER1_vChannelASetCTCCallBack+0xc>
 aa6:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <TIMER1A_CTC_Call_Back+0x1>
 aaa:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <TIMER1A_CTC_Call_Back>
 aae:	08 95       	ret

00000ab0 <__vector_6>:
	}
}

void __vector_6(void) {
 ab0:	1f 92       	push	r1
 ab2:	0f 92       	push	r0
 ab4:	0f b6       	in	r0, 0x3f	; 63
 ab6:	0f 92       	push	r0
 ab8:	11 24       	eor	r1, r1
 aba:	2f 93       	push	r18
 abc:	3f 93       	push	r19
 abe:	4f 93       	push	r20
 ac0:	5f 93       	push	r21
 ac2:	6f 93       	push	r22
 ac4:	7f 93       	push	r23
 ac6:	8f 93       	push	r24
 ac8:	9f 93       	push	r25
 aca:	af 93       	push	r26
 acc:	bf 93       	push	r27
 ace:	ef 93       	push	r30
 ad0:	ff 93       	push	r31
	if (TIMER1_ICU_Call_Back != NULL)
 ad2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <TIMER1_ICU_Call_Back>
 ad6:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <TIMER1_ICU_Call_Back+0x1>
 ada:	30 97       	sbiw	r30, 0x00	; 0
 adc:	09 f0       	breq	.+2      	; 0xae0 <__vector_6+0x30>
		TIMER1_ICU_Call_Back();
 ade:	09 95       	icall
	MTIMER1_vClearInputCaptureFlag();
 ae0:	0e 94 4d 05 	call	0xa9a	; 0xa9a <MTIMER1_vClearInputCaptureFlag>
}
 ae4:	ff 91       	pop	r31
 ae6:	ef 91       	pop	r30
 ae8:	bf 91       	pop	r27
 aea:	af 91       	pop	r26
 aec:	9f 91       	pop	r25
 aee:	8f 91       	pop	r24
 af0:	7f 91       	pop	r23
 af2:	6f 91       	pop	r22
 af4:	5f 91       	pop	r21
 af6:	4f 91       	pop	r20
 af8:	3f 91       	pop	r19
 afa:	2f 91       	pop	r18
 afc:	0f 90       	pop	r0
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	0f 90       	pop	r0
 b02:	1f 90       	pop	r1
 b04:	18 95       	reti

00000b06 <__vector_7>:

void __vector_7(void) {
 b06:	1f 92       	push	r1
 b08:	0f 92       	push	r0
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	0f 92       	push	r0
 b0e:	11 24       	eor	r1, r1
 b10:	2f 93       	push	r18
 b12:	3f 93       	push	r19
 b14:	4f 93       	push	r20
 b16:	5f 93       	push	r21
 b18:	6f 93       	push	r22
 b1a:	7f 93       	push	r23
 b1c:	8f 93       	push	r24
 b1e:	9f 93       	push	r25
 b20:	af 93       	push	r26
 b22:	bf 93       	push	r27
 b24:	ef 93       	push	r30
 b26:	ff 93       	push	r31
	if (TIMER1A_CTC_Call_Back != NULL)
 b28:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <TIMER1A_CTC_Call_Back>
 b2c:	f0 91 5b 01 	lds	r31, 0x015B	; 0x80015b <TIMER1A_CTC_Call_Back+0x1>
 b30:	30 97       	sbiw	r30, 0x00	; 0
 b32:	09 f0       	breq	.+2      	; 0xb36 <__vector_7+0x30>
		TIMER1A_CTC_Call_Back();
 b34:	09 95       	icall
	MTIMER1_vChannelAClearCTCFlag();
 b36:	0e 94 45 05 	call	0xa8a	; 0xa8a <MTIMER1_vChannelAClearCTCFlag>
}
 b3a:	ff 91       	pop	r31
 b3c:	ef 91       	pop	r30
 b3e:	bf 91       	pop	r27
 b40:	af 91       	pop	r26
 b42:	9f 91       	pop	r25
 b44:	8f 91       	pop	r24
 b46:	7f 91       	pop	r23
 b48:	6f 91       	pop	r22
 b4a:	5f 91       	pop	r21
 b4c:	4f 91       	pop	r20
 b4e:	3f 91       	pop	r19
 b50:	2f 91       	pop	r18
 b52:	0f 90       	pop	r0
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	0f 90       	pop	r0
 b58:	1f 90       	pop	r1
 b5a:	18 95       	reti

00000b5c <__vector_8>:

void __vector_8(void) {
 b5c:	1f 92       	push	r1
 b5e:	0f 92       	push	r0
 b60:	0f b6       	in	r0, 0x3f	; 63
 b62:	0f 92       	push	r0
 b64:	11 24       	eor	r1, r1
 b66:	2f 93       	push	r18
 b68:	3f 93       	push	r19
 b6a:	4f 93       	push	r20
 b6c:	5f 93       	push	r21
 b6e:	6f 93       	push	r22
 b70:	7f 93       	push	r23
 b72:	8f 93       	push	r24
 b74:	9f 93       	push	r25
 b76:	af 93       	push	r26
 b78:	bf 93       	push	r27
 b7a:	ef 93       	push	r30
 b7c:	ff 93       	push	r31
	if (TIMER1B_CTC_Call_Back != NULL)
 b7e:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <TIMER1B_CTC_Call_Back>
 b82:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <TIMER1B_CTC_Call_Back+0x1>
 b86:	30 97       	sbiw	r30, 0x00	; 0
 b88:	09 f0       	breq	.+2      	; 0xb8c <__vector_8+0x30>
		TIMER1B_CTC_Call_Back();
 b8a:	09 95       	icall
	MTIMER1_vChannelBClearCTCFlag();
 b8c:	0e 94 49 05 	call	0xa92	; 0xa92 <MTIMER1_vChannelBClearCTCFlag>
}
 b90:	ff 91       	pop	r31
 b92:	ef 91       	pop	r30
 b94:	bf 91       	pop	r27
 b96:	af 91       	pop	r26
 b98:	9f 91       	pop	r25
 b9a:	8f 91       	pop	r24
 b9c:	7f 91       	pop	r23
 b9e:	6f 91       	pop	r22
 ba0:	5f 91       	pop	r21
 ba2:	4f 91       	pop	r20
 ba4:	3f 91       	pop	r19
 ba6:	2f 91       	pop	r18
 ba8:	0f 90       	pop	r0
 baa:	0f be       	out	0x3f, r0	; 63
 bac:	0f 90       	pop	r0
 bae:	1f 90       	pop	r1
 bb0:	18 95       	reti

00000bb2 <__vector_9>:

void __vector_9(void) {
 bb2:	1f 92       	push	r1
 bb4:	0f 92       	push	r0
 bb6:	0f b6       	in	r0, 0x3f	; 63
 bb8:	0f 92       	push	r0
 bba:	11 24       	eor	r1, r1
 bbc:	2f 93       	push	r18
 bbe:	3f 93       	push	r19
 bc0:	4f 93       	push	r20
 bc2:	5f 93       	push	r21
 bc4:	6f 93       	push	r22
 bc6:	7f 93       	push	r23
 bc8:	8f 93       	push	r24
 bca:	9f 93       	push	r25
 bcc:	af 93       	push	r26
 bce:	bf 93       	push	r27
 bd0:	ef 93       	push	r30
 bd2:	ff 93       	push	r31
	if (TIMER1_OVF_Call_Back != NULL)
 bd4:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <TIMER1_OVF_Call_Back>
 bd8:	f0 91 59 01 	lds	r31, 0x0159	; 0x800159 <TIMER1_OVF_Call_Back+0x1>
 bdc:	30 97       	sbiw	r30, 0x00	; 0
 bde:	09 f0       	breq	.+2      	; 0xbe2 <__vector_9+0x30>
		TIMER1_OVF_Call_Back();
 be0:	09 95       	icall
	MTIMER1_vClearOVFFlag();
 be2:	0e 94 3d 05 	call	0xa7a	; 0xa7a <MTIMER1_vClearOVFFlag>
}
 be6:	ff 91       	pop	r31
 be8:	ef 91       	pop	r30
 bea:	bf 91       	pop	r27
 bec:	af 91       	pop	r26
 bee:	9f 91       	pop	r25
 bf0:	8f 91       	pop	r24
 bf2:	7f 91       	pop	r23
 bf4:	6f 91       	pop	r22
 bf6:	5f 91       	pop	r21
 bf8:	4f 91       	pop	r20
 bfa:	3f 91       	pop	r19
 bfc:	2f 91       	pop	r18
 bfe:	0f 90       	pop	r0
 c00:	0f be       	out	0x3f, r0	; 63
 c02:	0f 90       	pop	r0
 c04:	1f 90       	pop	r1
 c06:	18 95       	reti

00000c08 <MUSART_vInit>:
		USART_TXC_Call_Back = CallBack;
	}
}
void MUSART_vSetUDRECallBack(void (*CallBack)(void)) {
	if (CallBack != NULL) {
		USART_UDRE_Call_Back = CallBack;
 c08:	89 b9       	out	0x09, r24	; 9
 c0a:	90 bd       	out	0x20, r25	; 32
 c0c:	8a b1       	in	r24, 0x0a	; 10
 c0e:	8b 7f       	andi	r24, 0xFB	; 251
 c10:	8a b9       	out	0x0a, r24	; 10
 c12:	86 e8       	ldi	r24, 0x86	; 134
 c14:	80 bd       	out	0x20, r24	; 32
 c16:	8a b1       	in	r24, 0x0a	; 10
 c18:	80 61       	ori	r24, 0x10	; 16
 c1a:	8a b9       	out	0x0a, r24	; 10
 c1c:	8a b1       	in	r24, 0x0a	; 10
 c1e:	88 60       	ori	r24, 0x08	; 8
 c20:	8a b9       	out	0x0a, r24	; 10
 c22:	08 95       	ret

00000c24 <MUSART_vTransmit>:
 c24:	5d 9b       	sbis	0x0b, 5	; 11
 c26:	fe cf       	rjmp	.-4      	; 0xc24 <MUSART_vTransmit>
 c28:	8c b9       	out	0x0c, r24	; 12
 c2a:	08 95       	ret

00000c2c <MUSART_u8Receive>:
 c2c:	5f 9b       	sbis	0x0b, 7	; 11
 c2e:	fe cf       	rjmp	.-4      	; 0xc2c <MUSART_u8Receive>
 c30:	5c 99       	sbic	0x0b, 4	; 11
 c32:	06 c0       	rjmp	.+12     	; 0xc40 <MUSART_u8Receive+0x14>
 c34:	5b 99       	sbic	0x0b, 3	; 11
 c36:	06 c0       	rjmp	.+12     	; 0xc44 <MUSART_u8Receive+0x18>
 c38:	5a 99       	sbic	0x0b, 2	; 11
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <MUSART_u8Receive+0x1c>
 c3c:	8c b1       	in	r24, 0x0c	; 12
 c3e:	08 95       	ret
 c40:	8f ef       	ldi	r24, 0xFF	; 255
 c42:	08 95       	ret
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	08 95       	ret
 c48:	8f ef       	ldi	r24, 0xFF	; 255
 c4a:	08 95       	ret

00000c4c <MUSART_u8UnreadDate>:
 c4c:	8b b1       	in	r24, 0x0b	; 11
 c4e:	88 1f       	adc	r24, r24
 c50:	88 27       	eor	r24, r24
 c52:	88 1f       	adc	r24, r24
 c54:	08 95       	ret

00000c56 <MUSART_vTransmitString>:
 c56:	0f 93       	push	r16
 c58:	1f 93       	push	r17
 c5a:	cf 93       	push	r28
 c5c:	df 93       	push	r29
 c5e:	8c 01       	movw	r16, r24
 c60:	d6 2f       	mov	r29, r22
 c62:	c0 e0       	ldi	r28, 0x00	; 0
 c64:	07 c0       	rjmp	.+14     	; 0xc74 <MUSART_vTransmitString+0x1e>
 c66:	f8 01       	movw	r30, r16
 c68:	ec 0f       	add	r30, r28
 c6a:	f1 1d       	adc	r31, r1
 c6c:	80 81       	ld	r24, Z
 c6e:	0e 94 12 06 	call	0xc24	; 0xc24 <MUSART_vTransmit>
 c72:	cf 5f       	subi	r28, 0xFF	; 255
 c74:	cd 17       	cp	r28, r29
 c76:	b8 f3       	brcs	.-18     	; 0xc66 <MUSART_vTransmitString+0x10>
 c78:	df 91       	pop	r29
 c7a:	cf 91       	pop	r28
 c7c:	1f 91       	pop	r17
 c7e:	0f 91       	pop	r16
 c80:	08 95       	ret

00000c82 <__vector_13>:
	}
}

void __vector_13(void) {
 c82:	1f 92       	push	r1
 c84:	0f 92       	push	r0
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	0f 92       	push	r0
 c8a:	11 24       	eor	r1, r1
 c8c:	2f 93       	push	r18
 c8e:	3f 93       	push	r19
 c90:	4f 93       	push	r20
 c92:	5f 93       	push	r21
 c94:	6f 93       	push	r22
 c96:	7f 93       	push	r23
 c98:	8f 93       	push	r24
 c9a:	9f 93       	push	r25
 c9c:	af 93       	push	r26
 c9e:	bf 93       	push	r27
 ca0:	ef 93       	push	r30
 ca2:	ff 93       	push	r31
	if (USART_RXC_Call_Back != NULL)
 ca4:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <USART_RXC_Call_Back>
 ca8:	f0 91 61 01 	lds	r31, 0x0161	; 0x800161 <USART_RXC_Call_Back+0x1>
 cac:	30 97       	sbiw	r30, 0x00	; 0
 cae:	09 f0       	breq	.+2      	; 0xcb2 <__vector_13+0x30>
		USART_RXC_Call_Back();
 cb0:	09 95       	icall
}
 cb2:	ff 91       	pop	r31
 cb4:	ef 91       	pop	r30
 cb6:	bf 91       	pop	r27
 cb8:	af 91       	pop	r26
 cba:	9f 91       	pop	r25
 cbc:	8f 91       	pop	r24
 cbe:	7f 91       	pop	r23
 cc0:	6f 91       	pop	r22
 cc2:	5f 91       	pop	r21
 cc4:	4f 91       	pop	r20
 cc6:	3f 91       	pop	r19
 cc8:	2f 91       	pop	r18
 cca:	0f 90       	pop	r0
 ccc:	0f be       	out	0x3f, r0	; 63
 cce:	0f 90       	pop	r0
 cd0:	1f 90       	pop	r1
 cd2:	18 95       	reti

00000cd4 <__vector_14>:

void __vector_14(void) {
 cd4:	1f 92       	push	r1
 cd6:	0f 92       	push	r0
 cd8:	0f b6       	in	r0, 0x3f	; 63
 cda:	0f 92       	push	r0
 cdc:	11 24       	eor	r1, r1
 cde:	2f 93       	push	r18
 ce0:	3f 93       	push	r19
 ce2:	4f 93       	push	r20
 ce4:	5f 93       	push	r21
 ce6:	6f 93       	push	r22
 ce8:	7f 93       	push	r23
 cea:	8f 93       	push	r24
 cec:	9f 93       	push	r25
 cee:	af 93       	push	r26
 cf0:	bf 93       	push	r27
 cf2:	ef 93       	push	r30
 cf4:	ff 93       	push	r31
	if (USART_UDRE_Call_Back != NULL)
 cf6:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <USART_UDRE_Call_Back>
 cfa:	f0 91 5d 01 	lds	r31, 0x015D	; 0x80015d <USART_UDRE_Call_Back+0x1>
 cfe:	30 97       	sbiw	r30, 0x00	; 0
 d00:	09 f0       	breq	.+2      	; 0xd04 <__vector_14+0x30>
		USART_UDRE_Call_Back();
 d02:	09 95       	icall
}
 d04:	ff 91       	pop	r31
 d06:	ef 91       	pop	r30
 d08:	bf 91       	pop	r27
 d0a:	af 91       	pop	r26
 d0c:	9f 91       	pop	r25
 d0e:	8f 91       	pop	r24
 d10:	7f 91       	pop	r23
 d12:	6f 91       	pop	r22
 d14:	5f 91       	pop	r21
 d16:	4f 91       	pop	r20
 d18:	3f 91       	pop	r19
 d1a:	2f 91       	pop	r18
 d1c:	0f 90       	pop	r0
 d1e:	0f be       	out	0x3f, r0	; 63
 d20:	0f 90       	pop	r0
 d22:	1f 90       	pop	r1
 d24:	18 95       	reti

00000d26 <__vector_15>:

void __vector_15(void) {
 d26:	1f 92       	push	r1
 d28:	0f 92       	push	r0
 d2a:	0f b6       	in	r0, 0x3f	; 63
 d2c:	0f 92       	push	r0
 d2e:	11 24       	eor	r1, r1
 d30:	2f 93       	push	r18
 d32:	3f 93       	push	r19
 d34:	4f 93       	push	r20
 d36:	5f 93       	push	r21
 d38:	6f 93       	push	r22
 d3a:	7f 93       	push	r23
 d3c:	8f 93       	push	r24
 d3e:	9f 93       	push	r25
 d40:	af 93       	push	r26
 d42:	bf 93       	push	r27
 d44:	ef 93       	push	r30
 d46:	ff 93       	push	r31
	if (USART_TXC_Call_Back != NULL)
 d48:	e0 91 5e 01 	lds	r30, 0x015E	; 0x80015e <USART_TXC_Call_Back>
 d4c:	f0 91 5f 01 	lds	r31, 0x015F	; 0x80015f <USART_TXC_Call_Back+0x1>
 d50:	30 97       	sbiw	r30, 0x00	; 0
 d52:	09 f0       	breq	.+2      	; 0xd56 <__vector_15+0x30>
		USART_TXC_Call_Back();
 d54:	09 95       	icall
}
 d56:	ff 91       	pop	r31
 d58:	ef 91       	pop	r30
 d5a:	bf 91       	pop	r27
 d5c:	af 91       	pop	r26
 d5e:	9f 91       	pop	r25
 d60:	8f 91       	pop	r24
 d62:	7f 91       	pop	r23
 d64:	6f 91       	pop	r22
 d66:	5f 91       	pop	r21
 d68:	4f 91       	pop	r20
 d6a:	3f 91       	pop	r19
 d6c:	2f 91       	pop	r18
 d6e:	0f 90       	pop	r0
 d70:	0f be       	out	0x3f, r0	; 63
 d72:	0f 90       	pop	r0
 d74:	1f 90       	pop	r1
 d76:	18 95       	reti

00000d78 <_exit>:
 d78:	f8 94       	cli

00000d7a <__stop_program>:
 d7a:	ff cf       	rjmp	.-2      	; 0xd7a <__stop_program>
